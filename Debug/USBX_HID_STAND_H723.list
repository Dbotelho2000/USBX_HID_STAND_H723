
USBX_HID_STAND_H723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a770  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800aa3c  0800aa3c  0001aa3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800aa84  0800aa84  0001aa84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800aa88  0800aa88  0001aa88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b8  24000000  0800aa8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001e58  240000b8  0800ab44  000200b8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24001f10  0800ab44  00021f10  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000200e6  2**0
                  CONTENTS, READONLY
 10 .debug_info   000337a3  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000078b9  00000000  00000000  000538cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001348  00000000  00000000  0005b188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d66  00000000  00000000  0005c4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c713  00000000  00000000  0005d236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003271e  00000000  00000000  00099949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00147cdf  00000000  00000000  000cc067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003c64  00000000  00000000  00213d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006f  00000000  00000000  002179ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000b8 	.word	0x240000b8
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800aa24 	.word	0x0800aa24

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000bc 	.word	0x240000bc
 8000308:	0800aa24 	.word	0x0800aa24

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b08a      	sub	sp, #40	; 0x28
 8000320:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000322:	f107 0314 	add.w	r3, r7, #20
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
 8000330:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000332:	4b3a      	ldr	r3, [pc, #232]	; (800041c <MX_GPIO_Init+0x100>)
 8000334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000338:	4a38      	ldr	r2, [pc, #224]	; (800041c <MX_GPIO_Init+0x100>)
 800033a:	f043 0304 	orr.w	r3, r3, #4
 800033e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000342:	4b36      	ldr	r3, [pc, #216]	; (800041c <MX_GPIO_Init+0x100>)
 8000344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000348:	f003 0304 	and.w	r3, r3, #4
 800034c:	613b      	str	r3, [r7, #16]
 800034e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000350:	4b32      	ldr	r3, [pc, #200]	; (800041c <MX_GPIO_Init+0x100>)
 8000352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000356:	4a31      	ldr	r2, [pc, #196]	; (800041c <MX_GPIO_Init+0x100>)
 8000358:	f043 0302 	orr.w	r3, r3, #2
 800035c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000360:	4b2e      	ldr	r3, [pc, #184]	; (800041c <MX_GPIO_Init+0x100>)
 8000362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000366:	f003 0302 	and.w	r3, r3, #2
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036e:	4b2b      	ldr	r3, [pc, #172]	; (800041c <MX_GPIO_Init+0x100>)
 8000370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000374:	4a29      	ldr	r2, [pc, #164]	; (800041c <MX_GPIO_Init+0x100>)
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800037e:	4b27      	ldr	r3, [pc, #156]	; (800041c <MX_GPIO_Init+0x100>)
 8000380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000384:	f003 0301 	and.w	r3, r3, #1
 8000388:	60bb      	str	r3, [r7, #8]
 800038a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800038c:	4b23      	ldr	r3, [pc, #140]	; (800041c <MX_GPIO_Init+0x100>)
 800038e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000392:	4a22      	ldr	r2, [pc, #136]	; (800041c <MX_GPIO_Init+0x100>)
 8000394:	f043 0310 	orr.w	r3, r3, #16
 8000398:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800039c:	4b1f      	ldr	r3, [pc, #124]	; (800041c <MX_GPIO_Init+0x100>)
 800039e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003a2:	f003 0310 	and.w	r3, r3, #16
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	f244 0101 	movw	r1, #16385	; 0x4001
 80003b0:	481b      	ldr	r0, [pc, #108]	; (8000420 <MX_GPIO_Init+0x104>)
 80003b2:	f000 fdaf 	bl	8000f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2102      	movs	r1, #2
 80003ba:	481a      	ldr	r0, [pc, #104]	; (8000424 <MX_GPIO_Init+0x108>)
 80003bc:	f000 fdaa 	bl	8000f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ca:	2300      	movs	r3, #0
 80003cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003ce:	f107 0314 	add.w	r3, r7, #20
 80003d2:	4619      	mov	r1, r3
 80003d4:	4814      	ldr	r0, [pc, #80]	; (8000428 <MX_GPIO_Init+0x10c>)
 80003d6:	f000 fbdd 	bl	8000b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80003da:	f244 0301 	movw	r3, #16385	; 0x4001
 80003de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e0:	2301      	movs	r3, #1
 80003e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e8:	2300      	movs	r3, #0
 80003ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ec:	f107 0314 	add.w	r3, r7, #20
 80003f0:	4619      	mov	r1, r3
 80003f2:	480b      	ldr	r0, [pc, #44]	; (8000420 <MX_GPIO_Init+0x104>)
 80003f4:	f000 fbce 	bl	8000b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 80003f8:	2302      	movs	r3, #2
 80003fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fc:	2301      	movs	r3, #1
 80003fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	2300      	movs	r3, #0
 8000402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000404:	2300      	movs	r3, #0
 8000406:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000408:	f107 0314 	add.w	r3, r7, #20
 800040c:	4619      	mov	r1, r3
 800040e:	4805      	ldr	r0, [pc, #20]	; (8000424 <MX_GPIO_Init+0x108>)
 8000410:	f000 fbc0 	bl	8000b94 <HAL_GPIO_Init>

}
 8000414:	bf00      	nop
 8000416:	3728      	adds	r7, #40	; 0x28
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	58024400 	.word	0x58024400
 8000420:	58020400 	.word	0x58020400
 8000424:	58021000 	.word	0x58021000
 8000428:	58020800 	.word	0x58020800

0800042c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000430:	f000 f9ea 	bl	8000808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000434:	f000 f808 	bl	8000448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000438:	f7ff ff70 	bl	800031c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  MX_USBX_Device_Init();
 800043c:	f009 fbc8 	bl	8009bd0 <MX_USBX_Device_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  USBX_Device_Process();
 8000440:	f009 fcc2 	bl	8009dc8 <USBX_Device_Process>
 8000444:	e7fc      	b.n	8000440 <main+0x14>
	...

08000448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b09c      	sub	sp, #112	; 0x70
 800044c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000452:	224c      	movs	r2, #76	; 0x4c
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f00a fab8 	bl	800a9cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	2220      	movs	r2, #32
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f00a fab2 	bl	800a9cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000468:	2002      	movs	r0, #2
 800046a:	f002 f8a5 	bl	80025b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800046e:	2300      	movs	r3, #0
 8000470:	603b      	str	r3, [r7, #0]
 8000472:	4b2d      	ldr	r3, [pc, #180]	; (8000528 <SystemClock_Config+0xe0>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4a2c      	ldr	r2, [pc, #176]	; (8000528 <SystemClock_Config+0xe0>)
 8000478:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800047c:	6193      	str	r3, [r2, #24]
 800047e:	4b2a      	ldr	r3, [pc, #168]	; (8000528 <SystemClock_Config+0xe0>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000486:	603b      	str	r3, [r7, #0]
 8000488:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800048a:	bf00      	nop
 800048c:	4b26      	ldr	r3, [pc, #152]	; (8000528 <SystemClock_Config+0xe0>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000498:	d1f8      	bne.n	800048c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800049a:	2322      	movs	r3, #34	; 0x22
 800049c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800049e:	2301      	movs	r3, #1
 80004a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80004a2:	2340      	movs	r3, #64	; 0x40
 80004a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004a6:	2301      	movs	r3, #1
 80004a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004aa:	2302      	movs	r3, #2
 80004ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004ae:	2300      	movs	r3, #0
 80004b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 80004b2:	2320      	movs	r3, #32
 80004b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80004b6:	f240 1313 	movw	r3, #275	; 0x113
 80004ba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80004bc:	2301      	movs	r3, #1
 80004be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80004c0:	2304      	movs	r3, #4
 80004c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004c4:	2302      	movs	r3, #2
 80004c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80004c8:	2304      	movs	r3, #4
 80004ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004cc:	2300      	movs	r3, #0
 80004ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004d8:	4618      	mov	r0, r3
 80004da:	f002 f8b7 	bl	800264c <HAL_RCC_OscConfig>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80004e4:	f000 f822 	bl	800052c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e8:	233f      	movs	r3, #63	; 0x3f
 80004ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ec:	2303      	movs	r3, #3
 80004ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004f4:	2308      	movs	r3, #8
 80004f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004f8:	2340      	movs	r3, #64	; 0x40
 80004fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004fc:	2340      	movs	r3, #64	; 0x40
 80004fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000504:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000506:	2340      	movs	r3, #64	; 0x40
 8000508:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2103      	movs	r1, #3
 800050e:	4618      	mov	r0, r3
 8000510:	f002 fc76 	bl	8002e00 <HAL_RCC_ClockConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800051a:	f000 f807 	bl	800052c <Error_Handler>
  }
}
 800051e:	bf00      	nop
 8000520:	3770      	adds	r7, #112	; 0x70
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	58024800 	.word	0x58024800

0800052c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
}
 8000532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000534:	e7fe      	b.n	8000534 <Error_Handler+0x8>
	...

08000538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <HAL_MspInit+0x30>)
 8000540:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000544:	4a08      	ldr	r2, [pc, #32]	; (8000568 <HAL_MspInit+0x30>)
 8000546:	f043 0302 	orr.w	r3, r3, #2
 800054a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_MspInit+0x30>)
 8000550:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000554:	f003 0302 	and.w	r3, r3, #2
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	58024400 	.word	0x58024400

0800056c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <NMI_Handler+0x4>

08000572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000576:	e7fe      	b.n	8000576 <HardFault_Handler+0x4>

08000578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800057c:	e7fe      	b.n	800057c <MemManage_Handler+0x4>

0800057e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000582:	e7fe      	b.n	8000582 <BusFault_Handler+0x4>

08000584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <UsageFault_Handler+0x4>

0800058a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b8:	f000 f998 	bl	80008ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80005c4:	4802      	ldr	r0, [pc, #8]	; (80005d0 <OTG_HS_IRQHandler+0x10>)
 80005c6:	f000 fe52 	bl	800126e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	240000d4 	.word	0x240000d4

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b32      	ldr	r3, [pc, #200]	; (80006a4 <SystemInit+0xd0>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a31      	ldr	r2, [pc, #196]	; (80006a4 <SystemInit+0xd0>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b2f      	ldr	r3, [pc, #188]	; (80006a8 <SystemInit+0xd4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b2c      	ldr	r3, [pc, #176]	; (80006a8 <SystemInit+0xd4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a2a      	ldr	r2, [pc, #168]	; (80006a8 <SystemInit+0xd4>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b29      	ldr	r3, [pc, #164]	; (80006ac <SystemInit+0xd8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a28      	ldr	r2, [pc, #160]	; (80006ac <SystemInit+0xd8>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b26      	ldr	r3, [pc, #152]	; (80006ac <SystemInit+0xd8>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b25      	ldr	r3, [pc, #148]	; (80006ac <SystemInit+0xd8>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	4924      	ldr	r1, [pc, #144]	; (80006ac <SystemInit+0xd8>)
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <SystemInit+0xdc>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <SystemInit+0xd4>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <SystemInit+0xd4>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a1c      	ldr	r2, [pc, #112]	; (80006a8 <SystemInit+0xd4>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <SystemInit+0xd8>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <SystemInit+0xd8>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <SystemInit+0xd8>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <SystemInit+0xd8>)
 8000652:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <SystemInit+0xe0>)
 8000654:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <SystemInit+0xd8>)
 8000658:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <SystemInit+0xe4>)
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <SystemInit+0xd8>)
 800065e:	4a17      	ldr	r2, [pc, #92]	; (80006bc <SystemInit+0xe8>)
 8000660:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <SystemInit+0xd8>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <SystemInit+0xd8>)
 800066a:	4a14      	ldr	r2, [pc, #80]	; (80006bc <SystemInit+0xe8>)
 800066c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <SystemInit+0xd8>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <SystemInit+0xd8>)
 8000676:	4a11      	ldr	r2, [pc, #68]	; (80006bc <SystemInit+0xe8>)
 8000678:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <SystemInit+0xd8>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <SystemInit+0xd8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a09      	ldr	r2, [pc, #36]	; (80006ac <SystemInit+0xd8>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <SystemInit+0xd8>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <SystemInit+0xec>)
 8000694:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000698:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000ed00 	.word	0xe000ed00
 80006a8:	52002000 	.word	0x52002000
 80006ac:	58024400 	.word	0x58024400
 80006b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006b4:	02020200 	.word	0x02020200
 80006b8:	01ff0000 	.word	0x01ff0000
 80006bc:	01010280 	.word	0x01010280
 80006c0:	52004000 	.word	0x52004000

080006c4 <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80006ca:	4a16      	ldr	r2, [pc, #88]	; (8000724 <MX_USB_OTG_HS_PCD_Init+0x60>)
 80006cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80006d0:	2209      	movs	r2, #9
 80006d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80006d6:	2202      	movs	r2, #2
 80006d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80006e2:	2202      	movs	r2, #2
 80006e4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000700:	2200      	movs	r2, #0
 8000702:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000706:	2200      	movs	r2, #0
 8000708:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800070c:	f000 fc1b 	bl	8000f46 <HAL_PCD_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000716:	f7ff ff09 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	240000d4 	.word	0x240000d4
 8000724:	40040000 	.word	0x40040000

08000728 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b0b2      	sub	sp, #200	; 0xc8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	22b8      	movs	r2, #184	; 0xb8
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f00a f947 	bl	800a9cc <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a1a      	ldr	r2, [pc, #104]	; (80007ac <HAL_PCD_MspInit+0x84>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d12c      	bne.n	80007a2 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000748:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800074c:	f04f 0300 	mov.w	r3, #0
 8000750:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000754:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000758:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fead 	bl	80034c0 <HAL_RCCEx_PeriphCLKConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 800076c:	f7ff fede 	bl	800052c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000770:	f001 ff5c 	bl	800262c <HAL_PWREx_EnableUSBVoltageDetector>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <HAL_PCD_MspInit+0x88>)
 8000776:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800077a:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <HAL_PCD_MspInit+0x88>)
 800077c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000780:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <HAL_PCD_MspInit+0x88>)
 8000786:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800078a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	204d      	movs	r0, #77	; 0x4d
 8000798:	f000 f9c7 	bl	8000b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800079c:	204d      	movs	r0, #77	; 0x4d
 800079e:	f000 f9de 	bl	8000b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80007a2:	bf00      	nop
 80007a4:	37c8      	adds	r7, #200	; 0xc8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40040000 	.word	0x40040000
 80007b0:	58024400 	.word	0x58024400

080007b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80007b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007b8:	f7ff ff0c 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007bc:	480c      	ldr	r0, [pc, #48]	; (80007f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007be:	490d      	ldr	r1, [pc, #52]	; (80007f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007c0:	4a0d      	ldr	r2, [pc, #52]	; (80007f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c4:	e002      	b.n	80007cc <LoopCopyDataInit>

080007c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ca:	3304      	adds	r3, #4

080007cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d0:	d3f9      	bcc.n	80007c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d2:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007d4:	4c0a      	ldr	r4, [pc, #40]	; (8000800 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d8:	e001      	b.n	80007de <LoopFillZerobss>

080007da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007dc:	3204      	adds	r2, #4

080007de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e0:	d3fb      	bcc.n	80007da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007e2:	f00a f8fb 	bl	800a9dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007e6:	f7ff fe21 	bl	800042c <main>
  bx  lr
 80007ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007ec:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80007f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80007f4:	240000b8 	.word	0x240000b8
  ldr r2, =_sidata
 80007f8:	0800aa8c 	.word	0x0800aa8c
  ldr r2, =_sbss
 80007fc:	240000b8 	.word	0x240000b8
  ldr r4, =_ebss
 8000800:	24001f10 	.word	0x24001f10

08000804 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000804:	e7fe      	b.n	8000804 <ADC3_IRQHandler>
	...

08000808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800080e:	2003      	movs	r0, #3
 8000810:	f000 f980 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000814:	f002 fcaa 	bl	800316c <HAL_RCC_GetSysClockFreq>
 8000818:	4602      	mov	r2, r0
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <HAL_Init+0x68>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	0a1b      	lsrs	r3, r3, #8
 8000820:	f003 030f 	and.w	r3, r3, #15
 8000824:	4913      	ldr	r1, [pc, #76]	; (8000874 <HAL_Init+0x6c>)
 8000826:	5ccb      	ldrb	r3, [r1, r3]
 8000828:	f003 031f 	and.w	r3, r3, #31
 800082c:	fa22 f303 	lsr.w	r3, r2, r3
 8000830:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <HAL_Init+0x68>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <HAL_Init+0x6c>)
 800083c:	5cd3      	ldrb	r3, [r2, r3]
 800083e:	f003 031f 	and.w	r3, r3, #31
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	fa22 f303 	lsr.w	r3, r2, r3
 8000848:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <HAL_Init+0x70>)
 800084a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800084c:	4a0b      	ldr	r2, [pc, #44]	; (800087c <HAL_Init+0x74>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000852:	2000      	movs	r0, #0
 8000854:	f000 f814 	bl	8000880 <HAL_InitTick>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
 8000860:	e002      	b.n	8000868 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000862:	f7ff fe69 	bl	8000538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000866:	2300      	movs	r3, #0
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	58024400 	.word	0x58024400
 8000874:	0800aa74 	.word	0x0800aa74
 8000878:	24000004 	.word	0x24000004
 800087c:	24000000 	.word	0x24000000

08000880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <HAL_InitTick+0x60>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d101      	bne.n	8000894 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000890:	2301      	movs	r3, #1
 8000892:	e021      	b.n	80008d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <HAL_InitTick+0x64>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <HAL_InitTick+0x60>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f965 	bl	8000b7a <HAL_SYSTICK_Config>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e00e      	b.n	80008d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b0f      	cmp	r3, #15
 80008be:	d80a      	bhi.n	80008d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c0:	2200      	movs	r2, #0
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	f04f 30ff 	mov.w	r0, #4294967295
 80008c8:	f000 f92f 	bl	8000b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008cc:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <HAL_InitTick+0x68>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	e000      	b.n	80008d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	2400000c 	.word	0x2400000c
 80008e4:	24000000 	.word	0x24000000
 80008e8:	24000008 	.word	0x24000008

080008ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_IncTick+0x20>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_IncTick+0x24>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <HAL_IncTick+0x24>)
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	2400000c 	.word	0x2400000c
 8000910:	240005e0 	.word	0x240005e0

08000914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return uwTick;
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <HAL_GetTick+0x14>)
 800091a:	681b      	ldr	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	240005e0 	.word	0x240005e0

0800092c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000934:	f7ff ffee 	bl	8000914 <HAL_GetTick>
 8000938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000944:	d005      	beq.n	8000952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_Delay+0x44>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	4413      	add	r3, r2
 8000950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000952:	bf00      	nop
 8000954:	f7ff ffde 	bl	8000914 <HAL_GetTick>
 8000958:	4602      	mov	r2, r0
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	429a      	cmp	r2, r3
 8000962:	d8f7      	bhi.n	8000954 <HAL_Delay+0x28>
  {
  }
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2400000c 	.word	0x2400000c

08000974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <__NVIC_SetPriorityGrouping+0x40>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000990:	4013      	ands	r3, r2
 8000992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 800099e:	4313      	orrs	r3, r2
 80009a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a2:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <__NVIC_SetPriorityGrouping+0x40>)
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	60d3      	str	r3, [r2, #12]
}
 80009a8:	bf00      	nop
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000ed00 	.word	0xe000ed00
 80009b8:	05fa0000 	.word	0x05fa0000

080009bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <__NVIC_GetPriorityGrouping+0x18>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	0a1b      	lsrs	r3, r3, #8
 80009c6:	f003 0307 	and.w	r3, r3, #7
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	db0b      	blt.n	8000a02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ea:	88fb      	ldrh	r3, [r7, #6]
 80009ec:	f003 021f 	and.w	r2, r3, #31
 80009f0:	4907      	ldr	r1, [pc, #28]	; (8000a10 <__NVIC_EnableIRQ+0x38>)
 80009f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009f6:	095b      	lsrs	r3, r3, #5
 80009f8:	2001      	movs	r0, #1
 80009fa:	fa00 f202 	lsl.w	r2, r0, r2
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000e100 	.word	0xe000e100

08000a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	db0a      	blt.n	8000a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	490c      	ldr	r1, [pc, #48]	; (8000a60 <__NVIC_SetPriority+0x4c>)
 8000a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	b2d2      	uxtb	r2, r2
 8000a36:	440b      	add	r3, r1
 8000a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a3c:	e00a      	b.n	8000a54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4908      	ldr	r1, [pc, #32]	; (8000a64 <__NVIC_SetPriority+0x50>)
 8000a44:	88fb      	ldrh	r3, [r7, #6]
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	3b04      	subs	r3, #4
 8000a4c:	0112      	lsls	r2, r2, #4
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	440b      	add	r3, r1
 8000a52:	761a      	strb	r2, [r3, #24]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000e100 	.word	0xe000e100
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b089      	sub	sp, #36	; 0x24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f1c3 0307 	rsb	r3, r3, #7
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	bf28      	it	cs
 8000a86:	2304      	movcs	r3, #4
 8000a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d902      	bls.n	8000a98 <NVIC_EncodePriority+0x30>
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3b03      	subs	r3, #3
 8000a96:	e000      	b.n	8000a9a <NVIC_EncodePriority+0x32>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	401a      	ands	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	43d9      	mvns	r1, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	4313      	orrs	r3, r2
         );
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3724      	adds	r7, #36	; 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
	...

08000ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae0:	d301      	bcc.n	8000ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00f      	b.n	8000b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <SysTick_Config+0x40>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aee:	210f      	movs	r1, #15
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f7ff ff8e 	bl	8000a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <SysTick_Config+0x40>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <SysTick_Config+0x40>)
 8000b00:	2207      	movs	r2, #7
 8000b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	e000e010 	.word	0xe000e010

08000b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff29 	bl	8000974 <__NVIC_SetPriorityGrouping>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b38:	f7ff ff40 	bl	80009bc <__NVIC_GetPriorityGrouping>
 8000b3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	68b9      	ldr	r1, [r7, #8]
 8000b42:	6978      	ldr	r0, [r7, #20]
 8000b44:	f7ff ff90 	bl	8000a68 <NVIC_EncodePriority>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff5f 	bl	8000a14 <__NVIC_SetPriority>
}
 8000b56:	bf00      	nop
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff33 	bl	80009d8 <__NVIC_EnableIRQ>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff ffa4 	bl	8000ad0 <SysTick_Config>
 8000b88:	4603      	mov	r3, r0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b089      	sub	sp, #36	; 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000ba2:	4b86      	ldr	r3, [pc, #536]	; (8000dbc <HAL_GPIO_Init+0x228>)
 8000ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ba6:	e18c      	b.n	8000ec2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	2101      	movs	r1, #1
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 817e 	beq.w	8000ebc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f003 0303 	and.w	r3, r3, #3
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d005      	beq.n	8000bd8 <HAL_GPIO_Init+0x44>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d130      	bne.n	8000c3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	2203      	movs	r2, #3
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	4013      	ands	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c0e:	2201      	movs	r2, #1
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43db      	mvns	r3, r3
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	091b      	lsrs	r3, r3, #4
 8000c24:	f003 0201 	and.w	r2, r3, #1
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 0303 	and.w	r3, r3, #3
 8000c42:	2b03      	cmp	r3, #3
 8000c44:	d017      	beq.n	8000c76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	2203      	movs	r2, #3
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 0303 	and.w	r3, r3, #3
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d123      	bne.n	8000cca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	08da      	lsrs	r2, r3, #3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3208      	adds	r2, #8
 8000c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	220f      	movs	r2, #15
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	691a      	ldr	r2, [r3, #16]
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	f003 0307 	and.w	r3, r3, #7
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	08da      	lsrs	r2, r3, #3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3208      	adds	r2, #8
 8000cc4:	69b9      	ldr	r1, [r7, #24]
 8000cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0203 	and.w	r2, r3, #3
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 80d8 	beq.w	8000ebc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0c:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <HAL_GPIO_Init+0x22c>)
 8000d0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d12:	4a2b      	ldr	r2, [pc, #172]	; (8000dc0 <HAL_GPIO_Init+0x22c>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d1c:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <HAL_GPIO_Init+0x22c>)
 8000d1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d2a:	4a26      	ldr	r2, [pc, #152]	; (8000dc4 <HAL_GPIO_Init+0x230>)
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3302      	adds	r3, #2
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a1d      	ldr	r2, [pc, #116]	; (8000dc8 <HAL_GPIO_Init+0x234>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d04a      	beq.n	8000dec <HAL_GPIO_Init+0x258>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a1c      	ldr	r2, [pc, #112]	; (8000dcc <HAL_GPIO_Init+0x238>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d02b      	beq.n	8000db6 <HAL_GPIO_Init+0x222>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a1b      	ldr	r2, [pc, #108]	; (8000dd0 <HAL_GPIO_Init+0x23c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d025      	beq.n	8000db2 <HAL_GPIO_Init+0x21e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a1a      	ldr	r2, [pc, #104]	; (8000dd4 <HAL_GPIO_Init+0x240>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d01f      	beq.n	8000dae <HAL_GPIO_Init+0x21a>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a19      	ldr	r2, [pc, #100]	; (8000dd8 <HAL_GPIO_Init+0x244>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d019      	beq.n	8000daa <HAL_GPIO_Init+0x216>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a18      	ldr	r2, [pc, #96]	; (8000ddc <HAL_GPIO_Init+0x248>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d013      	beq.n	8000da6 <HAL_GPIO_Init+0x212>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <HAL_GPIO_Init+0x24c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d00d      	beq.n	8000da2 <HAL_GPIO_Init+0x20e>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a16      	ldr	r2, [pc, #88]	; (8000de4 <HAL_GPIO_Init+0x250>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d007      	beq.n	8000d9e <HAL_GPIO_Init+0x20a>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a15      	ldr	r2, [pc, #84]	; (8000de8 <HAL_GPIO_Init+0x254>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d101      	bne.n	8000d9a <HAL_GPIO_Init+0x206>
 8000d96:	2309      	movs	r3, #9
 8000d98:	e029      	b.n	8000dee <HAL_GPIO_Init+0x25a>
 8000d9a:	230a      	movs	r3, #10
 8000d9c:	e027      	b.n	8000dee <HAL_GPIO_Init+0x25a>
 8000d9e:	2307      	movs	r3, #7
 8000da0:	e025      	b.n	8000dee <HAL_GPIO_Init+0x25a>
 8000da2:	2306      	movs	r3, #6
 8000da4:	e023      	b.n	8000dee <HAL_GPIO_Init+0x25a>
 8000da6:	2305      	movs	r3, #5
 8000da8:	e021      	b.n	8000dee <HAL_GPIO_Init+0x25a>
 8000daa:	2304      	movs	r3, #4
 8000dac:	e01f      	b.n	8000dee <HAL_GPIO_Init+0x25a>
 8000dae:	2303      	movs	r3, #3
 8000db0:	e01d      	b.n	8000dee <HAL_GPIO_Init+0x25a>
 8000db2:	2302      	movs	r3, #2
 8000db4:	e01b      	b.n	8000dee <HAL_GPIO_Init+0x25a>
 8000db6:	2301      	movs	r3, #1
 8000db8:	e019      	b.n	8000dee <HAL_GPIO_Init+0x25a>
 8000dba:	bf00      	nop
 8000dbc:	58000080 	.word	0x58000080
 8000dc0:	58024400 	.word	0x58024400
 8000dc4:	58000400 	.word	0x58000400
 8000dc8:	58020000 	.word	0x58020000
 8000dcc:	58020400 	.word	0x58020400
 8000dd0:	58020800 	.word	0x58020800
 8000dd4:	58020c00 	.word	0x58020c00
 8000dd8:	58021000 	.word	0x58021000
 8000ddc:	58021400 	.word	0x58021400
 8000de0:	58021800 	.word	0x58021800
 8000de4:	58021c00 	.word	0x58021c00
 8000de8:	58022400 	.word	0x58022400
 8000dec:	2300      	movs	r3, #0
 8000dee:	69fa      	ldr	r2, [r7, #28]
 8000df0:	f002 0203 	and.w	r2, r2, #3
 8000df4:	0092      	lsls	r2, r2, #2
 8000df6:	4093      	lsls	r3, r2
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dfe:	4938      	ldr	r1, [pc, #224]	; (8000ee0 <HAL_GPIO_Init+0x34c>)
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	3302      	adds	r3, #2
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f47f ae6b 	bne.w	8000ba8 <HAL_GPIO_Init+0x14>
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	3724      	adds	r7, #36	; 0x24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	58000400 	.word	0x58000400

08000ee4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	691a      	ldr	r2, [r3, #16]
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000efc:	2301      	movs	r3, #1
 8000efe:	73fb      	strb	r3, [r7, #15]
 8000f00:	e001      	b.n	8000f06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
 8000f20:	4613      	mov	r3, r2
 8000f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f24:	787b      	ldrb	r3, [r7, #1]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f2a:	887a      	ldrh	r2, [r7, #2]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000f30:	e003      	b.n	8000f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f32:	887b      	ldrh	r3, [r7, #2]
 8000f34:	041a      	lsls	r2, r3, #16
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	619a      	str	r2, [r3, #24]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f48:	b08f      	sub	sp, #60	; 0x3c
 8000f4a:	af0a      	add	r7, sp, #40	; 0x28
 8000f4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e116      	b.n	8001186 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d106      	bne.n	8000f78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff fbd8 	bl	8000728 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f003 feb7 	bl	8004d0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	687e      	ldr	r6, [r7, #4]
 8000fa4:	466d      	mov	r5, sp
 8000fa6:	f106 0410 	add.w	r4, r6, #16
 8000faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fba:	1d33      	adds	r3, r6, #4
 8000fbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fbe:	6838      	ldr	r0, [r7, #0]
 8000fc0:	f003 fd82 	bl	8004ac8 <USB_CoreInit>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d005      	beq.n	8000fd6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2202      	movs	r2, #2
 8000fce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e0d7      	b.n	8001186 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f003 fea5 	bl	8004d2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	e04a      	b.n	800107e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fe8:	7bfa      	ldrb	r2, [r7, #15]
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	4613      	mov	r3, r2
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	4413      	add	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	333d      	adds	r3, #61	; 0x3d
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ffc:	7bfa      	ldrb	r2, [r7, #15]
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	4613      	mov	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	4413      	add	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	440b      	add	r3, r1
 800100a:	333c      	adds	r3, #60	; 0x3c
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001010:	7bfa      	ldrb	r2, [r7, #15]
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	b298      	uxth	r0, r3
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	3356      	adds	r3, #86	; 0x56
 8001024:	4602      	mov	r2, r0
 8001026:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001028:	7bfa      	ldrb	r2, [r7, #15]
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	4613      	mov	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	4413      	add	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	3340      	adds	r3, #64	; 0x40
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800103c:	7bfa      	ldrb	r2, [r7, #15]
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	3344      	adds	r3, #68	; 0x44
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	4413      	add	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	440b      	add	r3, r1
 800105e:	3348      	adds	r3, #72	; 0x48
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	4413      	add	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	440b      	add	r3, r1
 8001072:	334c      	adds	r3, #76	; 0x4c
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	3301      	adds	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	d3af      	bcc.n	8000fe8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001088:	2300      	movs	r3, #0
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	e044      	b.n	8001118 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010a4:	7bfa      	ldrb	r2, [r7, #15]
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	4413      	add	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	440b      	add	r3, r1
 80010de:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010e6:	7bfa      	ldrb	r2, [r7, #15]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4413      	add	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	3301      	adds	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	429a      	cmp	r2, r3
 8001120:	d3b5      	bcc.n	800108e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	687e      	ldr	r6, [r7, #4]
 800112a:	466d      	mov	r5, sp
 800112c:	f106 0410 	add.w	r4, r6, #16
 8001130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001138:	e894 0003 	ldmia.w	r4, {r0, r1}
 800113c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001140:	1d33      	adds	r3, r6, #4
 8001142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001144:	6838      	ldr	r0, [r7, #0]
 8001146:	f003 fe3d 	bl	8004dc4 <USB_DevInit>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2202      	movs	r2, #2
 8001154:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e014      	b.n	8001186 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	2b01      	cmp	r3, #1
 8001172:	d102      	bne.n	800117a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f001 f9ef 	bl	8002558 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f004 fe7f 	bl	8005e82 <USB_DevDisconnect>

  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800118e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d101      	bne.n	80011aa <HAL_PCD_Start+0x1c>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e022      	b.n	80011f0 <HAL_PCD_Start+0x62>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d109      	bne.n	80011d2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d105      	bne.n	80011d2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f003 fd86 	bl	8004ce8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f004 fe2d 	bl	8005e40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <HAL_PCD_Stop+0x1c>
 8001210:	2302      	movs	r3, #2
 8001212:	e028      	b.n	8001266 <HAL_PCD_Stop+0x6e>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f003 fd72 	bl	8004d0a <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f004 fe29 	bl	8005e82 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2110      	movs	r1, #16
 8001236:	4618      	mov	r0, r3
 8001238:	f003 ff22 	bl	8005080 <USB_FlushTxFifo>

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001244:	2b00      	cmp	r3, #0
 8001246:	d109      	bne.n	800125c <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800124c:	2b01      	cmp	r3, #1
 800124e:	d105      	bne.n	800125c <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001254:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800126e:	b590      	push	{r4, r7, lr}
 8001270:	b08d      	sub	sp, #52	; 0x34
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f004 feb0 	bl	8005fea <USB_GetMode>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	f040 84b7 	bne.w	8001c00 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f004 fe14 	bl	8005ec4 <USB_ReadInterrupts>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 84ad 	beq.w	8001bfe <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f004 fe01 	bl	8005ec4 <USB_ReadInterrupts>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d107      	bne.n	80012dc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	695a      	ldr	r2, [r3, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f002 0202 	and.w	r2, r2, #2
 80012da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f004 fdef 	bl	8005ec4 <USB_ReadInterrupts>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	2b10      	cmp	r3, #16
 80012ee:	d161      	bne.n	80013b4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	699a      	ldr	r2, [r3, #24]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0210 	bic.w	r2, r2, #16
 80012fe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	f003 020f 	and.w	r2, r3, #15
 800130c:	4613      	mov	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	4413      	add	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	4413      	add	r3, r2
 800131c:	3304      	adds	r3, #4
 800131e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	0c5b      	lsrs	r3, r3, #17
 8001324:	f003 030f 	and.w	r3, r3, #15
 8001328:	2b02      	cmp	r3, #2
 800132a:	d124      	bne.n	8001376 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001332:	4013      	ands	r3, r2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d035      	beq.n	80013a4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	091b      	lsrs	r3, r3, #4
 8001340:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001342:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001346:	b29b      	uxth	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	6a38      	ldr	r0, [r7, #32]
 800134c:	f004 fc26 	bl	8005b9c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	091b      	lsrs	r3, r3, #4
 8001358:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800135c:	441a      	add	r2, r3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	695a      	ldr	r2, [r3, #20]
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800136e:	441a      	add	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	615a      	str	r2, [r3, #20]
 8001374:	e016      	b.n	80013a4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	0c5b      	lsrs	r3, r3, #17
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	2b06      	cmp	r3, #6
 8001380:	d110      	bne.n	80013a4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001388:	2208      	movs	r2, #8
 800138a:	4619      	mov	r1, r3
 800138c:	6a38      	ldr	r0, [r7, #32]
 800138e:	f004 fc05 	bl	8005b9c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	695a      	ldr	r2, [r3, #20]
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	091b      	lsrs	r3, r3, #4
 800139a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800139e:	441a      	add	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	699a      	ldr	r2, [r3, #24]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0210 	orr.w	r2, r2, #16
 80013b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f004 fd83 	bl	8005ec4 <USB_ReadInterrupts>
 80013be:	4603      	mov	r3, r0
 80013c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013c8:	f040 80a7 	bne.w	800151a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f004 fd88 	bl	8005eea <USB_ReadDevAllOutEpInterrupt>
 80013da:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013dc:	e099      	b.n	8001512 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 808e 	beq.w	8001506 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f004 fdac 	bl	8005f52 <USB_ReadDevOutEPInterrupt>
 80013fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00c      	beq.n	8001420 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	015a      	lsls	r2, r3, #5
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	4413      	add	r3, r2
 800140e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001412:	461a      	mov	r2, r3
 8001414:	2301      	movs	r3, #1
 8001416:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 ff16 	bl	800224c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00c      	beq.n	8001444 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	015a      	lsls	r2, r3, #5
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	4413      	add	r3, r2
 8001432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001436:	461a      	mov	r2, r3
 8001438:	2308      	movs	r3, #8
 800143a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800143c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 ffec 	bl	800241c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	2b00      	cmp	r3, #0
 800144c:	d008      	beq.n	8001460 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	015a      	lsls	r2, r3, #5
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	4413      	add	r3, r2
 8001456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800145a:	461a      	mov	r2, r3
 800145c:	2310      	movs	r3, #16
 800145e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d030      	beq.n	80014cc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001472:	2b80      	cmp	r3, #128	; 0x80
 8001474:	d109      	bne.n	800148a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001484:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001488:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800148a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4413      	add	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	3304      	adds	r3, #4
 800149e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	78db      	ldrb	r3, [r3, #3]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d108      	bne.n	80014ba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	2200      	movs	r2, #0
 80014ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	4619      	mov	r1, r3
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 fba6 	bl	8001c06 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	015a      	lsls	r2, r3, #5
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	4413      	add	r3, r2
 80014c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014c6:	461a      	mov	r2, r3
 80014c8:	2302      	movs	r3, #2
 80014ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	f003 0320 	and.w	r3, r3, #32
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d008      	beq.n	80014e8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	015a      	lsls	r2, r3, #5
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	4413      	add	r3, r2
 80014de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014e2:	461a      	mov	r2, r3
 80014e4:	2320      	movs	r3, #32
 80014e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d009      	beq.n	8001506 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	015a      	lsls	r2, r3, #5
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014fe:	461a      	mov	r2, r3
 8001500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001504:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	3301      	adds	r3, #1
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800150c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150e:	085b      	lsrs	r3, r3, #1
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001514:	2b00      	cmp	r3, #0
 8001516:	f47f af62 	bne.w	80013de <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f004 fcd0 	bl	8005ec4 <USB_ReadInterrupts>
 8001524:	4603      	mov	r3, r0
 8001526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800152a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800152e:	f040 80db 	bne.w	80016e8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f004 fcf1 	bl	8005f1e <USB_ReadDevAllInEpInterrupt>
 800153c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001542:	e0cd      	b.n	80016e0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 80c2 	beq.w	80016d4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f004 fd17 	bl	8005f8e <USB_ReadDevInEPInterrupt>
 8001560:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d057      	beq.n	800161c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	2201      	movs	r2, #1
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	43db      	mvns	r3, r3
 8001586:	69f9      	ldr	r1, [r7, #28]
 8001588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800158c:	4013      	ands	r3, r2
 800158e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	015a      	lsls	r2, r3, #5
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	4413      	add	r3, r2
 8001598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800159c:	461a      	mov	r2, r3
 800159e:	2301      	movs	r3, #1
 80015a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d132      	bne.n	8001610 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ae:	4613      	mov	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	4413      	add	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	3348      	adds	r3, #72	; 0x48
 80015ba:	6819      	ldr	r1, [r3, #0]
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c0:	4613      	mov	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4403      	add	r3, r0
 80015ca:	3344      	adds	r3, #68	; 0x44
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4419      	add	r1, r3
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4403      	add	r3, r0
 80015de:	3348      	adds	r3, #72	; 0x48
 80015e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d113      	bne.n	8001610 <HAL_PCD_IRQHandler+0x3a2>
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	334c      	adds	r3, #76	; 0x4c
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d108      	bne.n	8001610 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001608:	461a      	mov	r2, r3
 800160a:	2101      	movs	r1, #1
 800160c:	f004 fd20 	bl	8006050 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	b2db      	uxtb	r3, r3
 8001614:	4619      	mov	r1, r3
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f005 ff3e 	bl	8007498 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d008      	beq.n	8001638 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	015a      	lsls	r2, r3, #5
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	4413      	add	r3, r2
 800162e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001632:	461a      	mov	r2, r3
 8001634:	2308      	movs	r3, #8
 8001636:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b00      	cmp	r3, #0
 8001640:	d008      	beq.n	8001654 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	015a      	lsls	r2, r3, #5
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	4413      	add	r3, r2
 800164a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800164e:	461a      	mov	r2, r3
 8001650:	2310      	movs	r3, #16
 8001652:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165a:	2b00      	cmp	r3, #0
 800165c:	d008      	beq.n	8001670 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	015a      	lsls	r2, r3, #5
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	4413      	add	r3, r2
 8001666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800166a:	461a      	mov	r2, r3
 800166c:	2340      	movs	r3, #64	; 0x40
 800166e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d023      	beq.n	80016c2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800167a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800167c:	6a38      	ldr	r0, [r7, #32]
 800167e:	f003 fcff 	bl	8005080 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001684:	4613      	mov	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	4413      	add	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	3338      	adds	r3, #56	; 0x38
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	3304      	adds	r3, #4
 8001694:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	78db      	ldrb	r3, [r3, #3]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d108      	bne.n	80016b0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	2200      	movs	r2, #0
 80016a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	4619      	mov	r1, r3
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 fab7 	bl	8001c1e <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	015a      	lsls	r2, r3, #5
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	4413      	add	r3, r2
 80016b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016bc:	461a      	mov	r2, r3
 80016be:	2302      	movs	r3, #2
 80016c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 fd2f 	bl	8002132 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	3301      	adds	r3, #1
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016dc:	085b      	lsrs	r3, r3, #1
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f47f af2e 	bne.w	8001544 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f004 fbe9 	bl	8005ec4 <USB_ReadInterrupts>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016fc:	d122      	bne.n	8001744 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001718:	2b01      	cmp	r3, #1
 800171a:	d108      	bne.n	800172e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001724:	2100      	movs	r1, #0
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 ff3a 	bl	80025a0 <HAL_PCDEx_LPM_Callback>
 800172c:	e002      	b.n	8001734 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f006 f874 	bl	800781c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	695a      	ldr	r2, [r3, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001742:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f004 fbbb 	bl	8005ec4 <USB_ReadInterrupts>
 800174e:	4603      	mov	r3, r0
 8001750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001758:	d112      	bne.n	8001780 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b01      	cmp	r3, #1
 8001768:	d102      	bne.n	8001770 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f006 f840 	bl	80077f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	695a      	ldr	r2, [r3, #20]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800177e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f004 fb9d 	bl	8005ec4 <USB_ReadInterrupts>
 800178a:	4603      	mov	r3, r0
 800178c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001790:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001794:	d121      	bne.n	80017da <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	695a      	ldr	r2, [r3, #20]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80017a4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d111      	bne.n	80017d4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	f003 020f 	and.w	r2, r3, #15
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80017ca:	2101      	movs	r1, #1
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 fee7 	bl	80025a0 <HAL_PCDEx_LPM_Callback>
 80017d2:	e002      	b.n	80017da <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f006 f80b 	bl	80077f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f004 fb70 	bl	8005ec4 <USB_ReadInterrupts>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017ee:	f040 80b7 	bne.w	8001960 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2110      	movs	r1, #16
 800180c:	4618      	mov	r0, r3
 800180e:	f003 fc37 	bl	8005080 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001812:	2300      	movs	r3, #0
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001816:	e046      	b.n	80018a6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181a:	015a      	lsls	r2, r3, #5
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	4413      	add	r3, r2
 8001820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001824:	461a      	mov	r2, r3
 8001826:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800182a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800182c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182e:	015a      	lsls	r2, r3, #5
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	4413      	add	r3, r2
 8001834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800183c:	0151      	lsls	r1, r2, #5
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	440a      	add	r2, r1
 8001842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001846:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800184a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184e:	015a      	lsls	r2, r3, #5
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	4413      	add	r3, r2
 8001854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001858:	461a      	mov	r2, r3
 800185a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800185e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001862:	015a      	lsls	r2, r3, #5
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	4413      	add	r3, r2
 8001868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001870:	0151      	lsls	r1, r2, #5
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	440a      	add	r2, r1
 8001876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800187a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800187e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001882:	015a      	lsls	r2, r3, #5
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	4413      	add	r3, r2
 8001888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001890:	0151      	lsls	r1, r2, #5
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	440a      	add	r2, r1
 8001896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800189a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800189e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a2:	3301      	adds	r3, #1
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d3b3      	bcc.n	8001818 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018be:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80018c2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d016      	beq.n	80018fa <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018dc:	f043 030b 	orr.w	r3, r3, #11
 80018e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018f2:	f043 030b 	orr.w	r3, r3, #11
 80018f6:	6453      	str	r3, [r2, #68]	; 0x44
 80018f8:	e015      	b.n	8001926 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001900:	695a      	ldr	r2, [r3, #20]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001908:	4619      	mov	r1, r3
 800190a:	f242 032b 	movw	r3, #8235	; 0x202b
 800190e:	4313      	orrs	r3, r2
 8001910:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001920:	f043 030b 	orr.w	r3, r3, #11
 8001924:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001934:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001938:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800194a:	461a      	mov	r2, r3
 800194c:	f004 fb80 	bl	8006050 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800195e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f004 faad 	bl	8005ec4 <USB_ReadInterrupts>
 800196a:	4603      	mov	r3, r0
 800196c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001974:	d124      	bne.n	80019c0 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f004 fb44 	bl	8006008 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f003 fbf8 	bl	800517a <USB_GetDevSpeed>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681c      	ldr	r4, [r3, #0]
 8001996:	f001 fd63 	bl	8003460 <HAL_RCC_GetHCLKFreq>
 800199a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	461a      	mov	r2, r3
 80019a4:	4620      	mov	r0, r4
 80019a6:	f003 f8fd 	bl	8004ba4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f005 febc 	bl	8007728 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80019be:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f004 fa7d 	bl	8005ec4 <USB_ReadInterrupts>
 80019ca:	4603      	mov	r3, r0
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d10a      	bne.n	80019ea <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f005 ff37 	bl	8007848 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	695a      	ldr	r2, [r3, #20]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f002 0208 	and.w	r2, r2, #8
 80019e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f004 fa68 	bl	8005ec4 <USB_ReadInterrupts>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fa:	2b80      	cmp	r3, #128	; 0x80
 80019fc:	d122      	bne.n	8001a44 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0e:	e014      	b.n	8001a3a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a14:	4613      	mov	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4413      	add	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d105      	bne.n	8001a34 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 fb21 	bl	8002076 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	3301      	adds	r3, #1
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d3e5      	bcc.n	8001a10 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f004 fa3b 	bl	8005ec4 <USB_ReadInterrupts>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a58:	d13b      	bne.n	8001ad2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5e:	e02b      	b.n	8001ab8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	015a      	lsls	r2, r3, #5
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a74:	4613      	mov	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	4413      	add	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	3340      	adds	r3, #64	; 0x40
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d115      	bne.n	8001ab2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a86:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	da12      	bge.n	8001ab2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a90:	4613      	mov	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	333f      	adds	r3, #63	; 0x3f
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	4619      	mov	r1, r3
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 fae2 	bl	8002076 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d3ce      	bcc.n	8001a60 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695a      	ldr	r2, [r3, #20]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001ad0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f004 f9f4 	bl	8005ec4 <USB_ReadInterrupts>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ae6:	d155      	bne.n	8001b94 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ae8:	2301      	movs	r3, #1
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
 8001aec:	e045      	b.n	8001b7a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	015a      	lsls	r2, r3, #5
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	4413      	add	r3, r2
 8001af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b02:	4613      	mov	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4413      	add	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d12e      	bne.n	8001b74 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b16:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	da2b      	bge.n	8001b74 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001b28:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d121      	bne.n	8001b74 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b34:	4613      	mov	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4413      	add	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b42:	2201      	movs	r2, #1
 8001b44:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10a      	bne.n	8001b74 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b70:	6053      	str	r3, [r2, #4]
            break;
 8001b72:	e007      	b.n	8001b84 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	3301      	adds	r3, #1
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d3b4      	bcc.n	8001aee <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f004 f993 	bl	8005ec4 <USB_ReadInterrupts>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba8:	d10a      	bne.n	8001bc0 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f005 fdec 	bl	8007788 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f004 f97d 	bl	8005ec4 <USB_ReadInterrupts>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d115      	bne.n	8001c00 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f005 fde4 	bl	80077b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6859      	ldr	r1, [r3, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	e000      	b.n	8001c00 <HAL_PCD_IRQHandler+0x992>
      return;
 8001bfe:	bf00      	nop
    }
  }
}
 8001c00:	3734      	adds	r7, #52	; 0x34
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd90      	pop	{r4, r7, pc}

08001c06 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	460b      	mov	r3, r1
 8001c28:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_PCD_SetAddress+0x1a>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e013      	b.n	8001c78 <HAL_PCD_SetAddress+0x42>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	78fa      	ldrb	r2, [r7, #3]
 8001c5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	78fa      	ldrb	r2, [r7, #3]
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f004 f8c3 	bl	8005df4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	4608      	mov	r0, r1
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4603      	mov	r3, r0
 8001c90:	70fb      	strb	r3, [r7, #3]
 8001c92:	460b      	mov	r3, r1
 8001c94:	803b      	strh	r3, [r7, #0]
 8001c96:	4613      	mov	r3, r2
 8001c98:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	da0f      	bge.n	8001cc6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ca6:	78fb      	ldrb	r3, [r7, #3]
 8001ca8:	f003 020f 	and.w	r2, r3, #15
 8001cac:	4613      	mov	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	3338      	adds	r3, #56	; 0x38
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	3304      	adds	r3, #4
 8001cbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	705a      	strb	r2, [r3, #1]
 8001cc4:	e00f      	b.n	8001ce6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	f003 020f 	and.w	r2, r3, #15
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	3304      	adds	r3, #4
 8001cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cf2:	883a      	ldrh	r2, [r7, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	78ba      	ldrb	r2, [r7, #2]
 8001cfc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	785b      	ldrb	r3, [r3, #1]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d004      	beq.n	8001d10 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d10:	78bb      	ldrb	r3, [r7, #2]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d102      	bne.n	8001d1c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_PCD_EP_Open+0xaa>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e00e      	b.n	8001d48 <HAL_PCD_EP_Open+0xc8>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68f9      	ldr	r1, [r7, #12]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f003 fa43 	bl	80051c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001d46:	7afb      	ldrb	r3, [r7, #11]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	da0f      	bge.n	8001d84 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	f003 020f 	and.w	r2, r3, #15
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	3338      	adds	r3, #56	; 0x38
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	3304      	adds	r3, #4
 8001d7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	705a      	strb	r2, [r3, #1]
 8001d82:	e00f      	b.n	8001da4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	f003 020f 	and.w	r2, r3, #15
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_PCD_EP_Close+0x6e>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e00e      	b.n	8001ddc <HAL_PCD_EP_Close+0x8c>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68f9      	ldr	r1, [r7, #12]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fa81 	bl	80052d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	460b      	mov	r3, r1
 8001df2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001df4:	7afb      	ldrb	r3, [r7, #11]
 8001df6:	f003 020f 	and.w	r2, r3, #15
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4413      	add	r3, r2
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2200      	movs	r2, #0
 8001e24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e26:	7afb      	ldrb	r3, [r7, #11]
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d102      	bne.n	8001e40 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	6979      	ldr	r1, [r7, #20]
 8001e4e:	f003 fb1d 	bl	800548c <USB_EPStartXfer>

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	f003 020f 	and.w	r2, r3, #15
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8001e7e:	681b      	ldr	r3, [r3, #0]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e9c:	7afb      	ldrb	r3, [r7, #11]
 8001e9e:	f003 020f 	and.w	r2, r3, #15
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	3338      	adds	r3, #56	; 0x38
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4413      	add	r3, r2
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ecc:	7afb      	ldrb	r3, [r7, #11]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d102      	bne.n	8001ee6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	6979      	ldr	r1, [r7, #20]
 8001ef4:	f003 faca 	bl	800548c <USB_EPStartXfer>

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	f003 020f 	and.w	r2, r3, #15
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d901      	bls.n	8001f20 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e050      	b.n	8001fc2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	da0f      	bge.n	8001f48 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	f003 020f 	and.w	r2, r3, #15
 8001f2e:	4613      	mov	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4413      	add	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	3338      	adds	r3, #56	; 0x38
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2201      	movs	r2, #1
 8001f44:	705a      	strb	r2, [r3, #1]
 8001f46:	e00d      	b.n	8001f64 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f48:	78fa      	ldrb	r2, [r7, #3]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2201      	movs	r2, #1
 8001f68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <HAL_PCD_EP_SetStall+0x82>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e01e      	b.n	8001fc2 <HAL_PCD_EP_SetStall+0xc0>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68f9      	ldr	r1, [r7, #12]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f003 fe5a 	bl	8005c4c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10a      	bne.n	8001fb8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	b2d9      	uxtb	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f004 f84c 	bl	8006050 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	f003 020f 	and.w	r2, r3, #15
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d901      	bls.n	8001fe8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e042      	b.n	800206e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	da0f      	bge.n	8002010 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	f003 020f 	and.w	r2, r3, #15
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	3338      	adds	r3, #56	; 0x38
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	3304      	adds	r3, #4
 8002006:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2201      	movs	r2, #1
 800200c:	705a      	strb	r2, [r3, #1]
 800200e:	e00f      	b.n	8002030 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	f003 020f 	and.w	r2, r3, #15
 8002016:	4613      	mov	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	3304      	adds	r3, #4
 8002028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002036:	78fb      	ldrb	r3, [r7, #3]
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	b2da      	uxtb	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002048:	2b01      	cmp	r3, #1
 800204a:	d101      	bne.n	8002050 <HAL_PCD_EP_ClrStall+0x86>
 800204c:	2302      	movs	r3, #2
 800204e:	e00e      	b.n	800206e <HAL_PCD_EP_ClrStall+0xa4>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68f9      	ldr	r1, [r7, #12]
 800205e:	4618      	mov	r0, r3
 8002060:	f003 fe62 	bl	8005d28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	460b      	mov	r3, r1
 8002080:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002082:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002086:	2b00      	cmp	r3, #0
 8002088:	da0c      	bge.n	80020a4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	f003 020f 	and.w	r2, r3, #15
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	3338      	adds	r3, #56	; 0x38
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	3304      	adds	r3, #4
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	e00c      	b.n	80020be <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	f003 020f 	and.w	r2, r3, #15
 80020aa:	4613      	mov	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	3304      	adds	r3, #4
 80020bc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68f9      	ldr	r1, [r7, #12]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f003 fc81 	bl	80059cc <USB_EPStopXfer>
 80020ca:	4603      	mov	r3, r0
 80020cc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80020ce:	7afb      	ldrb	r3, [r7, #11]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_PCD_EP_Flush+0x1a>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e01b      	b.n	800212a <HAL_PCD_EP_Flush+0x52>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 80020fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	da09      	bge.n	8002116 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	4619      	mov	r1, r3
 800210e:	4610      	mov	r0, r2
 8002110:	f002 ffb6 	bl	8005080 <USB_FlushTxFifo>
 8002114:	e004      	b.n	8002120 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f002 ffe4 	bl	80050e8 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b08a      	sub	sp, #40	; 0x28
 8002136:	af02      	add	r7, sp, #8
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	3338      	adds	r3, #56	; 0x38
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	3304      	adds	r3, #4
 8002158:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	429a      	cmp	r2, r3
 8002164:	d901      	bls.n	800216a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e06c      	b.n	8002244 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	429a      	cmp	r2, r3
 800217e:	d902      	bls.n	8002186 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3303      	adds	r3, #3
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800218e:	e02b      	b.n	80021e8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	69fa      	ldr	r2, [r7, #28]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d902      	bls.n	80021ac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	3303      	adds	r3, #3
 80021b0:	089b      	lsrs	r3, r3, #2
 80021b2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	68d9      	ldr	r1, [r3, #12]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	4603      	mov	r3, r0
 80021ca:	6978      	ldr	r0, [r7, #20]
 80021cc:	f003 fca8 	bl	8005b20 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	441a      	add	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	441a      	add	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d809      	bhi.n	8002212 <PCD_WriteEmptyTxFifo+0xe0>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002206:	429a      	cmp	r2, r3
 8002208:	d203      	bcs.n	8002212 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1be      	bne.n	8002190 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	429a      	cmp	r2, r3
 800221c:	d811      	bhi.n	8002242 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	2201      	movs	r2, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	43db      	mvns	r3, r3
 8002238:	6939      	ldr	r1, [r7, #16]
 800223a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800223e:	4013      	ands	r3, r2
 8002240:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3720      	adds	r7, #32
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	333c      	adds	r3, #60	; 0x3c
 8002264:	3304      	adds	r3, #4
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d17b      	bne.n	800237a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d015      	beq.n	80022b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	4a61      	ldr	r2, [pc, #388]	; (8002414 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	f240 80b9 	bls.w	8002408 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 80b3 	beq.w	8002408 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ae:	461a      	mov	r2, r3
 80022b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022b4:	6093      	str	r3, [r2, #8]
 80022b6:	e0a7      	b.n	8002408 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ce:	461a      	mov	r2, r3
 80022d0:	2320      	movs	r3, #32
 80022d2:	6093      	str	r3, [r2, #8]
 80022d4:	e098      	b.n	8002408 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f040 8093 	bne.w	8002408 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	4a4b      	ldr	r2, [pc, #300]	; (8002414 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d90f      	bls.n	800230a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002300:	461a      	mov	r2, r3
 8002302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002306:	6093      	str	r3, [r2, #8]
 8002308:	e07e      	b.n	8002408 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	4413      	add	r3, r2
 800231c:	3304      	adds	r3, #4
 800231e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a1a      	ldr	r2, [r3, #32]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	0159      	lsls	r1, r3, #5
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	440b      	add	r3, r1
 800232c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002336:	1ad2      	subs	r2, r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d114      	bne.n	800236c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002354:	461a      	mov	r2, r3
 8002356:	2101      	movs	r1, #1
 8002358:	f003 fe7a 	bl	8006050 <USB_EP0_OutStart>
 800235c:	e006      	b.n	800236c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	441a      	add	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	4619      	mov	r1, r3
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f005 f950 	bl	8007618 <HAL_PCD_DataOutStageCallback>
 8002378:	e046      	b.n	8002408 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	4a26      	ldr	r2, [pc, #152]	; (8002418 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d124      	bne.n	80023cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	4413      	add	r3, r2
 8002394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002398:	461a      	mov	r2, r3
 800239a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800239e:	6093      	str	r3, [r2, #8]
 80023a0:	e032      	b.n	8002408 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b8:	461a      	mov	r2, r3
 80023ba:	2320      	movs	r3, #32
 80023bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	4619      	mov	r1, r3
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f005 f927 	bl	8007618 <HAL_PCD_DataOutStageCallback>
 80023ca:	e01d      	b.n	8002408 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d114      	bne.n	80023fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d108      	bne.n	80023fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023f4:	461a      	mov	r2, r3
 80023f6:	2100      	movs	r1, #0
 80023f8:	f003 fe2a 	bl	8006050 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	4619      	mov	r1, r3
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f005 f908 	bl	8007618 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3720      	adds	r7, #32
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	4f54300a 	.word	0x4f54300a
 8002418:	4f54310a 	.word	0x4f54310a

0800241c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	333c      	adds	r3, #60	; 0x3c
 8002434:	3304      	adds	r3, #4
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4413      	add	r3, r2
 8002442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4a15      	ldr	r2, [pc, #84]	; (80024a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d90e      	bls.n	8002470 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002458:	2b00      	cmp	r3, #0
 800245a:	d009      	beq.n	8002470 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4413      	add	r3, r2
 8002464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002468:	461a      	mov	r2, r3
 800246a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800246e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f004 ff8d 	bl	8007390 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d90c      	bls.n	8002498 <PCD_EP_OutSetupPacket_int+0x7c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d108      	bne.n	8002498 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002490:	461a      	mov	r2, r3
 8002492:	2101      	movs	r1, #1
 8002494:	f003 fddc 	bl	8006050 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	4f54300a 	.word	0x4f54300a

080024a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	70fb      	strb	r3, [r7, #3]
 80024b4:	4613      	mov	r3, r2
 80024b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d107      	bne.n	80024d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024c6:	883b      	ldrh	r3, [r7, #0]
 80024c8:	0419      	lsls	r1, r3, #16
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28
 80024d4:	e028      	b.n	8002528 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	0c1b      	lsrs	r3, r3, #16
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	4413      	add	r3, r2
 80024e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024e4:	2300      	movs	r3, #0
 80024e6:	73fb      	strb	r3, [r7, #15]
 80024e8:	e00d      	b.n	8002506 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	3340      	adds	r3, #64	; 0x40
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	0c1b      	lsrs	r3, r3, #16
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	4413      	add	r3, r2
 80024fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	3301      	adds	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
 8002506:	7bfa      	ldrb	r2, [r7, #15]
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	3b01      	subs	r3, #1
 800250c:	429a      	cmp	r2, r3
 800250e:	d3ec      	bcc.n	80024ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002510:	883b      	ldrh	r3, [r7, #0]
 8002512:	0418      	lsls	r0, r3, #16
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6819      	ldr	r1, [r3, #0]
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	3b01      	subs	r3, #1
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	4302      	orrs	r2, r0
 8002520:	3340      	adds	r3, #64	; 0x40
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	460b      	mov	r3, r1
 8002540:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002586:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_PCDEx_ActivateLPM+0x44>)
 8002588:	4313      	orrs	r3, r2
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	10000003 	.word	0x10000003

080025a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_PWREx_ConfigSupply+0x70>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d00a      	beq.n	80025e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025cc:	4b16      	ldr	r3, [pc, #88]	; (8002628 <HAL_PWREx_ConfigSupply+0x70>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d001      	beq.n	80025de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e01f      	b.n	800261e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	e01d      	b.n	800261e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <HAL_PWREx_ConfigSupply+0x70>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f023 0207 	bic.w	r2, r3, #7
 80025ea:	490f      	ldr	r1, [pc, #60]	; (8002628 <HAL_PWREx_ConfigSupply+0x70>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025f2:	f7fe f98f 	bl	8000914 <HAL_GetTick>
 80025f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025f8:	e009      	b.n	800260e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025fa:	f7fe f98b 	bl	8000914 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002608:	d901      	bls.n	800260e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e007      	b.n	800261e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_PWREx_ConfigSupply+0x70>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261a:	d1ee      	bne.n	80025fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	58024800 	.word	0x58024800

0800262c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4a04      	ldr	r2, [pc, #16]	; (8002648 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800263a:	60d3      	str	r3, [r2, #12]
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	58024800 	.word	0x58024800

0800264c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08c      	sub	sp, #48	; 0x30
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e3c8      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8087 	beq.w	800277a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800266c:	4b88      	ldr	r3, [pc, #544]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002676:	4b86      	ldr	r3, [pc, #536]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 8002678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267e:	2b10      	cmp	r3, #16
 8002680:	d007      	beq.n	8002692 <HAL_RCC_OscConfig+0x46>
 8002682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002684:	2b18      	cmp	r3, #24
 8002686:	d110      	bne.n	80026aa <HAL_RCC_OscConfig+0x5e>
 8002688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d10b      	bne.n	80026aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002692:	4b7f      	ldr	r3, [pc, #508]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d06c      	beq.n	8002778 <HAL_RCC_OscConfig+0x12c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d168      	bne.n	8002778 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e3a2      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b2:	d106      	bne.n	80026c2 <HAL_RCC_OscConfig+0x76>
 80026b4:	4b76      	ldr	r3, [pc, #472]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a75      	ldr	r2, [pc, #468]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 80026ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	e02e      	b.n	8002720 <HAL_RCC_OscConfig+0xd4>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x98>
 80026ca:	4b71      	ldr	r3, [pc, #452]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a70      	ldr	r2, [pc, #448]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 80026d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b6e      	ldr	r3, [pc, #440]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a6d      	ldr	r2, [pc, #436]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 80026dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e01d      	b.n	8002720 <HAL_RCC_OscConfig+0xd4>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0xbc>
 80026ee:	4b68      	ldr	r3, [pc, #416]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a67      	ldr	r2, [pc, #412]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 80026f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b65      	ldr	r3, [pc, #404]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a64      	ldr	r2, [pc, #400]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 8002700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e00b      	b.n	8002720 <HAL_RCC_OscConfig+0xd4>
 8002708:	4b61      	ldr	r3, [pc, #388]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a60      	ldr	r2, [pc, #384]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 800270e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b5e      	ldr	r3, [pc, #376]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a5d      	ldr	r2, [pc, #372]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 800271a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d013      	beq.n	8002750 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fe f8f4 	bl	8000914 <HAL_GetTick>
 800272c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002730:	f7fe f8f0 	bl	8000914 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e356      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002742:	4b53      	ldr	r3, [pc, #332]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0xe4>
 800274e:	e014      	b.n	800277a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fe f8e0 	bl	8000914 <HAL_GetTick>
 8002754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002758:	f7fe f8dc 	bl	8000914 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	; 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e342      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800276a:	4b49      	ldr	r3, [pc, #292]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x10c>
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 808c 	beq.w	80028a0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002788:	4b41      	ldr	r3, [pc, #260]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002790:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002792:	4b3f      	ldr	r3, [pc, #252]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002796:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d007      	beq.n	80027ae <HAL_RCC_OscConfig+0x162>
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	2b18      	cmp	r3, #24
 80027a2:	d137      	bne.n	8002814 <HAL_RCC_OscConfig+0x1c8>
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d132      	bne.n	8002814 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ae:	4b38      	ldr	r3, [pc, #224]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <HAL_RCC_OscConfig+0x17a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e314      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027c6:	4b32      	ldr	r3, [pc, #200]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 0219 	bic.w	r2, r3, #25
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	492f      	ldr	r1, [pc, #188]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe f89c 	bl	8000914 <HAL_GetTick>
 80027dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e0:	f7fe f898 	bl	8000914 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e2fe      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027f2:	4b27      	ldr	r3, [pc, #156]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fe:	4b24      	ldr	r3, [pc, #144]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	061b      	lsls	r3, r3, #24
 800280c:	4920      	ldr	r1, [pc, #128]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002812:	e045      	b.n	80028a0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d026      	beq.n	800286a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800281c:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f023 0219 	bic.w	r2, r3, #25
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4919      	ldr	r1, [pc, #100]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7fe f871 	bl	8000914 <HAL_GetTick>
 8002832:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002836:	f7fe f86d 	bl	8000914 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e2d3      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002854:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	490b      	ldr	r1, [pc, #44]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
 8002868:	e01a      	b.n	80028a0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a08      	ldr	r2, [pc, #32]	; (8002890 <HAL_RCC_OscConfig+0x244>)
 8002870:	f023 0301 	bic.w	r3, r3, #1
 8002874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fe f84d 	bl	8000914 <HAL_GetTick>
 800287a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800287c:	e00a      	b.n	8002894 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287e:	f7fe f849 	bl	8000914 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d903      	bls.n	8002894 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e2af      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
 8002890:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002894:	4b96      	ldr	r3, [pc, #600]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1ee      	bne.n	800287e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d06a      	beq.n	8002982 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ac:	4b90      	ldr	r3, [pc, #576]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028b4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028b6:	4b8e      	ldr	r3, [pc, #568]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d007      	beq.n	80028d2 <HAL_RCC_OscConfig+0x286>
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	2b18      	cmp	r3, #24
 80028c6:	d11b      	bne.n	8002900 <HAL_RCC_OscConfig+0x2b4>
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d116      	bne.n	8002900 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028d2:	4b87      	ldr	r3, [pc, #540]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d005      	beq.n	80028ea <HAL_RCC_OscConfig+0x29e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	2b80      	cmp	r3, #128	; 0x80
 80028e4:	d001      	beq.n	80028ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e282      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028ea:	4b81      	ldr	r3, [pc, #516]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	061b      	lsls	r3, r3, #24
 80028f8:	497d      	ldr	r1, [pc, #500]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028fe:	e040      	b.n	8002982 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d023      	beq.n	8002950 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002908:	4b79      	ldr	r3, [pc, #484]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a78      	ldr	r2, [pc, #480]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 800290e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fd fffe 	bl	8000914 <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800291c:	f7fd fffa 	bl	8000914 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e260      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800292e:	4b70      	ldr	r3, [pc, #448]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800293a:	4b6d      	ldr	r3, [pc, #436]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	061b      	lsls	r3, r3, #24
 8002948:	4969      	ldr	r1, [pc, #420]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 800294a:	4313      	orrs	r3, r2
 800294c:	60cb      	str	r3, [r1, #12]
 800294e:	e018      	b.n	8002982 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002950:	4b67      	ldr	r3, [pc, #412]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a66      	ldr	r2, [pc, #408]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 8002956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800295a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7fd ffda 	bl	8000914 <HAL_GetTick>
 8002960:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002964:	f7fd ffd6 	bl	8000914 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e23c      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002976:	4b5e      	ldr	r3, [pc, #376]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d036      	beq.n	80029fc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d019      	beq.n	80029ca <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002996:	4b56      	ldr	r3, [pc, #344]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 8002998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800299a:	4a55      	ldr	r2, [pc, #340]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a2:	f7fd ffb7 	bl	8000914 <HAL_GetTick>
 80029a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029aa:	f7fd ffb3 	bl	8000914 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e219      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029bc:	4b4c      	ldr	r3, [pc, #304]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 80029be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x35e>
 80029c8:	e018      	b.n	80029fc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ca:	4b49      	ldr	r3, [pc, #292]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 80029cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ce:	4a48      	ldr	r2, [pc, #288]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d6:	f7fd ff9d 	bl	8000914 <HAL_GetTick>
 80029da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029de:	f7fd ff99 	bl	8000914 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e1ff      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029f0:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 80029f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f0      	bne.n	80029de <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d036      	beq.n	8002a76 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d019      	beq.n	8002a44 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a10:	4b37      	ldr	r3, [pc, #220]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a36      	ldr	r2, [pc, #216]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 8002a16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a1c:	f7fd ff7a 	bl	8000914 <HAL_GetTick>
 8002a20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a24:	f7fd ff76 	bl	8000914 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e1dc      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a36:	4b2e      	ldr	r3, [pc, #184]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x3d8>
 8002a42:	e018      	b.n	8002a76 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a44:	4b2a      	ldr	r3, [pc, #168]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a29      	ldr	r2, [pc, #164]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 8002a4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a50:	f7fd ff60 	bl	8000914 <HAL_GetTick>
 8002a54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a58:	f7fd ff5c 	bl	8000914 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e1c2      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a6a:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 8086 	beq.w	8002b90 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a84:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <HAL_RCC_OscConfig+0x4a8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a1a      	ldr	r2, [pc, #104]	; (8002af4 <HAL_RCC_OscConfig+0x4a8>)
 8002a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a90:	f7fd ff40 	bl	8000914 <HAL_GetTick>
 8002a94:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a98:	f7fd ff3c 	bl	8000914 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b64      	cmp	r3, #100	; 0x64
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e1a2      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aaa:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_RCC_OscConfig+0x4a8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d106      	bne.n	8002acc <HAL_RCC_OscConfig+0x480>
 8002abe:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	4a0b      	ldr	r2, [pc, #44]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aca:	e032      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e6>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d111      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4ac>
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad8:	4a05      	ldr	r2, [pc, #20]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 8002ada:	f023 0301 	bic.w	r3, r3, #1
 8002ade:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae0:	4b03      	ldr	r3, [pc, #12]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	4a02      	ldr	r2, [pc, #8]	; (8002af0 <HAL_RCC_OscConfig+0x4a4>)
 8002ae6:	f023 0304 	bic.w	r3, r3, #4
 8002aea:	6713      	str	r3, [r2, #112]	; 0x70
 8002aec:	e021      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e6>
 8002aee:	bf00      	nop
 8002af0:	58024400 	.word	0x58024400
 8002af4:	58024800 	.word	0x58024800
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b05      	cmp	r3, #5
 8002afe:	d10c      	bne.n	8002b1a <HAL_RCC_OscConfig+0x4ce>
 8002b00:	4b83      	ldr	r3, [pc, #524]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b04:	4a82      	ldr	r2, [pc, #520]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002b06:	f043 0304 	orr.w	r3, r3, #4
 8002b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0c:	4b80      	ldr	r3, [pc, #512]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	4a7f      	ldr	r2, [pc, #508]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	6713      	str	r3, [r2, #112]	; 0x70
 8002b18:	e00b      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e6>
 8002b1a:	4b7d      	ldr	r3, [pc, #500]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	4a7c      	ldr	r2, [pc, #496]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	6713      	str	r3, [r2, #112]	; 0x70
 8002b26:	4b7a      	ldr	r3, [pc, #488]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	4a79      	ldr	r2, [pc, #484]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002b2c:	f023 0304 	bic.w	r3, r3, #4
 8002b30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d015      	beq.n	8002b66 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3a:	f7fd feeb 	bl	8000914 <HAL_GetTick>
 8002b3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b42:	f7fd fee7 	bl	8000914 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e14b      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b58:	4b6d      	ldr	r3, [pc, #436]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0ee      	beq.n	8002b42 <HAL_RCC_OscConfig+0x4f6>
 8002b64:	e014      	b.n	8002b90 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7fd fed5 	bl	8000914 <HAL_GetTick>
 8002b6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6e:	f7fd fed1 	bl	8000914 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e135      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b84:	4b62      	ldr	r3, [pc, #392]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ee      	bne.n	8002b6e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 812a 	beq.w	8002dee <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b9a:	4b5d      	ldr	r3, [pc, #372]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ba2:	2b18      	cmp	r3, #24
 8002ba4:	f000 80ba 	beq.w	8002d1c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	f040 8095 	bne.w	8002cdc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb2:	4b57      	ldr	r3, [pc, #348]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a56      	ldr	r2, [pc, #344]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002bb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbe:	f7fd fea9 	bl	8000914 <HAL_GetTick>
 8002bc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc6:	f7fd fea5 	bl	8000914 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e10b      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bd8:	4b4d      	ldr	r3, [pc, #308]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1f0      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002be4:	4b4a      	ldr	r3, [pc, #296]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002be8:	4b4a      	ldr	r3, [pc, #296]	; (8002d14 <HAL_RCC_OscConfig+0x6c8>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002bf4:	0112      	lsls	r2, r2, #4
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	4945      	ldr	r1, [pc, #276]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	628b      	str	r3, [r1, #40]	; 0x28
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	3b01      	subs	r3, #1
 8002c04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	025b      	lsls	r3, r3, #9
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	041b      	lsls	r3, r3, #16
 8002c1c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c26:	3b01      	subs	r3, #1
 8002c28:	061b      	lsls	r3, r3, #24
 8002c2a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c2e:	4938      	ldr	r1, [pc, #224]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c34:	4b36      	ldr	r3, [pc, #216]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	4a35      	ldr	r2, [pc, #212]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002c3a:	f023 0301 	bic.w	r3, r3, #1
 8002c3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c40:	4b33      	ldr	r3, [pc, #204]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c44:	4b34      	ldr	r3, [pc, #208]	; (8002d18 <HAL_RCC_OscConfig+0x6cc>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c4c:	00d2      	lsls	r2, r2, #3
 8002c4e:	4930      	ldr	r1, [pc, #192]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c54:	4b2e      	ldr	r3, [pc, #184]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	f023 020c 	bic.w	r2, r3, #12
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	492b      	ldr	r1, [pc, #172]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c66:	4b2a      	ldr	r3, [pc, #168]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	f023 0202 	bic.w	r2, r3, #2
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	4927      	ldr	r1, [pc, #156]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c78:	4b25      	ldr	r3, [pc, #148]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	4a24      	ldr	r2, [pc, #144]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c84:	4b22      	ldr	r3, [pc, #136]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	4a21      	ldr	r2, [pc, #132]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c90:	4b1f      	ldr	r3, [pc, #124]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	4a1e      	ldr	r2, [pc, #120]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002c96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c9c:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	4a1b      	ldr	r2, [pc, #108]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca8:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a18      	ldr	r2, [pc, #96]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fd fe2e 	bl	8000914 <HAL_GetTick>
 8002cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fd fe2a 	bl	8000914 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e090      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x670>
 8002cda:	e088      	b.n	8002dee <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0b      	ldr	r2, [pc, #44]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002ce2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fd fe14 	bl	8000914 <HAL_GetTick>
 8002cec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf0:	f7fd fe10 	bl	8000914 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e076      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d02:	4b03      	ldr	r3, [pc, #12]	; (8002d10 <HAL_RCC_OscConfig+0x6c4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x6a4>
 8002d0e:	e06e      	b.n	8002dee <HAL_RCC_OscConfig+0x7a2>
 8002d10:	58024400 	.word	0x58024400
 8002d14:	fffffc0c 	.word	0xfffffc0c
 8002d18:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d1c:	4b36      	ldr	r3, [pc, #216]	; (8002df8 <HAL_RCC_OscConfig+0x7ac>)
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d22:	4b35      	ldr	r3, [pc, #212]	; (8002df8 <HAL_RCC_OscConfig+0x7ac>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d031      	beq.n	8002d94 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f003 0203 	and.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d12a      	bne.n	8002d94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d122      	bne.n	8002d94 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d11a      	bne.n	8002d94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	0a5b      	lsrs	r3, r3, #9
 8002d62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d111      	bne.n	8002d94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	0c1b      	lsrs	r3, r3, #16
 8002d74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d108      	bne.n	8002d94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	0e1b      	lsrs	r3, r3, #24
 8002d86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d001      	beq.n	8002d98 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e02b      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d98:	4b17      	ldr	r3, [pc, #92]	; (8002df8 <HAL_RCC_OscConfig+0x7ac>)
 8002d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9c:	08db      	lsrs	r3, r3, #3
 8002d9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002da2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d01f      	beq.n	8002dee <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002dae:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <HAL_RCC_OscConfig+0x7ac>)
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	4a11      	ldr	r2, [pc, #68]	; (8002df8 <HAL_RCC_OscConfig+0x7ac>)
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dba:	f7fd fdab 	bl	8000914 <HAL_GetTick>
 8002dbe:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002dc0:	bf00      	nop
 8002dc2:	f7fd fda7 	bl	8000914 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d0f9      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002dce:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_RCC_OscConfig+0x7ac>)
 8002dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <HAL_RCC_OscConfig+0x7b0>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002dda:	00d2      	lsls	r2, r2, #3
 8002ddc:	4906      	ldr	r1, [pc, #24]	; (8002df8 <HAL_RCC_OscConfig+0x7ac>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_RCC_OscConfig+0x7ac>)
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	4a04      	ldr	r2, [pc, #16]	; (8002df8 <HAL_RCC_OscConfig+0x7ac>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3730      	adds	r7, #48	; 0x30
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	58024400 	.word	0x58024400
 8002dfc:	ffff0007 	.word	0xffff0007

08002e00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e19c      	b.n	800314e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e14:	4b8a      	ldr	r3, [pc, #552]	; (8003040 <HAL_RCC_ClockConfig+0x240>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 030f 	and.w	r3, r3, #15
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d910      	bls.n	8002e44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b87      	ldr	r3, [pc, #540]	; (8003040 <HAL_RCC_ClockConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 020f 	bic.w	r2, r3, #15
 8002e2a:	4985      	ldr	r1, [pc, #532]	; (8003040 <HAL_RCC_ClockConfig+0x240>)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e32:	4b83      	ldr	r3, [pc, #524]	; (8003040 <HAL_RCC_ClockConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e184      	b.n	800314e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d010      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	4b7b      	ldr	r3, [pc, #492]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d908      	bls.n	8002e72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e60:	4b78      	ldr	r3, [pc, #480]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	4975      	ldr	r1, [pc, #468]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d010      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	695a      	ldr	r2, [r3, #20]
 8002e82:	4b70      	ldr	r3, [pc, #448]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d908      	bls.n	8002ea0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e8e:	4b6d      	ldr	r3, [pc, #436]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	496a      	ldr	r1, [pc, #424]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d010      	beq.n	8002ece <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699a      	ldr	r2, [r3, #24]
 8002eb0:	4b64      	ldr	r3, [pc, #400]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d908      	bls.n	8002ece <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ebc:	4b61      	ldr	r3, [pc, #388]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	495e      	ldr	r1, [pc, #376]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d010      	beq.n	8002efc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69da      	ldr	r2, [r3, #28]
 8002ede:	4b59      	ldr	r3, [pc, #356]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d908      	bls.n	8002efc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002eea:	4b56      	ldr	r3, [pc, #344]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	4953      	ldr	r1, [pc, #332]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d010      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	4b4d      	ldr	r3, [pc, #308]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d908      	bls.n	8002f2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f18:	4b4a      	ldr	r3, [pc, #296]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f023 020f 	bic.w	r2, r3, #15
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4947      	ldr	r1, [pc, #284]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d055      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f36:	4b43      	ldr	r3, [pc, #268]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	4940      	ldr	r1, [pc, #256]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d107      	bne.n	8002f60 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f50:	4b3c      	ldr	r3, [pc, #240]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d121      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0f6      	b.n	800314e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d107      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f68:	4b36      	ldr	r3, [pc, #216]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d115      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0ea      	b.n	800314e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f80:	4b30      	ldr	r3, [pc, #192]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0de      	b.n	800314e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f90:	4b2c      	ldr	r3, [pc, #176]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0d6      	b.n	800314e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fa0:	4b28      	ldr	r3, [pc, #160]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	f023 0207 	bic.w	r2, r3, #7
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4925      	ldr	r1, [pc, #148]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb2:	f7fd fcaf 	bl	8000914 <HAL_GetTick>
 8002fb6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb8:	e00a      	b.n	8002fd0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fba:	f7fd fcab 	bl	8000914 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e0be      	b.n	800314e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd0:	4b1c      	ldr	r3, [pc, #112]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d1eb      	bne.n	8002fba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d010      	beq.n	8003010 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	4b14      	ldr	r3, [pc, #80]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d208      	bcs.n	8003010 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ffe:	4b11      	ldr	r3, [pc, #68]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f023 020f 	bic.w	r2, r3, #15
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	490e      	ldr	r1, [pc, #56]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 800300c:	4313      	orrs	r3, r2
 800300e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <HAL_RCC_ClockConfig+0x240>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d214      	bcs.n	8003048 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301e:	4b08      	ldr	r3, [pc, #32]	; (8003040 <HAL_RCC_ClockConfig+0x240>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 020f 	bic.w	r2, r3, #15
 8003026:	4906      	ldr	r1, [pc, #24]	; (8003040 <HAL_RCC_ClockConfig+0x240>)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800302e:	4b04      	ldr	r3, [pc, #16]	; (8003040 <HAL_RCC_ClockConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d005      	beq.n	8003048 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e086      	b.n	800314e <HAL_RCC_ClockConfig+0x34e>
 8003040:	52002000 	.word	0x52002000
 8003044:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d010      	beq.n	8003076 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	4b3f      	ldr	r3, [pc, #252]	; (8003158 <HAL_RCC_ClockConfig+0x358>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003060:	429a      	cmp	r2, r3
 8003062:	d208      	bcs.n	8003076 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003064:	4b3c      	ldr	r3, [pc, #240]	; (8003158 <HAL_RCC_ClockConfig+0x358>)
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	4939      	ldr	r1, [pc, #228]	; (8003158 <HAL_RCC_ClockConfig+0x358>)
 8003072:	4313      	orrs	r3, r2
 8003074:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d010      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	4b34      	ldr	r3, [pc, #208]	; (8003158 <HAL_RCC_ClockConfig+0x358>)
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800308e:	429a      	cmp	r2, r3
 8003090:	d208      	bcs.n	80030a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003092:	4b31      	ldr	r3, [pc, #196]	; (8003158 <HAL_RCC_ClockConfig+0x358>)
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	492e      	ldr	r1, [pc, #184]	; (8003158 <HAL_RCC_ClockConfig+0x358>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d010      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699a      	ldr	r2, [r3, #24]
 80030b4:	4b28      	ldr	r3, [pc, #160]	; (8003158 <HAL_RCC_ClockConfig+0x358>)
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030bc:	429a      	cmp	r2, r3
 80030be:	d208      	bcs.n	80030d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030c0:	4b25      	ldr	r3, [pc, #148]	; (8003158 <HAL_RCC_ClockConfig+0x358>)
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	4922      	ldr	r1, [pc, #136]	; (8003158 <HAL_RCC_ClockConfig+0x358>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0320 	and.w	r3, r3, #32
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d010      	beq.n	8003100 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69da      	ldr	r2, [r3, #28]
 80030e2:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <HAL_RCC_ClockConfig+0x358>)
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d208      	bcs.n	8003100 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80030ee:	4b1a      	ldr	r3, [pc, #104]	; (8003158 <HAL_RCC_ClockConfig+0x358>)
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	4917      	ldr	r1, [pc, #92]	; (8003158 <HAL_RCC_ClockConfig+0x358>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003100:	f000 f834 	bl	800316c <HAL_RCC_GetSysClockFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b14      	ldr	r3, [pc, #80]	; (8003158 <HAL_RCC_ClockConfig+0x358>)
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	4912      	ldr	r1, [pc, #72]	; (800315c <HAL_RCC_ClockConfig+0x35c>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	fa22 f303 	lsr.w	r3, r2, r3
 800311c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800311e:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <HAL_RCC_ClockConfig+0x358>)
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	4a0d      	ldr	r2, [pc, #52]	; (800315c <HAL_RCC_ClockConfig+0x35c>)
 8003128:	5cd3      	ldrb	r3, [r2, r3]
 800312a:	f003 031f 	and.w	r3, r3, #31
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
 8003134:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <HAL_RCC_ClockConfig+0x360>)
 8003136:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003138:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <HAL_RCC_ClockConfig+0x364>)
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800313e:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <HAL_RCC_ClockConfig+0x368>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7fd fb9c 	bl	8000880 <HAL_InitTick>
 8003148:	4603      	mov	r3, r0
 800314a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800314c:	7bfb      	ldrb	r3, [r7, #15]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	58024400 	.word	0x58024400
 800315c:	0800aa74 	.word	0x0800aa74
 8003160:	24000004 	.word	0x24000004
 8003164:	24000000 	.word	0x24000000
 8003168:	24000008 	.word	0x24000008

0800316c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800316c:	b480      	push	{r7}
 800316e:	b089      	sub	sp, #36	; 0x24
 8003170:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003172:	4bb3      	ldr	r3, [pc, #716]	; (8003440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800317a:	2b18      	cmp	r3, #24
 800317c:	f200 8155 	bhi.w	800342a <HAL_RCC_GetSysClockFreq+0x2be>
 8003180:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003186:	bf00      	nop
 8003188:	080031ed 	.word	0x080031ed
 800318c:	0800342b 	.word	0x0800342b
 8003190:	0800342b 	.word	0x0800342b
 8003194:	0800342b 	.word	0x0800342b
 8003198:	0800342b 	.word	0x0800342b
 800319c:	0800342b 	.word	0x0800342b
 80031a0:	0800342b 	.word	0x0800342b
 80031a4:	0800342b 	.word	0x0800342b
 80031a8:	08003213 	.word	0x08003213
 80031ac:	0800342b 	.word	0x0800342b
 80031b0:	0800342b 	.word	0x0800342b
 80031b4:	0800342b 	.word	0x0800342b
 80031b8:	0800342b 	.word	0x0800342b
 80031bc:	0800342b 	.word	0x0800342b
 80031c0:	0800342b 	.word	0x0800342b
 80031c4:	0800342b 	.word	0x0800342b
 80031c8:	08003219 	.word	0x08003219
 80031cc:	0800342b 	.word	0x0800342b
 80031d0:	0800342b 	.word	0x0800342b
 80031d4:	0800342b 	.word	0x0800342b
 80031d8:	0800342b 	.word	0x0800342b
 80031dc:	0800342b 	.word	0x0800342b
 80031e0:	0800342b 	.word	0x0800342b
 80031e4:	0800342b 	.word	0x0800342b
 80031e8:	0800321f 	.word	0x0800321f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031ec:	4b94      	ldr	r3, [pc, #592]	; (8003440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0320 	and.w	r3, r3, #32
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d009      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031f8:	4b91      	ldr	r3, [pc, #580]	; (8003440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	08db      	lsrs	r3, r3, #3
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	4a90      	ldr	r2, [pc, #576]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
 8003208:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800320a:	e111      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800320c:	4b8d      	ldr	r3, [pc, #564]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800320e:	61bb      	str	r3, [r7, #24]
      break;
 8003210:	e10e      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003212:	4b8d      	ldr	r3, [pc, #564]	; (8003448 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003214:	61bb      	str	r3, [r7, #24]
      break;
 8003216:	e10b      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003218:	4b8c      	ldr	r3, [pc, #560]	; (800344c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800321a:	61bb      	str	r3, [r7, #24]
      break;
 800321c:	e108      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800321e:	4b88      	ldr	r3, [pc, #544]	; (8003440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003228:	4b85      	ldr	r3, [pc, #532]	; (8003440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	091b      	lsrs	r3, r3, #4
 800322e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003232:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003234:	4b82      	ldr	r3, [pc, #520]	; (8003440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800323e:	4b80      	ldr	r3, [pc, #512]	; (8003440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003242:	08db      	lsrs	r3, r3, #3
 8003244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	fb02 f303 	mul.w	r3, r2, r3
 800324e:	ee07 3a90 	vmov	s15, r3
 8003252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003256:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80e1 	beq.w	8003424 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2b02      	cmp	r3, #2
 8003266:	f000 8083 	beq.w	8003370 <HAL_RCC_GetSysClockFreq+0x204>
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2b02      	cmp	r3, #2
 800326e:	f200 80a1 	bhi.w	80033b4 <HAL_RCC_GetSysClockFreq+0x248>
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x114>
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d056      	beq.n	800332c <HAL_RCC_GetSysClockFreq+0x1c0>
 800327e:	e099      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003280:	4b6f      	ldr	r3, [pc, #444]	; (8003440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d02d      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800328c:	4b6c      	ldr	r3, [pc, #432]	; (8003440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	08db      	lsrs	r3, r3, #3
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	4a6b      	ldr	r2, [pc, #428]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
 800329c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	ee07 3a90 	vmov	s15, r3
 80032a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032b6:	4b62      	ldr	r3, [pc, #392]	; (8003440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032be:	ee07 3a90 	vmov	s15, r3
 80032c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003450 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80032e6:	e087      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	ee07 3a90 	vmov	s15, r3
 80032ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003454 <HAL_RCC_GetSysClockFreq+0x2e8>
 80032f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032fa:	4b51      	ldr	r3, [pc, #324]	; (8003440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800330a:	ed97 6a02 	vldr	s12, [r7, #8]
 800330e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003450 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800331a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800331e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003326:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800332a:	e065      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	ee07 3a90 	vmov	s15, r3
 8003332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003336:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003458 <HAL_RCC_GetSysClockFreq+0x2ec>
 800333a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800333e:	4b40      	ldr	r3, [pc, #256]	; (8003440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800334e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003352:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003450 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800335a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800335e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800336e:	e043      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800345c <HAL_RCC_GetSysClockFreq+0x2f0>
 800337e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003382:	4b2f      	ldr	r3, [pc, #188]	; (8003440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003392:	ed97 6a02 	vldr	s12, [r7, #8]
 8003396:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003450 <HAL_RCC_GetSysClockFreq+0x2e4>
 800339a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800339e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033b2:	e021      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003458 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033c6:	4b1e      	ldr	r3, [pc, #120]	; (8003440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003450 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80033f8:	4b11      	ldr	r3, [pc, #68]	; (8003440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	0a5b      	lsrs	r3, r3, #9
 80033fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003402:	3301      	adds	r3, #1
 8003404:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	ee07 3a90 	vmov	s15, r3
 800340c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003410:	edd7 6a07 	vldr	s13, [r7, #28]
 8003414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800341c:	ee17 3a90 	vmov	r3, s15
 8003420:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003422:	e005      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	61bb      	str	r3, [r7, #24]
      break;
 8003428:	e002      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800342a:	4b07      	ldr	r3, [pc, #28]	; (8003448 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800342c:	61bb      	str	r3, [r7, #24]
      break;
 800342e:	bf00      	nop
  }

  return sysclockfreq;
 8003430:	69bb      	ldr	r3, [r7, #24]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3724      	adds	r7, #36	; 0x24
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	58024400 	.word	0x58024400
 8003444:	03d09000 	.word	0x03d09000
 8003448:	003d0900 	.word	0x003d0900
 800344c:	007a1200 	.word	0x007a1200
 8003450:	46000000 	.word	0x46000000
 8003454:	4c742400 	.word	0x4c742400
 8003458:	4a742400 	.word	0x4a742400
 800345c:	4af42400 	.word	0x4af42400

08003460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003466:	f7ff fe81 	bl	800316c <HAL_RCC_GetSysClockFreq>
 800346a:	4602      	mov	r2, r0
 800346c:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	490f      	ldr	r1, [pc, #60]	; (80034b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003478:	5ccb      	ldrb	r3, [r1, r3]
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	fa22 f303 	lsr.w	r3, r2, r3
 8003482:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003484:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	4a09      	ldr	r2, [pc, #36]	; (80034b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800348e:	5cd3      	ldrb	r3, [r2, r3]
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	fa22 f303 	lsr.w	r3, r2, r3
 800349a:	4a07      	ldr	r2, [pc, #28]	; (80034b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800349c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800349e:	4a07      	ldr	r2, [pc, #28]	; (80034bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80034a6:	681b      	ldr	r3, [r3, #0]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	58024400 	.word	0x58024400
 80034b4:	0800aa74 	.word	0x0800aa74
 80034b8:	24000004 	.word	0x24000004
 80034bc:	24000000 	.word	0x24000000

080034c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c4:	b0c6      	sub	sp, #280	; 0x118
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034cc:	2300      	movs	r3, #0
 80034ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034d2:	2300      	movs	r3, #0
 80034d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80034e4:	2500      	movs	r5, #0
 80034e6:	ea54 0305 	orrs.w	r3, r4, r5
 80034ea:	d049      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80034ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034f6:	d02f      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80034f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034fc:	d828      	bhi.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003502:	d01a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003504:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003508:	d822      	bhi.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800350e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003512:	d007      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003514:	e01c      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003516:	4bab      	ldr	r3, [pc, #684]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	4aaa      	ldr	r2, [pc, #680]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800351c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003520:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003522:	e01a      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003528:	3308      	adds	r3, #8
 800352a:	2102      	movs	r1, #2
 800352c:	4618      	mov	r0, r3
 800352e:	f001 f967 	bl	8004800 <RCCEx_PLL2_Config>
 8003532:	4603      	mov	r3, r0
 8003534:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003538:	e00f      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800353a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800353e:	3328      	adds	r3, #40	; 0x28
 8003540:	2102      	movs	r1, #2
 8003542:	4618      	mov	r0, r3
 8003544:	f001 fa0e 	bl	8004964 <RCCEx_PLL3_Config>
 8003548:	4603      	mov	r3, r0
 800354a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800354e:	e004      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003556:	e000      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800355a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10a      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003562:	4b98      	ldr	r3, [pc, #608]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003566:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800356a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800356e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003570:	4a94      	ldr	r2, [pc, #592]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003572:	430b      	orrs	r3, r1
 8003574:	6513      	str	r3, [r2, #80]	; 0x50
 8003576:	e003      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003578:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800357c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800358c:	f04f 0900 	mov.w	r9, #0
 8003590:	ea58 0309 	orrs.w	r3, r8, r9
 8003594:	d047      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800359a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359c:	2b04      	cmp	r3, #4
 800359e:	d82a      	bhi.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80035a0:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80035a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a6:	bf00      	nop
 80035a8:	080035bd 	.word	0x080035bd
 80035ac:	080035cb 	.word	0x080035cb
 80035b0:	080035e1 	.word	0x080035e1
 80035b4:	080035ff 	.word	0x080035ff
 80035b8:	080035ff 	.word	0x080035ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035bc:	4b81      	ldr	r3, [pc, #516]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	4a80      	ldr	r2, [pc, #512]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035c8:	e01a      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035ce:	3308      	adds	r3, #8
 80035d0:	2100      	movs	r1, #0
 80035d2:	4618      	mov	r0, r3
 80035d4:	f001 f914 	bl	8004800 <RCCEx_PLL2_Config>
 80035d8:	4603      	mov	r3, r0
 80035da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035de:	e00f      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035e4:	3328      	adds	r3, #40	; 0x28
 80035e6:	2100      	movs	r1, #0
 80035e8:	4618      	mov	r0, r3
 80035ea:	f001 f9bb 	bl	8004964 <RCCEx_PLL3_Config>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035f4:	e004      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80035fc:	e000      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80035fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003600:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003608:	4b6e      	ldr	r3, [pc, #440]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800360a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360c:	f023 0107 	bic.w	r1, r3, #7
 8003610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003616:	4a6b      	ldr	r2, [pc, #428]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003618:	430b      	orrs	r3, r1
 800361a:	6513      	str	r3, [r2, #80]	; 0x50
 800361c:	e003      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800361e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003622:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8003632:	f04f 0b00 	mov.w	fp, #0
 8003636:	ea5a 030b 	orrs.w	r3, sl, fp
 800363a:	d05b      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800363c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003640:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003644:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003648:	d03b      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800364a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800364e:	d834      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003650:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003654:	d037      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003656:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800365a:	d82e      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800365c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003660:	d033      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003662:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003666:	d828      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003668:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800366c:	d01a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800366e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003672:	d822      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003678:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800367c:	d007      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800367e:	e01c      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003680:	4b50      	ldr	r3, [pc, #320]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	4a4f      	ldr	r2, [pc, #316]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800368a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800368c:	e01e      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800368e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003692:	3308      	adds	r3, #8
 8003694:	2100      	movs	r1, #0
 8003696:	4618      	mov	r0, r3
 8003698:	f001 f8b2 	bl	8004800 <RCCEx_PLL2_Config>
 800369c:	4603      	mov	r3, r0
 800369e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80036a2:	e013      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036a8:	3328      	adds	r3, #40	; 0x28
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 f959 	bl	8004964 <RCCEx_PLL3_Config>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036b8:	e008      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80036c0:	e004      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80036c2:	bf00      	nop
 80036c4:	e002      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80036c6:	bf00      	nop
 80036c8:	e000      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80036ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10b      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80036d4:	4b3b      	ldr	r3, [pc, #236]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80036dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036e4:	4a37      	ldr	r2, [pc, #220]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036e6:	430b      	orrs	r3, r1
 80036e8:	6593      	str	r3, [r2, #88]	; 0x58
 80036ea:	e003      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80036f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80036f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003700:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003704:	2300      	movs	r3, #0
 8003706:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800370a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800370e:	460b      	mov	r3, r1
 8003710:	4313      	orrs	r3, r2
 8003712:	d05d      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003718:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800371c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003720:	d03b      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003722:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003726:	d834      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003728:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800372c:	d037      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800372e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003732:	d82e      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003734:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003738:	d033      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800373a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800373e:	d828      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003740:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003744:	d01a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003746:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800374a:	d822      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003754:	d007      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003756:	e01c      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003758:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	4a19      	ldr	r2, [pc, #100]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800375e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003762:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003764:	e01e      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800376a:	3308      	adds	r3, #8
 800376c:	2100      	movs	r1, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f001 f846 	bl	8004800 <RCCEx_PLL2_Config>
 8003774:	4603      	mov	r3, r0
 8003776:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800377a:	e013      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800377c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003780:	3328      	adds	r3, #40	; 0x28
 8003782:	2100      	movs	r1, #0
 8003784:	4618      	mov	r0, r3
 8003786:	f001 f8ed 	bl	8004964 <RCCEx_PLL3_Config>
 800378a:	4603      	mov	r3, r0
 800378c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003790:	e008      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003798:	e004      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800379a:	bf00      	nop
 800379c:	e002      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800379e:	bf00      	nop
 80037a0:	e000      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80037a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10d      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80037b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037bc:	4a01      	ldr	r2, [pc, #4]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037be:	430b      	orrs	r3, r1
 80037c0:	6593      	str	r3, [r2, #88]	; 0x58
 80037c2:	e005      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80037c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80037cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80037d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80037dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80037e0:	2300      	movs	r3, #0
 80037e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80037e6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4313      	orrs	r3, r2
 80037ee:	d03a      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80037f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f6:	2b30      	cmp	r3, #48	; 0x30
 80037f8:	d01f      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80037fa:	2b30      	cmp	r3, #48	; 0x30
 80037fc:	d819      	bhi.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80037fe:	2b20      	cmp	r3, #32
 8003800:	d00c      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003802:	2b20      	cmp	r3, #32
 8003804:	d815      	bhi.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003806:	2b00      	cmp	r3, #0
 8003808:	d019      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800380a:	2b10      	cmp	r3, #16
 800380c:	d111      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800380e:	4baa      	ldr	r3, [pc, #680]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003812:	4aa9      	ldr	r2, [pc, #676]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003818:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800381a:	e011      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800381c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003820:	3308      	adds	r3, #8
 8003822:	2102      	movs	r1, #2
 8003824:	4618      	mov	r0, r3
 8003826:	f000 ffeb 	bl	8004800 <RCCEx_PLL2_Config>
 800382a:	4603      	mov	r3, r0
 800382c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003830:	e006      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003838:	e002      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800383a:	bf00      	nop
 800383c:	e000      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800383e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003840:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10a      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003848:	4b9b      	ldr	r3, [pc, #620]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800384a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003856:	4a98      	ldr	r2, [pc, #608]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003858:	430b      	orrs	r3, r1
 800385a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800385c:	e003      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800385e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003862:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800386a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003872:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003876:	2300      	movs	r3, #0
 8003878:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800387c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003880:	460b      	mov	r3, r1
 8003882:	4313      	orrs	r3, r2
 8003884:	d051      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800388a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003890:	d035      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003896:	d82e      	bhi.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003898:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800389c:	d031      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800389e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038a2:	d828      	bhi.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80038a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a8:	d01a      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80038aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ae:	d822      	bhi.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80038b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b8:	d007      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80038ba:	e01c      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038bc:	4b7e      	ldr	r3, [pc, #504]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	4a7d      	ldr	r2, [pc, #500]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038c8:	e01c      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ce:	3308      	adds	r3, #8
 80038d0:	2100      	movs	r1, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 ff94 	bl	8004800 <RCCEx_PLL2_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038de:	e011      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038e4:	3328      	adds	r3, #40	; 0x28
 80038e6:	2100      	movs	r1, #0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f001 f83b 	bl	8004964 <RCCEx_PLL3_Config>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038f4:	e006      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80038fc:	e002      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80038fe:	bf00      	nop
 8003900:	e000      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003902:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003904:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10a      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800390c:	4b6a      	ldr	r3, [pc, #424]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800390e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003910:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391a:	4a67      	ldr	r2, [pc, #412]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800391c:	430b      	orrs	r3, r1
 800391e:	6513      	str	r3, [r2, #80]	; 0x50
 8003920:	e003      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003922:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003926:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800392a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003932:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003936:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800393a:	2300      	movs	r3, #0
 800393c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003940:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003944:	460b      	mov	r3, r1
 8003946:	4313      	orrs	r3, r2
 8003948:	d053      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800394a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800394e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003954:	d033      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003956:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800395a:	d82c      	bhi.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800395c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003960:	d02f      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003962:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003966:	d826      	bhi.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003968:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800396c:	d02b      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800396e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003972:	d820      	bhi.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003974:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003978:	d012      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800397a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800397e:	d81a      	bhi.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003980:	2b00      	cmp	r3, #0
 8003982:	d022      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003988:	d115      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800398a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800398e:	3308      	adds	r3, #8
 8003990:	2101      	movs	r1, #1
 8003992:	4618      	mov	r0, r3
 8003994:	f000 ff34 	bl	8004800 <RCCEx_PLL2_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800399e:	e015      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039a4:	3328      	adds	r3, #40	; 0x28
 80039a6:	2101      	movs	r1, #1
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 ffdb 	bl	8004964 <RCCEx_PLL3_Config>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80039b4:	e00a      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80039bc:	e006      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80039be:	bf00      	nop
 80039c0:	e004      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80039c2:	bf00      	nop
 80039c4:	e002      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80039c6:	bf00      	nop
 80039c8:	e000      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80039ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10a      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80039d4:	4b38      	ldr	r3, [pc, #224]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80039dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e2:	4a35      	ldr	r2, [pc, #212]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6513      	str	r3, [r2, #80]	; 0x50
 80039e8:	e003      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80039f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80039fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a02:	2300      	movs	r3, #0
 8003a04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003a08:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	d058      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a1e:	d033      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a24:	d82c      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2a:	d02f      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a30:	d826      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003a32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a36:	d02b      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003a38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a3c:	d820      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003a3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a42:	d012      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a48:	d81a      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d022      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003a4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a52:	d115      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a58:	3308      	adds	r3, #8
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fecf 	bl	8004800 <RCCEx_PLL2_Config>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a68:	e015      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a6e:	3328      	adds	r3, #40	; 0x28
 8003a70:	2101      	movs	r1, #1
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 ff76 	bl	8004964 <RCCEx_PLL3_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003a86:	e006      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a88:	bf00      	nop
 8003a8a:	e004      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a8c:	bf00      	nop
 8003a8e:	e002      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a90:	bf00      	nop
 8003a92:	e000      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10e      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003aaa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003aae:	4a02      	ldr	r2, [pc, #8]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ab4:	e006      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003ab6:	bf00      	nop
 8003ab8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ac0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003acc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003ada:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	d037      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aee:	d00e      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003af4:	d816      	bhi.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d018      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003afa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003afe:	d111      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b00:	4bc4      	ldr	r3, [pc, #784]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	4ac3      	ldr	r2, [pc, #780]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b0c:	e00f      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b12:	3308      	adds	r3, #8
 8003b14:	2101      	movs	r1, #1
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fe72 	bl	8004800 <RCCEx_PLL2_Config>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b22:	e004      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003b2a:	e000      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b36:	4bb7      	ldr	r3, [pc, #732]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b44:	4ab3      	ldr	r2, [pc, #716]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b46:	430b      	orrs	r3, r1
 8003b48:	6513      	str	r3, [r2, #80]	; 0x50
 8003b4a:	e003      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003b60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b64:	2300      	movs	r3, #0
 8003b66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b6a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4313      	orrs	r3, r2
 8003b72:	d039      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d81c      	bhi.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003b7e:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003bc1 	.word	0x08003bc1
 8003b88:	08003b95 	.word	0x08003b95
 8003b8c:	08003ba3 	.word	0x08003ba3
 8003b90:	08003bc1 	.word	0x08003bc1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b94:	4b9f      	ldr	r3, [pc, #636]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	4a9e      	ldr	r2, [pc, #632]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ba0:	e00f      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ba6:	3308      	adds	r3, #8
 8003ba8:	2102      	movs	r1, #2
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fe28 	bl	8004800 <RCCEx_PLL2_Config>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003bb6:	e004      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10a      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003bca:	4b92      	ldr	r3, [pc, #584]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bce:	f023 0103 	bic.w	r1, r3, #3
 8003bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd8:	4a8e      	ldr	r2, [pc, #568]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bda:	430b      	orrs	r3, r1
 8003bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bde:	e003      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003be4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003bf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003bfe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f000 8099 	beq.w	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c0a:	4b83      	ldr	r3, [pc, #524]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a82      	ldr	r2, [pc, #520]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c16:	f7fc fe7d 	bl	8000914 <HAL_GetTick>
 8003c1a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c1e:	e00b      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c20:	f7fc fe78 	bl	8000914 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b64      	cmp	r3, #100	; 0x64
 8003c2e:	d903      	bls.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003c36:	e005      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c38:	4b77      	ldr	r3, [pc, #476]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0ed      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003c44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d173      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c4c:	4b71      	ldr	r3, [pc, #452]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c58:	4053      	eors	r3, r2
 8003c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d015      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c62:	4b6c      	ldr	r3, [pc, #432]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c6a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c6e:	4b69      	ldr	r3, [pc, #420]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	4a68      	ldr	r2, [pc, #416]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c78:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c7a:	4b66      	ldr	r3, [pc, #408]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	4a65      	ldr	r2, [pc, #404]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c84:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c86:	4a63      	ldr	r2, [pc, #396]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c8c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c9a:	d118      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9c:	f7fc fe3a 	bl	8000914 <HAL_GetTick>
 8003ca0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ca4:	e00d      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca6:	f7fc fe35 	bl	8000914 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003cb0:	1ad2      	subs	r2, r2, r3
 8003cb2:	f241 3388 	movw	r3, #5000	; 0x1388
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d903      	bls.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8003cc0:	e005      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cc2:	4b54      	ldr	r3, [pc, #336]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0eb      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003cce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d129      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ce6:	d10e      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003ce8:	4b4a      	ldr	r3, [pc, #296]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cf4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cf8:	091a      	lsrs	r2, r3, #4
 8003cfa:	4b48      	ldr	r3, [pc, #288]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	4a45      	ldr	r2, [pc, #276]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d00:	430b      	orrs	r3, r1
 8003d02:	6113      	str	r3, [r2, #16]
 8003d04:	e005      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003d06:	4b43      	ldr	r3, [pc, #268]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	4a42      	ldr	r2, [pc, #264]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d0c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d10:	6113      	str	r3, [r2, #16]
 8003d12:	4b40      	ldr	r3, [pc, #256]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d14:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d22:	4a3c      	ldr	r2, [pc, #240]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d24:	430b      	orrs	r3, r1
 8003d26:	6713      	str	r3, [r2, #112]	; 0x70
 8003d28:	e008      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d2e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8003d32:	e003      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d44:	f002 0301 	and.w	r3, r2, #1
 8003d48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d52:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003d56:	460b      	mov	r3, r1
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f000 808f 	beq.w	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d64:	2b28      	cmp	r3, #40	; 0x28
 8003d66:	d871      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003d68:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003e55 	.word	0x08003e55
 8003d74:	08003e4d 	.word	0x08003e4d
 8003d78:	08003e4d 	.word	0x08003e4d
 8003d7c:	08003e4d 	.word	0x08003e4d
 8003d80:	08003e4d 	.word	0x08003e4d
 8003d84:	08003e4d 	.word	0x08003e4d
 8003d88:	08003e4d 	.word	0x08003e4d
 8003d8c:	08003e4d 	.word	0x08003e4d
 8003d90:	08003e21 	.word	0x08003e21
 8003d94:	08003e4d 	.word	0x08003e4d
 8003d98:	08003e4d 	.word	0x08003e4d
 8003d9c:	08003e4d 	.word	0x08003e4d
 8003da0:	08003e4d 	.word	0x08003e4d
 8003da4:	08003e4d 	.word	0x08003e4d
 8003da8:	08003e4d 	.word	0x08003e4d
 8003dac:	08003e4d 	.word	0x08003e4d
 8003db0:	08003e37 	.word	0x08003e37
 8003db4:	08003e4d 	.word	0x08003e4d
 8003db8:	08003e4d 	.word	0x08003e4d
 8003dbc:	08003e4d 	.word	0x08003e4d
 8003dc0:	08003e4d 	.word	0x08003e4d
 8003dc4:	08003e4d 	.word	0x08003e4d
 8003dc8:	08003e4d 	.word	0x08003e4d
 8003dcc:	08003e4d 	.word	0x08003e4d
 8003dd0:	08003e55 	.word	0x08003e55
 8003dd4:	08003e4d 	.word	0x08003e4d
 8003dd8:	08003e4d 	.word	0x08003e4d
 8003ddc:	08003e4d 	.word	0x08003e4d
 8003de0:	08003e4d 	.word	0x08003e4d
 8003de4:	08003e4d 	.word	0x08003e4d
 8003de8:	08003e4d 	.word	0x08003e4d
 8003dec:	08003e4d 	.word	0x08003e4d
 8003df0:	08003e55 	.word	0x08003e55
 8003df4:	08003e4d 	.word	0x08003e4d
 8003df8:	08003e4d 	.word	0x08003e4d
 8003dfc:	08003e4d 	.word	0x08003e4d
 8003e00:	08003e4d 	.word	0x08003e4d
 8003e04:	08003e4d 	.word	0x08003e4d
 8003e08:	08003e4d 	.word	0x08003e4d
 8003e0c:	08003e4d 	.word	0x08003e4d
 8003e10:	08003e55 	.word	0x08003e55
 8003e14:	58024400 	.word	0x58024400
 8003e18:	58024800 	.word	0x58024800
 8003e1c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e24:	3308      	adds	r3, #8
 8003e26:	2101      	movs	r1, #1
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fce9 	bl	8004800 <RCCEx_PLL2_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e34:	e00f      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e3a:	3328      	adds	r3, #40	; 0x28
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fd90 	bl	8004964 <RCCEx_PLL3_Config>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e4a:	e004      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003e52:	e000      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10a      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e5e:	4bbf      	ldr	r3, [pc, #764]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e62:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e6c:	4abb      	ldr	r2, [pc, #748]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e6e:	430b      	orrs	r3, r1
 8003e70:	6553      	str	r3, [r2, #84]	; 0x54
 8003e72:	e003      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e84:	f002 0302 	and.w	r3, r2, #2
 8003e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e92:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	d041      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea2:	2b05      	cmp	r3, #5
 8003ea4:	d824      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003ea6:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eac:	08003ef9 	.word	0x08003ef9
 8003eb0:	08003ec5 	.word	0x08003ec5
 8003eb4:	08003edb 	.word	0x08003edb
 8003eb8:	08003ef9 	.word	0x08003ef9
 8003ebc:	08003ef9 	.word	0x08003ef9
 8003ec0:	08003ef9 	.word	0x08003ef9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ec8:	3308      	adds	r3, #8
 8003eca:	2101      	movs	r1, #1
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fc97 	bl	8004800 <RCCEx_PLL2_Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ed8:	e00f      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ede:	3328      	adds	r3, #40	; 0x28
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fd3e 	bl	8004964 <RCCEx_PLL3_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003eee:	e004      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003ef6:	e000      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003efa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f02:	4b96      	ldr	r3, [pc, #600]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f06:	f023 0107 	bic.w	r1, r3, #7
 8003f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f10:	4a92      	ldr	r2, [pc, #584]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f12:	430b      	orrs	r3, r1
 8003f14:	6553      	str	r3, [r2, #84]	; 0x54
 8003f16:	e003      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f28:	f002 0304 	and.w	r3, r2, #4
 8003f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f30:	2300      	movs	r3, #0
 8003f32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f36:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	d044      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f48:	2b05      	cmp	r3, #5
 8003f4a:	d825      	bhi.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003f4c:	a201      	add	r2, pc, #4	; (adr r2, 8003f54 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f52:	bf00      	nop
 8003f54:	08003fa1 	.word	0x08003fa1
 8003f58:	08003f6d 	.word	0x08003f6d
 8003f5c:	08003f83 	.word	0x08003f83
 8003f60:	08003fa1 	.word	0x08003fa1
 8003f64:	08003fa1 	.word	0x08003fa1
 8003f68:	08003fa1 	.word	0x08003fa1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f70:	3308      	adds	r3, #8
 8003f72:	2101      	movs	r1, #1
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fc43 	bl	8004800 <RCCEx_PLL2_Config>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f80:	e00f      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f86:	3328      	adds	r3, #40	; 0x28
 8003f88:	2101      	movs	r1, #1
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fcea 	bl	8004964 <RCCEx_PLL3_Config>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f96:	e004      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003f9e:	e000      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fa2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10b      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003faa:	4b6c      	ldr	r3, [pc, #432]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fae:	f023 0107 	bic.w	r1, r3, #7
 8003fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fba:	4a68      	ldr	r2, [pc, #416]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8003fc0:	e003      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fc6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd2:	f002 0320 	and.w	r3, r2, #32
 8003fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003fe0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	d055      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ff6:	d033      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ffc:	d82c      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004002:	d02f      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004008:	d826      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800400a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800400e:	d02b      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004010:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004014:	d820      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800401a:	d012      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800401c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004020:	d81a      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004022:	2b00      	cmp	r3, #0
 8004024:	d022      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004026:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800402a:	d115      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800402c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004030:	3308      	adds	r3, #8
 8004032:	2100      	movs	r1, #0
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fbe3 	bl	8004800 <RCCEx_PLL2_Config>
 800403a:	4603      	mov	r3, r0
 800403c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004040:	e015      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004046:	3328      	adds	r3, #40	; 0x28
 8004048:	2102      	movs	r1, #2
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fc8a 	bl	8004964 <RCCEx_PLL3_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004056:	e00a      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800405e:	e006      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004060:	bf00      	nop
 8004062:	e004      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004064:	bf00      	nop
 8004066:	e002      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004068:	bf00      	nop
 800406a:	e000      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800406c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800406e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10b      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004076:	4b39      	ldr	r3, [pc, #228]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800407e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004086:	4a35      	ldr	r2, [pc, #212]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004088:	430b      	orrs	r3, r1
 800408a:	6553      	str	r3, [r2, #84]	; 0x54
 800408c:	e003      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004092:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80040a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040a6:	2300      	movs	r3, #0
 80040a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040ac:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80040b0:	460b      	mov	r3, r1
 80040b2:	4313      	orrs	r3, r2
 80040b4:	d058      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80040b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040c2:	d033      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80040c4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040c8:	d82c      	bhi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80040ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ce:	d02f      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80040d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d4:	d826      	bhi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80040d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040da:	d02b      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80040dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040e0:	d820      	bhi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80040e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e6:	d012      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80040e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ec:	d81a      	bhi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d022      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80040f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f6:	d115      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040fc:	3308      	adds	r3, #8
 80040fe:	2100      	movs	r1, #0
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fb7d 	bl	8004800 <RCCEx_PLL2_Config>
 8004106:	4603      	mov	r3, r0
 8004108:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800410c:	e015      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800410e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004112:	3328      	adds	r3, #40	; 0x28
 8004114:	2102      	movs	r1, #2
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fc24 	bl	8004964 <RCCEx_PLL3_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004122:	e00a      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800412a:	e006      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800412c:	bf00      	nop
 800412e:	e004      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004130:	bf00      	nop
 8004132:	e002      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004134:	bf00      	nop
 8004136:	e000      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800413a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10e      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004142:	4b06      	ldr	r3, [pc, #24]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800414a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800414e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004152:	4a02      	ldr	r2, [pc, #8]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004154:	430b      	orrs	r3, r1
 8004156:	6593      	str	r3, [r2, #88]	; 0x58
 8004158:	e006      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800415a:	bf00      	nop
 800415c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004160:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004164:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004174:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004178:	2300      	movs	r3, #0
 800417a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800417e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004182:	460b      	mov	r3, r1
 8004184:	4313      	orrs	r3, r2
 8004186:	d055      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800418c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004190:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004194:	d033      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004196:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800419a:	d82c      	bhi.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800419c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a0:	d02f      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80041a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a6:	d826      	bhi.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80041a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80041ac:	d02b      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80041ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80041b2:	d820      	bhi.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80041b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041b8:	d012      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80041ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041be:	d81a      	bhi.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d022      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80041c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c8:	d115      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041ce:	3308      	adds	r3, #8
 80041d0:	2100      	movs	r1, #0
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fb14 	bl	8004800 <RCCEx_PLL2_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80041de:	e015      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041e4:	3328      	adds	r3, #40	; 0x28
 80041e6:	2102      	movs	r1, #2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 fbbb 	bl	8004964 <RCCEx_PLL3_Config>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80041f4:	e00a      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80041fc:	e006      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80041fe:	bf00      	nop
 8004200:	e004      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004202:	bf00      	nop
 8004204:	e002      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004206:	bf00      	nop
 8004208:	e000      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800420a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800420c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10b      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004214:	4ba0      	ldr	r3, [pc, #640]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004218:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800421c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004220:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004224:	4a9c      	ldr	r2, [pc, #624]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004226:	430b      	orrs	r3, r1
 8004228:	6593      	str	r3, [r2, #88]	; 0x58
 800422a:	e003      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004230:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	f002 0308 	and.w	r3, r2, #8
 8004240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004244:	2300      	movs	r3, #0
 8004246:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800424a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800424e:	460b      	mov	r3, r1
 8004250:	4313      	orrs	r3, r2
 8004252:	d01e      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800425c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004260:	d10c      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004266:	3328      	adds	r3, #40	; 0x28
 8004268:	2102      	movs	r1, #2
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fb7a 	bl	8004964 <RCCEx_PLL3_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800427c:	4b86      	ldr	r3, [pc, #536]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800427e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004280:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800428c:	4a82      	ldr	r2, [pc, #520]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800428e:	430b      	orrs	r3, r1
 8004290:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429a:	f002 0310 	and.w	r3, r2, #16
 800429e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042a2:	2300      	movs	r3, #0
 80042a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042a8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80042ac:	460b      	mov	r3, r1
 80042ae:	4313      	orrs	r3, r2
 80042b0:	d01e      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80042b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042be:	d10c      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042c4:	3328      	adds	r3, #40	; 0x28
 80042c6:	2102      	movs	r1, #2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fb4b 	bl	8004964 <RCCEx_PLL3_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042da:	4b6f      	ldr	r3, [pc, #444]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ea:	4a6b      	ldr	r2, [pc, #428]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042ec:	430b      	orrs	r3, r1
 80042ee:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80042fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80042fe:	2300      	movs	r3, #0
 8004300:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004302:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004306:	460b      	mov	r3, r1
 8004308:	4313      	orrs	r3, r2
 800430a:	d03e      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800430c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004310:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004314:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004318:	d022      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800431a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800431e:	d81b      	bhi.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004328:	d00b      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800432a:	e015      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800432c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004330:	3308      	adds	r3, #8
 8004332:	2100      	movs	r1, #0
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fa63 	bl	8004800 <RCCEx_PLL2_Config>
 800433a:	4603      	mov	r3, r0
 800433c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004340:	e00f      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004346:	3328      	adds	r3, #40	; 0x28
 8004348:	2102      	movs	r1, #2
 800434a:	4618      	mov	r0, r3
 800434c:	f000 fb0a 	bl	8004964 <RCCEx_PLL3_Config>
 8004350:	4603      	mov	r3, r0
 8004352:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004356:	e004      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800435e:	e000      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004360:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004362:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10b      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800436a:	4b4b      	ldr	r3, [pc, #300]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800436c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004376:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800437a:	4a47      	ldr	r2, [pc, #284]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800437c:	430b      	orrs	r3, r1
 800437e:	6593      	str	r3, [r2, #88]	; 0x58
 8004380:	e003      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004382:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004386:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800438a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004392:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004396:	673b      	str	r3, [r7, #112]	; 0x70
 8004398:	2300      	movs	r3, #0
 800439a:	677b      	str	r3, [r7, #116]	; 0x74
 800439c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80043a0:	460b      	mov	r3, r1
 80043a2:	4313      	orrs	r3, r2
 80043a4:	d03b      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80043a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043b2:	d01f      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80043b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043b8:	d818      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80043ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043be:	d003      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80043c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043c4:	d007      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80043c6:	e011      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043c8:	4b33      	ldr	r3, [pc, #204]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	4a32      	ldr	r2, [pc, #200]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80043d4:	e00f      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043da:	3328      	adds	r3, #40	; 0x28
 80043dc:	2101      	movs	r1, #1
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fac0 	bl	8004964 <RCCEx_PLL3_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80043ea:	e004      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80043f2:	e000      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80043f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10b      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043fe:	4b26      	ldr	r3, [pc, #152]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004402:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800440a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800440e:	4a22      	ldr	r2, [pc, #136]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004410:	430b      	orrs	r3, r1
 8004412:	6553      	str	r3, [r2, #84]	; 0x54
 8004414:	e003      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004416:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800441a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800441e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004426:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800442a:	66bb      	str	r3, [r7, #104]	; 0x68
 800442c:	2300      	movs	r3, #0
 800442e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004430:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004434:	460b      	mov	r3, r1
 8004436:	4313      	orrs	r3, r2
 8004438:	d034      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800443a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800443e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004448:	d007      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800444a:	e011      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800444c:	4b12      	ldr	r3, [pc, #72]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	4a11      	ldr	r2, [pc, #68]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004456:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004458:	e00e      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800445a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800445e:	3308      	adds	r3, #8
 8004460:	2102      	movs	r1, #2
 8004462:	4618      	mov	r0, r3
 8004464:	f000 f9cc 	bl	8004800 <RCCEx_PLL2_Config>
 8004468:	4603      	mov	r3, r0
 800446a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800446e:	e003      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004476:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004478:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10d      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004484:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800448c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448e:	4a02      	ldr	r2, [pc, #8]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004490:	430b      	orrs	r3, r1
 8004492:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004494:	e006      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004496:	bf00      	nop
 8004498:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80044a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ac:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80044b0:	663b      	str	r3, [r7, #96]	; 0x60
 80044b2:	2300      	movs	r3, #0
 80044b4:	667b      	str	r3, [r7, #100]	; 0x64
 80044b6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80044ba:	460b      	mov	r3, r1
 80044bc:	4313      	orrs	r3, r2
 80044be:	d00c      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044c4:	3328      	adds	r3, #40	; 0x28
 80044c6:	2102      	movs	r1, #2
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fa4b 	bl	8004964 <RCCEx_PLL3_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80044e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80044e8:	2300      	movs	r3, #0
 80044ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044ec:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80044f0:	460b      	mov	r3, r1
 80044f2:	4313      	orrs	r3, r2
 80044f4:	d036      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80044f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004500:	d018      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004506:	d811      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800450c:	d014      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800450e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004512:	d80b      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004514:	2b00      	cmp	r3, #0
 8004516:	d011      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800451c:	d106      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800451e:	4bb7      	ldr	r3, [pc, #732]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	4ab6      	ldr	r2, [pc, #728]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004528:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800452a:	e008      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004532:	e004      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004534:	bf00      	nop
 8004536:	e002      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004538:	bf00      	nop
 800453a:	e000      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800453c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800453e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10a      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004546:	4bad      	ldr	r3, [pc, #692]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800454e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004554:	4aa9      	ldr	r2, [pc, #676]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004556:	430b      	orrs	r3, r1
 8004558:	6553      	str	r3, [r2, #84]	; 0x54
 800455a:	e003      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004560:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004570:	653b      	str	r3, [r7, #80]	; 0x50
 8004572:	2300      	movs	r3, #0
 8004574:	657b      	str	r3, [r7, #84]	; 0x54
 8004576:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800457a:	460b      	mov	r3, r1
 800457c:	4313      	orrs	r3, r2
 800457e:	d009      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004580:	4b9e      	ldr	r3, [pc, #632]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004584:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800458c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458e:	4a9b      	ldr	r2, [pc, #620]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004590:	430b      	orrs	r3, r1
 8004592:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80045a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80045a2:	2300      	movs	r3, #0
 80045a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045a6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80045aa:	460b      	mov	r3, r1
 80045ac:	4313      	orrs	r3, r2
 80045ae:	d009      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045b0:	4b92      	ldr	r3, [pc, #584]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80045b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045be:	4a8f      	ldr	r2, [pc, #572]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045c0:	430b      	orrs	r3, r1
 80045c2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80045c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045cc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80045d0:	643b      	str	r3, [r7, #64]	; 0x40
 80045d2:	2300      	movs	r3, #0
 80045d4:	647b      	str	r3, [r7, #68]	; 0x44
 80045d6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80045da:	460b      	mov	r3, r1
 80045dc:	4313      	orrs	r3, r2
 80045de:	d00e      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045e0:	4b86      	ldr	r3, [pc, #536]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	4a85      	ldr	r2, [pc, #532]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045ea:	6113      	str	r3, [r2, #16]
 80045ec:	4b83      	ldr	r3, [pc, #524]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045ee:	6919      	ldr	r1, [r3, #16]
 80045f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045f8:	4a80      	ldr	r2, [pc, #512]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045fa:	430b      	orrs	r3, r1
 80045fc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004606:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800460a:	63bb      	str	r3, [r7, #56]	; 0x38
 800460c:	2300      	movs	r3, #0
 800460e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004610:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004614:	460b      	mov	r3, r1
 8004616:	4313      	orrs	r3, r2
 8004618:	d009      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800461a:	4b78      	ldr	r3, [pc, #480]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800461c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004628:	4a74      	ldr	r2, [pc, #464]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800462a:	430b      	orrs	r3, r1
 800462c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800462e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004636:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800463a:	633b      	str	r3, [r7, #48]	; 0x30
 800463c:	2300      	movs	r3, #0
 800463e:	637b      	str	r3, [r7, #52]	; 0x34
 8004640:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004644:	460b      	mov	r3, r1
 8004646:	4313      	orrs	r3, r2
 8004648:	d00a      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800464a:	4b6c      	ldr	r3, [pc, #432]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465a:	4a68      	ldr	r2, [pc, #416]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800465c:	430b      	orrs	r3, r1
 800465e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	2100      	movs	r1, #0
 800466a:	62b9      	str	r1, [r7, #40]	; 0x28
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004672:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004676:	460b      	mov	r3, r1
 8004678:	4313      	orrs	r3, r2
 800467a:	d011      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800467c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004680:	3308      	adds	r3, #8
 8004682:	2100      	movs	r1, #0
 8004684:	4618      	mov	r0, r3
 8004686:	f000 f8bb 	bl	8004800 <RCCEx_PLL2_Config>
 800468a:	4603      	mov	r3, r0
 800468c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004690:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004698:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800469c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80046a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a8:	2100      	movs	r1, #0
 80046aa:	6239      	str	r1, [r7, #32]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
 80046b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80046b6:	460b      	mov	r3, r1
 80046b8:	4313      	orrs	r3, r2
 80046ba:	d011      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046c0:	3308      	adds	r3, #8
 80046c2:	2101      	movs	r1, #1
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 f89b 	bl	8004800 <RCCEx_PLL2_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80046d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80046e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e8:	2100      	movs	r1, #0
 80046ea:	61b9      	str	r1, [r7, #24]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	61fb      	str	r3, [r7, #28]
 80046f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80046f6:	460b      	mov	r3, r1
 80046f8:	4313      	orrs	r3, r2
 80046fa:	d011      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004700:	3308      	adds	r3, #8
 8004702:	2102      	movs	r1, #2
 8004704:	4618      	mov	r0, r3
 8004706:	f000 f87b 	bl	8004800 <RCCEx_PLL2_Config>
 800470a:	4603      	mov	r3, r0
 800470c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004710:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004718:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800471c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	2100      	movs	r1, #0
 800472a:	6139      	str	r1, [r7, #16]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	617b      	str	r3, [r7, #20]
 8004732:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004736:	460b      	mov	r3, r1
 8004738:	4313      	orrs	r3, r2
 800473a:	d011      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800473c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004740:	3328      	adds	r3, #40	; 0x28
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f000 f90d 	bl	8004964 <RCCEx_PLL3_Config>
 800474a:	4603      	mov	r3, r0
 800474c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8004750:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004758:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800475c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004768:	2100      	movs	r1, #0
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	f003 0310 	and.w	r3, r3, #16
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004776:	460b      	mov	r3, r1
 8004778:	4313      	orrs	r3, r2
 800477a:	d011      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800477c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004780:	3328      	adds	r3, #40	; 0x28
 8004782:	2101      	movs	r1, #1
 8004784:	4618      	mov	r0, r3
 8004786:	f000 f8ed 	bl	8004964 <RCCEx_PLL3_Config>
 800478a:	4603      	mov	r3, r0
 800478c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004790:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004798:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800479c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80047a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a8:	2100      	movs	r1, #0
 80047aa:	6039      	str	r1, [r7, #0]
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	607b      	str	r3, [r7, #4]
 80047b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80047b6:	460b      	mov	r3, r1
 80047b8:	4313      	orrs	r3, r2
 80047ba:	d011      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047c0:	3328      	adds	r3, #40	; 0x28
 80047c2:	2102      	movs	r1, #2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 f8cd 	bl	8004964 <RCCEx_PLL3_Config>
 80047ca:	4603      	mov	r3, r0
 80047cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80047d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80047dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 80047e0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	e000      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80047f4:	46bd      	mov	sp, r7
 80047f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047fa:	bf00      	nop
 80047fc:	58024400 	.word	0x58024400

08004800 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800480e:	4b53      	ldr	r3, [pc, #332]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	2b03      	cmp	r3, #3
 8004818:	d101      	bne.n	800481e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e099      	b.n	8004952 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800481e:	4b4f      	ldr	r3, [pc, #316]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a4e      	ldr	r2, [pc, #312]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004824:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800482a:	f7fc f873 	bl	8000914 <HAL_GetTick>
 800482e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004830:	e008      	b.n	8004844 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004832:	f7fc f86f 	bl	8000914 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e086      	b.n	8004952 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004844:	4b45      	ldr	r3, [pc, #276]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1f0      	bne.n	8004832 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004850:	4b42      	ldr	r3, [pc, #264]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004854:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	031b      	lsls	r3, r3, #12
 800485e:	493f      	ldr	r1, [pc, #252]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004860:	4313      	orrs	r3, r2
 8004862:	628b      	str	r3, [r1, #40]	; 0x28
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	3b01      	subs	r3, #1
 800486a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	3b01      	subs	r3, #1
 8004874:	025b      	lsls	r3, r3, #9
 8004876:	b29b      	uxth	r3, r3
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	3b01      	subs	r3, #1
 8004880:	041b      	lsls	r3, r3, #16
 8004882:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	3b01      	subs	r3, #1
 800488e:	061b      	lsls	r3, r3, #24
 8004890:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004894:	4931      	ldr	r1, [pc, #196]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004896:	4313      	orrs	r3, r2
 8004898:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800489a:	4b30      	ldr	r3, [pc, #192]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	492d      	ldr	r1, [pc, #180]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80048ac:	4b2b      	ldr	r3, [pc, #172]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	f023 0220 	bic.w	r2, r3, #32
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	4928      	ldr	r1, [pc, #160]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80048be:	4b27      	ldr	r3, [pc, #156]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	4a26      	ldr	r2, [pc, #152]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048c4:	f023 0310 	bic.w	r3, r3, #16
 80048c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80048ca:	4b24      	ldr	r3, [pc, #144]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048ce:	4b24      	ldr	r3, [pc, #144]	; (8004960 <RCCEx_PLL2_Config+0x160>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	69d2      	ldr	r2, [r2, #28]
 80048d6:	00d2      	lsls	r2, r2, #3
 80048d8:	4920      	ldr	r1, [pc, #128]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80048de:	4b1f      	ldr	r3, [pc, #124]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	4a1e      	ldr	r2, [pc, #120]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048e4:	f043 0310 	orr.w	r3, r3, #16
 80048e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d106      	bne.n	80048fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80048f0:	4b1a      	ldr	r3, [pc, #104]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	4a19      	ldr	r2, [pc, #100]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048fc:	e00f      	b.n	800491e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d106      	bne.n	8004912 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004904:	4b15      	ldr	r3, [pc, #84]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004908:	4a14      	ldr	r2, [pc, #80]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 800490a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800490e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004910:	e005      	b.n	800491e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004912:	4b12      	ldr	r3, [pc, #72]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	4a11      	ldr	r2, [pc, #68]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004918:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800491c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800491e:	4b0f      	ldr	r3, [pc, #60]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a0e      	ldr	r2, [pc, #56]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004924:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004928:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800492a:	f7fb fff3 	bl	8000914 <HAL_GetTick>
 800492e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004930:	e008      	b.n	8004944 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004932:	f7fb ffef 	bl	8000914 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e006      	b.n	8004952 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004944:	4b05      	ldr	r3, [pc, #20]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0f0      	beq.n	8004932 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004950:	7bfb      	ldrb	r3, [r7, #15]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	58024400 	.word	0x58024400
 8004960:	ffff0007 	.word	0xffff0007

08004964 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800496e:	2300      	movs	r3, #0
 8004970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004972:	4b53      	ldr	r3, [pc, #332]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	2b03      	cmp	r3, #3
 800497c:	d101      	bne.n	8004982 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e099      	b.n	8004ab6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004982:	4b4f      	ldr	r3, [pc, #316]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a4e      	ldr	r2, [pc, #312]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800498c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800498e:	f7fb ffc1 	bl	8000914 <HAL_GetTick>
 8004992:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004994:	e008      	b.n	80049a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004996:	f7fb ffbd 	bl	8000914 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e086      	b.n	8004ab6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049a8:	4b45      	ldr	r3, [pc, #276]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f0      	bne.n	8004996 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80049b4:	4b42      	ldr	r3, [pc, #264]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	051b      	lsls	r3, r3, #20
 80049c2:	493f      	ldr	r1, [pc, #252]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	628b      	str	r3, [r1, #40]	; 0x28
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	025b      	lsls	r3, r3, #9
 80049da:	b29b      	uxth	r3, r3
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	041b      	lsls	r3, r3, #16
 80049e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	061b      	lsls	r3, r3, #24
 80049f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049f8:	4931      	ldr	r1, [pc, #196]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80049fe:	4b30      	ldr	r3, [pc, #192]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	492d      	ldr	r1, [pc, #180]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a10:	4b2b      	ldr	r3, [pc, #172]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	4928      	ldr	r1, [pc, #160]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a22:	4b27      	ldr	r3, [pc, #156]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	4a26      	ldr	r2, [pc, #152]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004a2e:	4b24      	ldr	r3, [pc, #144]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a32:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <RCCEx_PLL3_Config+0x160>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	69d2      	ldr	r2, [r2, #28]
 8004a3a:	00d2      	lsls	r2, r2, #3
 8004a3c:	4920      	ldr	r1, [pc, #128]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004a42:	4b1f      	ldr	r3, [pc, #124]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	4a1e      	ldr	r2, [pc, #120]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d106      	bne.n	8004a62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004a54:	4b1a      	ldr	r3, [pc, #104]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	4a19      	ldr	r2, [pc, #100]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a60:	e00f      	b.n	8004a82 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d106      	bne.n	8004a76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004a68:	4b15      	ldr	r3, [pc, #84]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	4a14      	ldr	r2, [pc, #80]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a74:	e005      	b.n	8004a82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004a76:	4b12      	ldr	r3, [pc, #72]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	4a11      	ldr	r2, [pc, #68]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004a82:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a0e      	ldr	r2, [pc, #56]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8e:	f7fb ff41 	bl	8000914 <HAL_GetTick>
 8004a92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a94:	e008      	b.n	8004aa8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a96:	f7fb ff3d 	bl	8000914 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e006      	b.n	8004ab6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004aa8:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0f0      	beq.n	8004a96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	58024400 	.word	0x58024400
 8004ac4:	ffff0007 	.word	0xffff0007

08004ac8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ac8:	b084      	sub	sp, #16
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	f107 001c 	add.w	r0, r7, #28
 8004ad6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d120      	bne.n	8004b22 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	4b2a      	ldr	r3, [pc, #168]	; (8004b9c <USB_CoreInit+0xd4>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d105      	bne.n	8004b16 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f001 faf8 	bl	800610c <USB_CoreReset>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	73fb      	strb	r3, [r7, #15]
 8004b20:	e01a      	b.n	8004b58 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f001 faec 	bl	800610c <USB_CoreReset>
 8004b34:	4603      	mov	r3, r0
 8004b36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	639a      	str	r2, [r3, #56]	; 0x38
 8004b4a:	e005      	b.n	8004b58 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d116      	bne.n	8004b8c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <USB_CoreInit+0xd8>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f043 0206 	orr.w	r2, r3, #6
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f043 0220 	orr.w	r2, r3, #32
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b98:	b004      	add	sp, #16
 8004b9a:	4770      	bx	lr
 8004b9c:	ffbdffbf 	.word	0xffbdffbf
 8004ba0:	03ee0000 	.word	0x03ee0000

08004ba4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d165      	bne.n	8004c84 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4a41      	ldr	r2, [pc, #260]	; (8004cc0 <USB_SetTurnaroundTime+0x11c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d906      	bls.n	8004bce <USB_SetTurnaroundTime+0x2a>
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4a40      	ldr	r2, [pc, #256]	; (8004cc4 <USB_SetTurnaroundTime+0x120>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d202      	bcs.n	8004bce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004bc8:	230f      	movs	r3, #15
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	e062      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	4a3c      	ldr	r2, [pc, #240]	; (8004cc4 <USB_SetTurnaroundTime+0x120>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d306      	bcc.n	8004be4 <USB_SetTurnaroundTime+0x40>
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	4a3b      	ldr	r2, [pc, #236]	; (8004cc8 <USB_SetTurnaroundTime+0x124>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d202      	bcs.n	8004be4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004bde:	230e      	movs	r3, #14
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	e057      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4a38      	ldr	r2, [pc, #224]	; (8004cc8 <USB_SetTurnaroundTime+0x124>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d306      	bcc.n	8004bfa <USB_SetTurnaroundTime+0x56>
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4a37      	ldr	r2, [pc, #220]	; (8004ccc <USB_SetTurnaroundTime+0x128>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d202      	bcs.n	8004bfa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004bf4:	230d      	movs	r3, #13
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	e04c      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	4a33      	ldr	r2, [pc, #204]	; (8004ccc <USB_SetTurnaroundTime+0x128>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d306      	bcc.n	8004c10 <USB_SetTurnaroundTime+0x6c>
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	4a32      	ldr	r2, [pc, #200]	; (8004cd0 <USB_SetTurnaroundTime+0x12c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d802      	bhi.n	8004c10 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004c0a:	230c      	movs	r3, #12
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	e041      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	4a2f      	ldr	r2, [pc, #188]	; (8004cd0 <USB_SetTurnaroundTime+0x12c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d906      	bls.n	8004c26 <USB_SetTurnaroundTime+0x82>
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4a2e      	ldr	r2, [pc, #184]	; (8004cd4 <USB_SetTurnaroundTime+0x130>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d802      	bhi.n	8004c26 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004c20:	230b      	movs	r3, #11
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	e036      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4a2a      	ldr	r2, [pc, #168]	; (8004cd4 <USB_SetTurnaroundTime+0x130>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d906      	bls.n	8004c3c <USB_SetTurnaroundTime+0x98>
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	4a29      	ldr	r2, [pc, #164]	; (8004cd8 <USB_SetTurnaroundTime+0x134>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d802      	bhi.n	8004c3c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004c36:	230a      	movs	r3, #10
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	e02b      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4a26      	ldr	r2, [pc, #152]	; (8004cd8 <USB_SetTurnaroundTime+0x134>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d906      	bls.n	8004c52 <USB_SetTurnaroundTime+0xae>
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4a25      	ldr	r2, [pc, #148]	; (8004cdc <USB_SetTurnaroundTime+0x138>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d202      	bcs.n	8004c52 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004c4c:	2309      	movs	r3, #9
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	e020      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	4a21      	ldr	r2, [pc, #132]	; (8004cdc <USB_SetTurnaroundTime+0x138>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d306      	bcc.n	8004c68 <USB_SetTurnaroundTime+0xc4>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	4a20      	ldr	r2, [pc, #128]	; (8004ce0 <USB_SetTurnaroundTime+0x13c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d802      	bhi.n	8004c68 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c62:	2308      	movs	r3, #8
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	e015      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4a1d      	ldr	r2, [pc, #116]	; (8004ce0 <USB_SetTurnaroundTime+0x13c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d906      	bls.n	8004c7e <USB_SetTurnaroundTime+0xda>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4a1c      	ldr	r2, [pc, #112]	; (8004ce4 <USB_SetTurnaroundTime+0x140>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d202      	bcs.n	8004c7e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c78:	2307      	movs	r3, #7
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	e00a      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c7e:	2306      	movs	r3, #6
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	e007      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d102      	bne.n	8004c90 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004c8a:	2309      	movs	r3, #9
 8004c8c:	617b      	str	r3, [r7, #20]
 8004c8e:	e001      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c90:	2309      	movs	r3, #9
 8004c92:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	029b      	lsls	r3, r3, #10
 8004ca8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004cac:	431a      	orrs	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	371c      	adds	r7, #28
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	00d8acbf 	.word	0x00d8acbf
 8004cc4:	00e4e1c0 	.word	0x00e4e1c0
 8004cc8:	00f42400 	.word	0x00f42400
 8004ccc:	01067380 	.word	0x01067380
 8004cd0:	011a499f 	.word	0x011a499f
 8004cd4:	01312cff 	.word	0x01312cff
 8004cd8:	014ca43f 	.word	0x014ca43f
 8004cdc:	016e3600 	.word	0x016e3600
 8004ce0:	01a6ab1f 	.word	0x01a6ab1f
 8004ce4:	01e84800 	.word	0x01e84800

08004ce8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f043 0201 	orr.w	r2, r3, #1
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f023 0201 	bic.w	r2, r3, #1
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d115      	bne.n	8004d7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d5a:	2001      	movs	r0, #1
 8004d5c:	f7fb fde6 	bl	800092c <HAL_Delay>
      ms++;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	3301      	adds	r3, #1
 8004d64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f001 f93f 	bl	8005fea <USB_GetMode>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d01e      	beq.n	8004db0 <USB_SetCurrentMode+0x84>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b31      	cmp	r3, #49	; 0x31
 8004d76:	d9f0      	bls.n	8004d5a <USB_SetCurrentMode+0x2e>
 8004d78:	e01a      	b.n	8004db0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d115      	bne.n	8004dac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d8c:	2001      	movs	r0, #1
 8004d8e:	f7fb fdcd 	bl	800092c <HAL_Delay>
      ms++;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3301      	adds	r3, #1
 8004d96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f001 f926 	bl	8005fea <USB_GetMode>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <USB_SetCurrentMode+0x84>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b31      	cmp	r3, #49	; 0x31
 8004da8:	d9f0      	bls.n	8004d8c <USB_SetCurrentMode+0x60>
 8004daa:	e001      	b.n	8004db0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e005      	b.n	8004dbc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2b32      	cmp	r3, #50	; 0x32
 8004db4:	d101      	bne.n	8004dba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b086      	sub	sp, #24
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004dd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	e009      	b.n	8004df8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	3340      	adds	r3, #64	; 0x40
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	2200      	movs	r2, #0
 8004df0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	3301      	adds	r3, #1
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	2b0e      	cmp	r3, #14
 8004dfc:	d9f2      	bls.n	8004de4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d11c      	bne.n	8004e3e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e12:	f043 0302 	orr.w	r3, r3, #2
 8004e16:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	e005      	b.n	8004e4a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e50:	461a      	mov	r2, r3
 8004e52:	2300      	movs	r3, #0
 8004e54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e64:	461a      	mov	r2, r3
 8004e66:	680b      	ldr	r3, [r1, #0]
 8004e68:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d10c      	bne.n	8004e8a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d104      	bne.n	8004e80 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e76:	2100      	movs	r1, #0
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f965 	bl	8005148 <USB_SetDevSpeed>
 8004e7e:	e008      	b.n	8004e92 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e80:	2101      	movs	r1, #1
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f960 	bl	8005148 <USB_SetDevSpeed>
 8004e88:	e003      	b.n	8004e92 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e8a:	2103      	movs	r1, #3
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f95b 	bl	8005148 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e92:	2110      	movs	r1, #16
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f8f3 	bl	8005080 <USB_FlushTxFifo>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f91f 	bl	80050e8 <USB_FlushRxFifo>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eba:	461a      	mov	r2, r3
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	2300      	movs	r3, #0
 8004eca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ed8:	2300      	movs	r3, #0
 8004eda:	613b      	str	r3, [r7, #16]
 8004edc:	e043      	b.n	8004f66 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ef4:	d118      	bne.n	8004f28 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10a      	bne.n	8004f12 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f08:	461a      	mov	r2, r3
 8004f0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	e013      	b.n	8004f3a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	e008      	b.n	8004f3a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f34:	461a      	mov	r2, r3
 8004f36:	2300      	movs	r3, #0
 8004f38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f46:	461a      	mov	r2, r3
 8004f48:	2300      	movs	r3, #0
 8004f4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f58:	461a      	mov	r2, r3
 8004f5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	3301      	adds	r3, #1
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d3b7      	bcc.n	8004ede <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f6e:	2300      	movs	r3, #0
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	e043      	b.n	8004ffc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f8a:	d118      	bne.n	8004fbe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10a      	bne.n	8004fa8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	e013      	b.n	8004fd0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fba:	6013      	str	r3, [r2, #0]
 8004fbc:	e008      	b.n	8004fd0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fca:	461a      	mov	r2, r3
 8004fcc:	2300      	movs	r3, #0
 8004fce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fdc:	461a      	mov	r2, r3
 8004fde:	2300      	movs	r3, #0
 8004fe0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ff4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	613b      	str	r3, [r7, #16]
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	429a      	cmp	r2, r3
 8005002:	d3b7      	bcc.n	8004f74 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005016:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005024:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005028:	2b00      	cmp	r3, #0
 800502a:	d105      	bne.n	8005038 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	f043 0210 	orr.w	r2, r3, #16
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699a      	ldr	r2, [r3, #24]
 800503c:	4b0e      	ldr	r3, [pc, #56]	; (8005078 <USB_DevInit+0x2b4>)
 800503e:	4313      	orrs	r3, r2
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005046:	2b00      	cmp	r3, #0
 8005048:	d005      	beq.n	8005056 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	f043 0208 	orr.w	r2, r3, #8
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005058:	2b01      	cmp	r3, #1
 800505a:	d105      	bne.n	8005068 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699a      	ldr	r2, [r3, #24]
 8005060:	4b06      	ldr	r3, [pc, #24]	; (800507c <USB_DevInit+0x2b8>)
 8005062:	4313      	orrs	r3, r2
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005068:	7dfb      	ldrb	r3, [r7, #23]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005074:	b004      	add	sp, #16
 8005076:	4770      	bx	lr
 8005078:	803c3800 	.word	0x803c3800
 800507c:	40000004 	.word	0x40000004

08005080 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3301      	adds	r3, #1
 8005092:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4a13      	ldr	r2, [pc, #76]	; (80050e4 <USB_FlushTxFifo+0x64>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d901      	bls.n	80050a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e01b      	b.n	80050d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	daf2      	bge.n	800508e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	019b      	lsls	r3, r3, #6
 80050b0:	f043 0220 	orr.w	r2, r3, #32
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	3301      	adds	r3, #1
 80050bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4a08      	ldr	r2, [pc, #32]	; (80050e4 <USB_FlushTxFifo+0x64>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d901      	bls.n	80050ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e006      	b.n	80050d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	2b20      	cmp	r3, #32
 80050d4:	d0f0      	beq.n	80050b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	00030d40 	.word	0x00030d40

080050e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	3301      	adds	r3, #1
 80050f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4a11      	ldr	r2, [pc, #68]	; (8005144 <USB_FlushRxFifo+0x5c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d901      	bls.n	8005106 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e018      	b.n	8005138 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	2b00      	cmp	r3, #0
 800510c:	daf2      	bge.n	80050f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2210      	movs	r2, #16
 8005116:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	3301      	adds	r3, #1
 800511c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4a08      	ldr	r2, [pc, #32]	; (8005144 <USB_FlushRxFifo+0x5c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d901      	bls.n	800512a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e006      	b.n	8005138 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0310 	and.w	r3, r3, #16
 8005132:	2b10      	cmp	r3, #16
 8005134:	d0f0      	beq.n	8005118 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	00030d40 	.word	0x00030d40

08005148 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	68f9      	ldr	r1, [r7, #12]
 8005164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005168:	4313      	orrs	r3, r2
 800516a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800517a:	b480      	push	{r7}
 800517c:	b087      	sub	sp, #28
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 0306 	and.w	r3, r3, #6
 8005192:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d102      	bne.n	80051a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800519a:	2300      	movs	r3, #0
 800519c:	75fb      	strb	r3, [r7, #23]
 800519e:	e00a      	b.n	80051b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d002      	beq.n	80051ac <USB_GetDevSpeed+0x32>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b06      	cmp	r3, #6
 80051aa:	d102      	bne.n	80051b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80051ac:	2302      	movs	r3, #2
 80051ae:	75fb      	strb	r3, [r7, #23]
 80051b0:	e001      	b.n	80051b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80051b2:	230f      	movs	r3, #15
 80051b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80051b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	785b      	ldrb	r3, [r3, #1]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d139      	bne.n	8005254 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e6:	69da      	ldr	r2, [r3, #28]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	f003 030f 	and.w	r3, r3, #15
 80051f0:	2101      	movs	r1, #1
 80051f2:	fa01 f303 	lsl.w	r3, r1, r3
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	68f9      	ldr	r1, [r7, #12]
 80051fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051fe:	4313      	orrs	r3, r2
 8005200:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d153      	bne.n	80052c0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	791b      	ldrb	r3, [r3, #4]
 8005232:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005234:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	059b      	lsls	r3, r3, #22
 800523a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800523c:	431a      	orrs	r2, r3
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	0159      	lsls	r1, r3, #5
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	440b      	add	r3, r1
 8005246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524a:	4619      	mov	r1, r3
 800524c:	4b20      	ldr	r3, [pc, #128]	; (80052d0 <USB_ActivateEndpoint+0x10c>)
 800524e:	4313      	orrs	r3, r2
 8005250:	600b      	str	r3, [r1, #0]
 8005252:	e035      	b.n	80052c0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	2101      	movs	r1, #1
 8005266:	fa01 f303 	lsl.w	r3, r1, r3
 800526a:	041b      	lsls	r3, r3, #16
 800526c:	68f9      	ldr	r1, [r7, #12]
 800526e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005272:	4313      	orrs	r3, r2
 8005274:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d119      	bne.n	80052c0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	791b      	ldrb	r3, [r3, #4]
 80052a6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80052a8:	430b      	orrs	r3, r1
 80052aa:	431a      	orrs	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	0159      	lsls	r1, r3, #5
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	440b      	add	r3, r1
 80052b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b8:	4619      	mov	r1, r3
 80052ba:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <USB_ActivateEndpoint+0x10c>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	10008000 	.word	0x10008000

080052d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d161      	bne.n	80053b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005302:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005306:	d11f      	bne.n	8005348 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	0151      	lsls	r1, r2, #5
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	440a      	add	r2, r1
 800531e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005322:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005326:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	0151      	lsls	r1, r2, #5
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	440a      	add	r2, r1
 800533e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005342:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005346:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	2101      	movs	r1, #1
 800535a:	fa01 f303 	lsl.w	r3, r1, r3
 800535e:	b29b      	uxth	r3, r3
 8005360:	43db      	mvns	r3, r3
 8005362:	68f9      	ldr	r1, [r7, #12]
 8005364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005368:	4013      	ands	r3, r2
 800536a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	f003 030f 	and.w	r3, r3, #15
 800537c:	2101      	movs	r1, #1
 800537e:	fa01 f303 	lsl.w	r3, r1, r3
 8005382:	b29b      	uxth	r3, r3
 8005384:	43db      	mvns	r3, r3
 8005386:	68f9      	ldr	r1, [r7, #12]
 8005388:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800538c:	4013      	ands	r3, r2
 800538e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	0159      	lsls	r1, r3, #5
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	440b      	add	r3, r1
 80053a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053aa:	4619      	mov	r1, r3
 80053ac:	4b35      	ldr	r3, [pc, #212]	; (8005484 <USB_DeactivateEndpoint+0x1b0>)
 80053ae:	4013      	ands	r3, r2
 80053b0:	600b      	str	r3, [r1, #0]
 80053b2:	e060      	b.n	8005476 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053ca:	d11f      	bne.n	800540c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	0151      	lsls	r1, r2, #5
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	440a      	add	r2, r1
 80053e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	0151      	lsls	r1, r2, #5
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	440a      	add	r2, r1
 8005402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005406:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800540a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005412:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	f003 030f 	and.w	r3, r3, #15
 800541c:	2101      	movs	r1, #1
 800541e:	fa01 f303 	lsl.w	r3, r1, r3
 8005422:	041b      	lsls	r3, r3, #16
 8005424:	43db      	mvns	r3, r3
 8005426:	68f9      	ldr	r1, [r7, #12]
 8005428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800542c:	4013      	ands	r3, r2
 800542e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	2101      	movs	r1, #1
 8005442:	fa01 f303 	lsl.w	r3, r1, r3
 8005446:	041b      	lsls	r3, r3, #16
 8005448:	43db      	mvns	r3, r3
 800544a:	68f9      	ldr	r1, [r7, #12]
 800544c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005450:	4013      	ands	r3, r2
 8005452:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	0159      	lsls	r1, r3, #5
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	440b      	add	r3, r1
 800546a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546e:	4619      	mov	r1, r3
 8005470:	4b05      	ldr	r3, [pc, #20]	; (8005488 <USB_DeactivateEndpoint+0x1b4>)
 8005472:	4013      	ands	r3, r2
 8005474:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	ec337800 	.word	0xec337800
 8005488:	eff37800 	.word	0xeff37800

0800548c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08a      	sub	sp, #40	; 0x28
 8005490:	af02      	add	r7, sp, #8
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	4613      	mov	r3, r2
 8005498:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	785b      	ldrb	r3, [r3, #1]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	f040 8181 	bne.w	80057b0 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d132      	bne.n	800551c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	0159      	lsls	r1, r3, #5
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	440b      	add	r3, r1
 80054cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d0:	4619      	mov	r1, r3
 80054d2:	4ba5      	ldr	r3, [pc, #660]	; (8005768 <USB_EPStartXfer+0x2dc>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	0151      	lsls	r1, r2, #5
 80054ea:	69fa      	ldr	r2, [r7, #28]
 80054ec:	440a      	add	r2, r1
 80054ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005504:	691a      	ldr	r2, [r3, #16]
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	0159      	lsls	r1, r3, #5
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	440b      	add	r3, r1
 800550e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005512:	4619      	mov	r1, r3
 8005514:	4b95      	ldr	r3, [pc, #596]	; (800576c <USB_EPStartXfer+0x2e0>)
 8005516:	4013      	ands	r3, r2
 8005518:	610b      	str	r3, [r1, #16]
 800551a:	e092      	b.n	8005642 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	0159      	lsls	r1, r3, #5
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	440b      	add	r3, r1
 8005532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005536:	4619      	mov	r1, r3
 8005538:	4b8c      	ldr	r3, [pc, #560]	; (800576c <USB_EPStartXfer+0x2e0>)
 800553a:	4013      	ands	r3, r2
 800553c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	0159      	lsls	r1, r3, #5
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	440b      	add	r3, r1
 8005554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005558:	4619      	mov	r1, r3
 800555a:	4b83      	ldr	r3, [pc, #524]	; (8005768 <USB_EPStartXfer+0x2dc>)
 800555c:	4013      	ands	r3, r2
 800555e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d11a      	bne.n	800559c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	429a      	cmp	r2, r3
 8005570:	d903      	bls.n	800557a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	0151      	lsls	r1, r2, #5
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	440a      	add	r2, r1
 8005590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005594:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005598:	6113      	str	r3, [r2, #16]
 800559a:	e01b      	b.n	80055d4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	6919      	ldr	r1, [r3, #16]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	440b      	add	r3, r1
 80055b4:	1e59      	subs	r1, r3, #1
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80055be:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80055c0:	4b6b      	ldr	r3, [pc, #428]	; (8005770 <USB_EPStartXfer+0x2e4>)
 80055c2:	400b      	ands	r3, r1
 80055c4:	69b9      	ldr	r1, [r7, #24]
 80055c6:	0148      	lsls	r0, r1, #5
 80055c8:	69f9      	ldr	r1, [r7, #28]
 80055ca:	4401      	add	r1, r0
 80055cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80055d0:	4313      	orrs	r3, r2
 80055d2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e0:	691a      	ldr	r2, [r3, #16]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ea:	69b9      	ldr	r1, [r7, #24]
 80055ec:	0148      	lsls	r0, r1, #5
 80055ee:	69f9      	ldr	r1, [r7, #28]
 80055f0:	4401      	add	r1, r0
 80055f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80055f6:	4313      	orrs	r3, r2
 80055f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	791b      	ldrb	r3, [r3, #4]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d11f      	bne.n	8005642 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	440a      	add	r2, r1
 8005618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800561c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005620:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	440a      	add	r2, r1
 8005638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005640:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005642:	79fb      	ldrb	r3, [r7, #7]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d14b      	bne.n	80056e0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d009      	beq.n	8005664 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565c:	461a      	mov	r2, r3
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	791b      	ldrb	r3, [r3, #4]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d128      	bne.n	80056be <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005678:	2b00      	cmp	r3, #0
 800567a:	d110      	bne.n	800569e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	0151      	lsls	r1, r2, #5
 800568e:	69fa      	ldr	r2, [r7, #28]
 8005690:	440a      	add	r2, r1
 8005692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005696:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	e00f      	b.n	80056be <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	0151      	lsls	r1, r2, #5
 80056b0:	69fa      	ldr	r2, [r7, #28]
 80056b2:	440a      	add	r2, r1
 80056b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	0151      	lsls	r1, r2, #5
 80056d0:	69fa      	ldr	r2, [r7, #28]
 80056d2:	440a      	add	r2, r1
 80056d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	e16a      	b.n	80059b6 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	0151      	lsls	r1, r2, #5
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	440a      	add	r2, r1
 80056f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	791b      	ldrb	r3, [r3, #4]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d015      	beq.n	8005734 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 8152 	beq.w	80059b6 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	f003 030f 	and.w	r3, r3, #15
 8005722:	2101      	movs	r1, #1
 8005724:	fa01 f303 	lsl.w	r3, r1, r3
 8005728:	69f9      	ldr	r1, [r7, #28]
 800572a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800572e:	4313      	orrs	r3, r2
 8005730:	634b      	str	r3, [r1, #52]	; 0x34
 8005732:	e140      	b.n	80059b6 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005740:	2b00      	cmp	r3, #0
 8005742:	d117      	bne.n	8005774 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	0151      	lsls	r1, r2, #5
 8005756:	69fa      	ldr	r2, [r7, #28]
 8005758:	440a      	add	r2, r1
 800575a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800575e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005762:	6013      	str	r3, [r2, #0]
 8005764:	e016      	b.n	8005794 <USB_EPStartXfer+0x308>
 8005766:	bf00      	nop
 8005768:	e007ffff 	.word	0xe007ffff
 800576c:	fff80000 	.word	0xfff80000
 8005770:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	0151      	lsls	r1, r2, #5
 8005786:	69fa      	ldr	r2, [r7, #28]
 8005788:	440a      	add	r2, r1
 800578a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800578e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005792:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	68d9      	ldr	r1, [r3, #12]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	781a      	ldrb	r2, [r3, #0]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	b298      	uxth	r0, r3
 80057a2:	79fb      	ldrb	r3, [r7, #7]
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	4603      	mov	r3, r0
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 f9b9 	bl	8005b20 <USB_WritePacket>
 80057ae:	e102      	b.n	80059b6 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057bc:	691a      	ldr	r2, [r3, #16]
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	0159      	lsls	r1, r3, #5
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	440b      	add	r3, r1
 80057c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ca:	4619      	mov	r1, r3
 80057cc:	4b7c      	ldr	r3, [pc, #496]	; (80059c0 <USB_EPStartXfer+0x534>)
 80057ce:	4013      	ands	r3, r2
 80057d0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057de:	691a      	ldr	r2, [r3, #16]
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	0159      	lsls	r1, r3, #5
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	440b      	add	r3, r1
 80057e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ec:	4619      	mov	r1, r3
 80057ee:	4b75      	ldr	r3, [pc, #468]	; (80059c4 <USB_EPStartXfer+0x538>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d12f      	bne.n	800585a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	689a      	ldr	r2, [r3, #8]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	689a      	ldr	r2, [r3, #8]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005828:	69b9      	ldr	r1, [r7, #24]
 800582a:	0148      	lsls	r0, r1, #5
 800582c:	69f9      	ldr	r1, [r7, #28]
 800582e:	4401      	add	r1, r0
 8005830:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005834:	4313      	orrs	r3, r2
 8005836:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	0151      	lsls	r1, r2, #5
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	440a      	add	r2, r1
 800584e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005852:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005856:	6113      	str	r3, [r2, #16]
 8005858:	e05f      	b.n	800591a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d123      	bne.n	80058aa <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005878:	69b9      	ldr	r1, [r7, #24]
 800587a:	0148      	lsls	r0, r1, #5
 800587c:	69f9      	ldr	r1, [r7, #28]
 800587e:	4401      	add	r1, r0
 8005880:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005884:	4313      	orrs	r3, r2
 8005886:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	440a      	add	r2, r1
 800589e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058a6:	6113      	str	r3, [r2, #16]
 80058a8:	e037      	b.n	800591a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	691a      	ldr	r2, [r3, #16]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	4413      	add	r3, r2
 80058b4:	1e5a      	subs	r2, r3, #1
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80058be:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	8afa      	ldrh	r2, [r7, #22]
 80058c6:	fb03 f202 	mul.w	r2, r3, r2
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	8afb      	ldrh	r3, [r7, #22]
 80058de:	04d9      	lsls	r1, r3, #19
 80058e0:	4b39      	ldr	r3, [pc, #228]	; (80059c8 <USB_EPStartXfer+0x53c>)
 80058e2:	400b      	ands	r3, r1
 80058e4:	69b9      	ldr	r1, [r7, #24]
 80058e6:	0148      	lsls	r0, r1, #5
 80058e8:	69f9      	ldr	r1, [r7, #28]
 80058ea:	4401      	add	r1, r0
 80058ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058f0:	4313      	orrs	r3, r2
 80058f2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800590a:	69b9      	ldr	r1, [r7, #24]
 800590c:	0148      	lsls	r0, r1, #5
 800590e:	69f9      	ldr	r1, [r7, #28]
 8005910:	4401      	add	r1, r0
 8005912:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005916:	4313      	orrs	r3, r2
 8005918:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d10d      	bne.n	800593c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d009      	beq.n	800593c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	68d9      	ldr	r1, [r3, #12]
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005938:	460a      	mov	r2, r1
 800593a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	791b      	ldrb	r3, [r3, #4]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d128      	bne.n	8005996 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005950:	2b00      	cmp	r3, #0
 8005952:	d110      	bne.n	8005976 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	0151      	lsls	r1, r2, #5
 8005966:	69fa      	ldr	r2, [r7, #28]
 8005968:	440a      	add	r2, r1
 800596a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800596e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005972:	6013      	str	r3, [r2, #0]
 8005974:	e00f      	b.n	8005996 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	0151      	lsls	r1, r2, #5
 8005988:	69fa      	ldr	r2, [r7, #28]
 800598a:	440a      	add	r2, r1
 800598c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005994:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	0151      	lsls	r1, r2, #5
 80059a8:	69fa      	ldr	r2, [r7, #28]
 80059aa:	440a      	add	r2, r1
 80059ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3720      	adds	r7, #32
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	fff80000 	.word	0xfff80000
 80059c4:	e007ffff 	.word	0xe007ffff
 80059c8:	1ff80000 	.word	0x1ff80000

080059cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80059da:	2300      	movs	r3, #0
 80059dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	785b      	ldrb	r3, [r3, #1]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d14a      	bne.n	8005a80 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a02:	f040 8086 	bne.w	8005b12 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	7812      	ldrb	r2, [r2, #0]
 8005a1a:	0151      	lsls	r1, r2, #5
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	440a      	add	r2, r1
 8005a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a28:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	7812      	ldrb	r2, [r2, #0]
 8005a3e:	0151      	lsls	r1, r2, #5
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	440a      	add	r2, r1
 8005a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	3301      	adds	r3, #1
 8005a52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d902      	bls.n	8005a64 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	75fb      	strb	r3, [r7, #23]
          break;
 8005a62:	e056      	b.n	8005b12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a7c:	d0e7      	beq.n	8005a4e <USB_EPStopXfer+0x82>
 8005a7e:	e048      	b.n	8005b12 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a98:	d13b      	bne.n	8005b12 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	7812      	ldrb	r2, [r2, #0]
 8005aae:	0151      	lsls	r1, r2, #5
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	440a      	add	r2, r1
 8005ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ab8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005abc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	7812      	ldrb	r2, [r2, #0]
 8005ad2:	0151      	lsls	r1, r2, #5
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	440a      	add	r2, r1
 8005ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005adc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ae0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f242 7210 	movw	r2, #10000	; 0x2710
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d902      	bls.n	8005af8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	75fb      	strb	r3, [r7, #23]
          break;
 8005af6:	e00c      	b.n	8005b12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b10:	d0e7      	beq.n	8005ae2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b089      	sub	sp, #36	; 0x24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	460b      	mov	r3, r1
 8005b30:	71fb      	strb	r3, [r7, #7]
 8005b32:	4613      	mov	r3, r2
 8005b34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d123      	bne.n	8005b8e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b46:	88bb      	ldrh	r3, [r7, #4]
 8005b48:	3303      	adds	r3, #3
 8005b4a:	089b      	lsrs	r3, r3, #2
 8005b4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61bb      	str	r3, [r7, #24]
 8005b52:	e018      	b.n	8005b86 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b54:	79fb      	ldrb	r3, [r7, #7]
 8005b56:	031a      	lsls	r2, r3, #12
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b60:	461a      	mov	r2, r3
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	3301      	adds	r3, #1
 8005b72:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	3301      	adds	r3, #1
 8005b78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	3301      	adds	r3, #1
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d3e2      	bcc.n	8005b54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3724      	adds	r7, #36	; 0x24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b08b      	sub	sp, #44	; 0x2c
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	089b      	lsrs	r3, r3, #2
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005bba:	88fb      	ldrh	r3, [r7, #6]
 8005bbc:	f003 0303 	and.w	r3, r3, #3
 8005bc0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	623b      	str	r3, [r7, #32]
 8005bc6:	e014      	b.n	8005bf2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	3301      	adds	r3, #1
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	3301      	adds	r3, #1
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	3301      	adds	r3, #1
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	623b      	str	r3, [r7, #32]
 8005bf2:	6a3a      	ldr	r2, [r7, #32]
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d3e6      	bcc.n	8005bc8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005bfa:	8bfb      	ldrh	r3, [r7, #30]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d01e      	beq.n	8005c3e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f107 0310 	add.w	r3, r7, #16
 8005c10:	6812      	ldr	r2, [r2, #0]
 8005c12:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	701a      	strb	r2, [r3, #0]
      i++;
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	3301      	adds	r3, #1
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005c32:	8bfb      	ldrh	r3, [r7, #30]
 8005c34:	3b01      	subs	r3, #1
 8005c36:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c38:	8bfb      	ldrh	r3, [r7, #30]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1ea      	bne.n	8005c14 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	372c      	adds	r7, #44	; 0x2c
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	785b      	ldrb	r3, [r3, #1]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d12c      	bne.n	8005cc2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	db12      	blt.n	8005ca0 <USB_EPSetStall+0x54>
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00f      	beq.n	8005ca0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	0151      	lsls	r1, r2, #5
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	440a      	add	r2, r1
 8005c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c9e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	0151      	lsls	r1, r2, #5
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	440a      	add	r2, r1
 8005cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	e02b      	b.n	8005d1a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	db12      	blt.n	8005cfa <USB_EPSetStall+0xae>
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00f      	beq.n	8005cfa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	0151      	lsls	r1, r2, #5
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	440a      	add	r2, r1
 8005cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cf8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	0151      	lsls	r1, r2, #5
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	440a      	add	r2, r1
 8005d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d128      	bne.n	8005d96 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	0151      	lsls	r1, r2, #5
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	440a      	add	r2, r1
 8005d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	791b      	ldrb	r3, [r3, #4]
 8005d68:	2b03      	cmp	r3, #3
 8005d6a:	d003      	beq.n	8005d74 <USB_EPClearStall+0x4c>
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	791b      	ldrb	r3, [r3, #4]
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d138      	bne.n	8005de6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	0151      	lsls	r1, r2, #5
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	440a      	add	r2, r1
 8005d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	e027      	b.n	8005de6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	0151      	lsls	r1, r2, #5
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	440a      	add	r2, r1
 8005dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005db4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	791b      	ldrb	r3, [r3, #4]
 8005dba:	2b03      	cmp	r3, #3
 8005dbc:	d003      	beq.n	8005dc6 <USB_EPClearStall+0x9e>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	791b      	ldrb	r3, [r3, #4]
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d10f      	bne.n	8005de6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	0151      	lsls	r1, r2, #5
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	440a      	add	r2, r1
 8005ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005de4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005e16:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005e28:	68f9      	ldr	r1, [r7, #12]
 8005e2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e5a:	f023 0303 	bic.w	r3, r3, #3
 8005e5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e6e:	f023 0302 	bic.w	r3, r3, #2
 8005e72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b085      	sub	sp, #20
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e9c:	f023 0303 	bic.w	r3, r3, #3
 8005ea0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eb0:	f043 0302 	orr.w	r3, r3, #2
 8005eb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005edc:	68fb      	ldr	r3, [r7, #12]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b085      	sub	sp, #20
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	0c1b      	lsrs	r3, r3, #16
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b085      	sub	sp, #20
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3a:	69db      	ldr	r3, [r3, #28]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	4013      	ands	r3, r2
 8005f40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	b29b      	uxth	r3, r3
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b085      	sub	sp, #20
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f62:	78fb      	ldrb	r3, [r7, #3]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f80:	68bb      	ldr	r3, [r7, #8]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b087      	sub	sp, #28
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	460b      	mov	r3, r1
 8005f98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005fb2:	78fb      	ldrb	r3, [r7, #3]
 8005fb4:	f003 030f 	and.w	r3, r3, #15
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	fa22 f303 	lsr.w	r3, r2, r3
 8005fbe:	01db      	lsls	r3, r3, #7
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005fc8:	78fb      	ldrb	r3, [r7, #3]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4013      	ands	r3, r2
 8005fda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	371c      	adds	r7, #28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
	...

08006008 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006022:	4619      	mov	r1, r3
 8006024:	4b09      	ldr	r3, [pc, #36]	; (800604c <USB_ActivateSetup+0x44>)
 8006026:	4013      	ands	r3, r2
 8006028:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800603c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	fffff800 	.word	0xfffff800

08006050 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	460b      	mov	r3, r1
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	333c      	adds	r3, #60	; 0x3c
 8006066:	3304      	adds	r3, #4
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	4a26      	ldr	r2, [pc, #152]	; (8006108 <USB_EP0_OutStart+0xb8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d90a      	bls.n	800608a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006080:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006084:	d101      	bne.n	800608a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	e037      	b.n	80060fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006090:	461a      	mov	r2, r3
 8006092:	2300      	movs	r3, #0
 8006094:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b8:	f043 0318 	orr.w	r3, r3, #24
 80060bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80060d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80060d2:	7afb      	ldrb	r3, [r7, #11]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d10f      	bne.n	80060f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060de:	461a      	mov	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80060f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	371c      	adds	r7, #28
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	4f54300a 	.word	0x4f54300a

0800610c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3301      	adds	r3, #1
 800611c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4a13      	ldr	r2, [pc, #76]	; (8006170 <USB_CoreReset+0x64>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d901      	bls.n	800612a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e01b      	b.n	8006162 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	2b00      	cmp	r3, #0
 8006130:	daf2      	bge.n	8006118 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	f043 0201 	orr.w	r2, r3, #1
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3301      	adds	r3, #1
 8006146:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4a09      	ldr	r2, [pc, #36]	; (8006170 <USB_CoreReset+0x64>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d901      	bls.n	8006154 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e006      	b.n	8006162 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	2b01      	cmp	r3, #1
 800615e:	d0f0      	beq.n	8006142 <USB_CoreReset+0x36>

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	00030d40 	.word	0x00030d40

08006174 <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 8006180:	4b0c      	ldr	r3, [pc, #48]	; (80061b4 <_ux_system_error_handler+0x40>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	61da      	str	r2, [r3, #28]
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 8006188:	4b0a      	ldr	r3, [pc, #40]	; (80061b4 <_ux_system_error_handler+0x40>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6a1a      	ldr	r2, [r3, #32]
 800618e:	3201      	adds	r2, #1
 8006190:	621a      	str	r2, [r3, #32]

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 8006192:	4b08      	ldr	r3, [pc, #32]	; (80061b4 <_ux_system_error_handler+0x40>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	2b00      	cmp	r3, #0
 800619a:	d006      	beq.n	80061aa <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 800619c:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <_ux_system_error_handler+0x40>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	4798      	blx	r3
    }
}
 80061aa:	bf00      	nop
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	240005e4 	.word	0x240005e4

080061b8 <_ux_system_initialize>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size, 
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]
UINT                status;
#endif


    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	2100      	movs	r1, #0
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 faf6 	bl	80067bc <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 80061d0:	4a48      	ldr	r2, [pc, #288]	; (80062f4 <_ux_system_initialize+0x13c>)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset = sizeof(UX_SYSTEM);
 80061d6:	2328      	movs	r3, #40	; 0x28
 80061d8:	61fb      	str	r3, [r7, #28]
#endif 

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	4413      	add	r3, r2
 80061e0:	4a45      	ldr	r2, [pc, #276]	; (80062f8 <_ux_system_initialize+0x140>)
 80061e2:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_SLAVE);
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80061ea:	61fb      	str	r3, [r7, #28]
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif 


    /* Set the cache safe memory for the dynamic pool */
    _ux_system -> ux_system_regular_memory_pool_start =  (UX_MEMORY_BLOCK *) (((UCHAR *) regular_memory_pool_start) 
 80061ec:	4b41      	ldr	r3, [pc, #260]	; (80062f4 <_ux_system_initialize+0x13c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68f9      	ldr	r1, [r7, #12]
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	440a      	add	r2, r1
 80061f6:	601a      	str	r2, [r3, #0]
                                                            + memory_pool_offset);

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start =   (ALIGN_TYPE) _ux_system -> ux_system_regular_memory_pool_start;
 80061f8:	4b3e      	ldr	r3, [pc, #248]	; (80062f4 <_ux_system_initialize+0x13c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	61bb      	str	r3, [r7, #24]
    int_memory_pool_start +=  UX_ALIGN_MIN;
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	330f      	adds	r3, #15
 8006204:	61bb      	str	r3, [r7, #24]
    int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	f023 030f 	bic.w	r3, r3, #15
 800620c:	61bb      	str	r3, [r7, #24]
    
    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4413      	add	r3, r2
 8006214:	617b      	str	r3, [r7, #20]

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	429a      	cmp	r2, r3
 800621c:	d301      	bcc.n	8006222 <_ux_system_initialize+0x6a>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 800621e:	2312      	movs	r3, #18
 8006220:	e064      	b.n	80062ec <_ux_system_initialize+0x134>
    }

    /* Now, we have a project structure allocated, save the regular memory allocation details */
    _ux_system -> ux_system_regular_memory_pool_size =     (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 8006222:	6979      	ldr	r1, [r7, #20]
 8006224:	4b33      	ldr	r3, [pc, #204]	; (80062f4 <_ux_system_initialize+0x13c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	1a8a      	subs	r2, r1, r2
 800622c:	605a      	str	r2, [r3, #4]
    _ux_system -> ux_system_regular_memory_pool_free =     _ux_system -> ux_system_regular_memory_pool_size;
 800622e:	4b31      	ldr	r3, [pc, #196]	; (80062f4 <_ux_system_initialize+0x13c>)
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	4b30      	ldr	r3, [pc, #192]	; (80062f4 <_ux_system_initialize+0x13c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6852      	ldr	r2, [r2, #4]
 8006238:	609a      	str	r2, [r3, #8]
    _ux_system -> ux_system_regular_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 800623a:	4b2e      	ldr	r3, [pc, #184]	; (80062f4 <_ux_system_initialize+0x13c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	601a      	str	r2, [r3, #0]

    /* Build the first free memory block */
    memory_block =                             _ux_system -> ux_system_regular_memory_pool_start;
 8006242:	4b2c      	ldr	r3, [pc, #176]	; (80062f4 <_ux_system_initialize+0x13c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	613b      	str	r3, [r7, #16]
    memory_block -> ux_memory_block_size =     _ux_system -> ux_system_regular_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 800624a:	4b2a      	ldr	r3, [pc, #168]	; (80062f4 <_ux_system_initialize+0x13c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f1a3 0210 	sub.w	r2, r3, #16
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	601a      	str	r2, [r3, #0]
    memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	2200      	movs	r2, #0
 800625c:	605a      	str	r2, [r3, #4]

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if (cache_safe_memory_pool_start == UX_NULL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d112      	bne.n	800628a <_ux_system_initialize+0xd2>
    {

        /* Cache safe memory is the same as regular memory.  */
        _ux_system -> ux_system_cache_safe_memory_pool_size =  _ux_system -> ux_system_regular_memory_pool_size;
 8006264:	4b23      	ldr	r3, [pc, #140]	; (80062f4 <_ux_system_initialize+0x13c>)
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	4b22      	ldr	r3, [pc, #136]	; (80062f4 <_ux_system_initialize+0x13c>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6852      	ldr	r2, [r2, #4]
 800626e:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =  _ux_system -> ux_system_regular_memory_pool_free;
 8006270:	4b20      	ldr	r3, [pc, #128]	; (80062f4 <_ux_system_initialize+0x13c>)
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	4b1f      	ldr	r3, [pc, #124]	; (80062f4 <_ux_system_initialize+0x13c>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6892      	ldr	r2, [r2, #8]
 800627a:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start = _ux_system -> ux_system_regular_memory_pool_start;
 800627c:	4b1d      	ldr	r3, [pc, #116]	; (80062f4 <_ux_system_initialize+0x13c>)
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	4b1c      	ldr	r3, [pc, #112]	; (80062f4 <_ux_system_initialize+0x13c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6812      	ldr	r2, [r2, #0]
 8006286:	60da      	str	r2, [r3, #12]
 8006288:	e02f      	b.n	80062ea <_ux_system_initialize+0x132>
    }
    else
    {
    
        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	61bb      	str	r3, [r7, #24]
        int_memory_pool_start +=  UX_ALIGN_MIN;
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	330f      	adds	r3, #15
 8006292:	61bb      	str	r3, [r7, #24]
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	f023 030f 	bic.w	r3, r3, #15
 800629a:	61bb      	str	r3, [r7, #24]
    
        /* Save the cache safe memory allocation details */
        _ux_system -> ux_system_cache_safe_memory_pool_size =     cache_safe_memory_size - UX_ALIGN_MIN;
 800629c:	4b15      	ldr	r3, [pc, #84]	; (80062f4 <_ux_system_initialize+0x13c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	3a0f      	subs	r2, #15
 80062a4:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =     _ux_system -> ux_system_cache_safe_memory_pool_size;
 80062a6:	4b13      	ldr	r3, [pc, #76]	; (80062f4 <_ux_system_initialize+0x13c>)
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	4b12      	ldr	r3, [pc, #72]	; (80062f4 <_ux_system_initialize+0x13c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6912      	ldr	r2, [r2, #16]
 80062b0:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 80062b2:	4b10      	ldr	r3, [pc, #64]	; (80062f4 <_ux_system_initialize+0x13c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	60da      	str	r2, [r3, #12]
    
        /* Reset this memory block */
        _ux_utility_memory_set(_ux_system -> ux_system_cache_safe_memory_pool_start, 0, _ux_system -> ux_system_cache_safe_memory_pool_size); /* Use case of memset is verified. */
 80062ba:	4b0e      	ldr	r3, [pc, #56]	; (80062f4 <_ux_system_initialize+0x13c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68d8      	ldr	r0, [r3, #12]
 80062c0:	4b0c      	ldr	r3, [pc, #48]	; (80062f4 <_ux_system_initialize+0x13c>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	461a      	mov	r2, r3
 80062c8:	2100      	movs	r1, #0
 80062ca:	f000 fa77 	bl	80067bc <_ux_utility_memory_set>
    
        /* Build the first free memory block */
        memory_block =                             _ux_system -> ux_system_cache_safe_memory_pool_start;
 80062ce:	4b09      	ldr	r3, [pc, #36]	; (80062f4 <_ux_system_initialize+0x13c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	613b      	str	r3, [r7, #16]
        memory_block -> ux_memory_block_size =     _ux_system -> ux_system_cache_safe_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 80062d6:	4b07      	ldr	r3, [pc, #28]	; (80062f4 <_ux_system_initialize+0x13c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	f1a3 0210 	sub.w	r2, r3, #16
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	2200      	movs	r2, #0
 80062e8:	605a      	str	r2, [r3, #4]
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
    if(status != UX_SUCCESS)
        return(UX_MUTEX_ERROR);
#endif

    return(UX_SUCCESS);
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3720      	adds	r7, #32
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	240005e4 	.word	0x240005e4
 80062f8:	240005e8 	.word	0x240005e8

080062fc <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 800630a:	e026      	b.n	800635a <_ux_utility_descriptor_parse+0x5e>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	60ba      	str	r2, [r7, #8]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b02      	cmp	r3, #2
 8006316:	d00b      	beq.n	8006330 <_ux_utility_descriptor_parse+0x34>
 8006318:	2b04      	cmp	r3, #4
 800631a:	d113      	bne.n	8006344 <_ux_utility_descriptor_parse+0x48>

        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 f825 	bl	800636c <_ux_utility_long_get>
 8006322:	4602      	mov	r2, r0
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3304      	adds	r3, #4
 800632c:	60fb      	str	r3, [r7, #12]
            break;                   
 800632e:	e011      	b.n	8006354 <_ux_utility_descriptor_parse+0x58>

        case 2:

            *((ULONG *) descriptor) = (ULONG) _ux_utility_short_get(raw_descriptor);
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 fa5d 	bl	80067f0 <_ux_utility_short_get>
 8006336:	4602      	mov	r2, r0
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	601a      	str	r2, [r3, #0]
            raw_descriptor += 2;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	3302      	adds	r3, #2
 8006340:	60fb      	str	r3, [r7, #12]
            break;                   
 8006342:	e007      	b.n	8006354 <_ux_utility_descriptor_parse+0x58>

        default:

            *((ULONG *) descriptor) =  (ULONG) *raw_descriptor;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	461a      	mov	r2, r3
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	601a      	str	r2, [r3, #0]
            raw_descriptor++;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	3301      	adds	r3, #1
 8006352:	60fb      	str	r3, [r7, #12]
        }

        /* Add the size of the component to the destination.  */
        descriptor +=  4;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	3304      	adds	r3, #4
 8006358:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	1e5a      	subs	r2, r3, #1
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1d3      	bne.n	800630c <_ux_utility_descriptor_parse+0x10>
    }

    /* Return to caller.  */
    return;
 8006364:	bf00      	nop
}
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	607a      	str	r2, [r7, #4]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	1c5a      	adds	r2, r3, #1
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	021b      	lsls	r3, r3, #8
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	607a      	str	r2, [r7, #4]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	041b      	lsls	r3, r3, #16
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	061b      	lsls	r3, r3, #24
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 80063aa:	68fb      	ldr	r3, [r7, #12]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08c      	sub	sp, #48	; 0x30
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ca:	d101      	bne.n	80063d0 <_ux_utility_memory_allocate+0x18>
        memory_alignment = UX_NO_ALIGN;
 80063cc:	2300      	movs	r3, #0
 80063ce:	60fb      	str	r3, [r7, #12]
    
#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b0e      	cmp	r3, #14
 80063d4:	d801      	bhi.n	80063da <_ux_utility_memory_allocate+0x22>
        memory_alignment =  UX_ALIGN_MIN;
 80063d6:	230f      	movs	r3, #15
 80063d8:	60fb      	str	r3, [r7, #12]

    /* Adjust the memory alignment since our macros are one minus the desired alignment.
       Also determine the amount of extra memory we need for the alignment, which is one
       minus the actual alignment.  */
    memory_for_alignment =  memory_alignment;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24
    memory_alignment++;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3301      	adds	r3, #1
 80063e2:	60fb      	str	r3, [r7, #12]
       now is that the memory block might not be a size that is a multiple of 16, so we need
       to add the amount of memory required such that the memory buffer after the block has 
       the correct alignment. For example, if the memory block has a size of 24, then we need
       to make sure it is placed on an 8-byte alignment that is after a 16-byte alignment so
       that the memory right after the memory block is 16-byte aligned (8 + 24 = 32).  */
    memory_size_requested =  (memory_size_requested +    UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	330f      	adds	r3, #15
 80063e8:	f023 030f 	bic.w	r3, r3, #15
 80063ec:	607b      	str	r3, [r7, #4]
    /* Try to find the best block for this memory by requesting the maximum amount of
       memory we'll need which is calculated as follows: the amount memory requested by
       the caller plus the maximum amount of memory wasted due to alignment plus 2 memory
       blocks structs - one for the new memory block we'll create for the user block and one
       that we might create if there is extra memory after doing the alignment.  */
    memory_block =  _ux_utility_memory_free_block_best_get(memory_cache_flag, memory_size_requested + memory_for_alignment + (ULONG)sizeof(UX_MEMORY_BLOCK));
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	4413      	add	r3, r2
 80063f4:	3310      	adds	r3, #16
 80063f6:	4619      	mov	r1, r3
 80063f8:	68b8      	ldr	r0, [r7, #8]
 80063fa:	f000 f99d 	bl	8006738 <_ux_utility_memory_free_block_best_get>
 80063fe:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* If the block returned is NULL, there is no free memory in the pool
       for that size. */
    if (memory_block == UX_NULL)
 8006400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d106      	bne.n	8006414 <_ux_utility_memory_allocate+0x5c>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 8006406:	2212      	movs	r2, #18
 8006408:	2108      	movs	r1, #8
 800640a:	2002      	movs	r0, #2
 800640c:	f7ff feb2 	bl	8006174 <_ux_system_error_handler>

        /* Return NULL to indicate no block was found.  */
        return(UX_NULL);
 8006410:	2300      	movs	r3, #0
 8006412:	e0bd      	b.n	8006590 <_ux_utility_memory_allocate+0x1d8>
    }

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 8006414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006416:	3310      	adds	r3, #16
 8006418:	623b      	str	r3, [r7, #32]

    /* Are we already aligned?  */
    if ((int_memory_buffer & (memory_alignment - 1)) == 0)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	1e5a      	subs	r2, r3, #1
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	4013      	ands	r3, r2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d126      	bne.n	8006474 <_ux_utility_memory_allocate+0xbc>
    {

        /* Setup the new memory block.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	3310      	adds	r3, #16
 800642a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800642c:	4413      	add	r3, r2
 800642e:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 8006430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800643c:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size - memory_size_requested - (ULONG)sizeof(UX_MEMORY_BLOCK);
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	f1a3 0210 	sub.w	r2, r3, #16
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	2200      	movs	r2, #0
 8006452:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        memory_block -> ux_memory_block_size =  memory_size_requested;
 8006454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_next =  new_memory_block;
 800645a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645c:	69fa      	ldr	r2, [r7, #28]
 800645e:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006468:	605a      	str	r2, [r3, #4]

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 800646a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3310      	adds	r3, #16
 8006470:	62bb      	str	r3, [r7, #40]	; 0x28
 8006472:	e05e      	b.n	8006532 <_ux_utility_memory_allocate+0x17a>
    {

        /* Align the buffer. The first thing we do is increment by the size of a
           memory block because we have to make sure we have enough memory for at
           least that.  */
        int_memory_buffer +=  (ULONG)sizeof(UX_MEMORY_BLOCK);
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	3310      	adds	r3, #16
 8006478:	623b      	str	r3, [r7, #32]
        int_memory_buffer +=  memory_alignment - 1;
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	4413      	add	r3, r2
 8006480:	3b01      	subs	r3, #1
 8006482:	623b      	str	r3, [r7, #32]
        int_memory_buffer &=  ~(((ALIGN_TYPE) memory_alignment) - 1);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	425b      	negs	r3, r3
 8006488:	6a3a      	ldr	r2, [r7, #32]
 800648a:	4013      	ands	r3, r2
 800648c:	623b      	str	r3, [r7, #32]

        /* Setup the new memory block. Note that its size is updated again later.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) (int_memory_buffer - (ULONG)sizeof(UX_MEMORY_BLOCK));
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	3b10      	subs	r3, #16
 8006492:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006498:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 800649a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size;
 80064a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        int_memory_buffer =  (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 80064b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b6:	3310      	adds	r3, #16
 80064b8:	623b      	str	r3, [r7, #32]
        memory_block -> ux_memory_block_next =  new_memory_block;
 80064ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064bc:	69fa      	ldr	r2, [r7, #28]
 80064be:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size =  (ULONG) ((ALIGN_TYPE) new_memory_block - int_memory_buffer);
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	1ad2      	subs	r2, r2, r3
 80064c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c8:	601a      	str	r2, [r3, #0]

        /* Update the new memory block's size.  */
        new_memory_block -> ux_memory_block_size -=  (memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK));
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	f1a3 0210 	sub.w	r2, r3, #16
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	601a      	str	r2, [r3, #0]

        /* Calculate how much memory is leftover in the new memory block after doing
           the alignment.  */
        leftover =  new_memory_block -> ux_memory_block_size - memory_size_requested;
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	61bb      	str	r3, [r7, #24]

        /* Can we fit another block after the new block? */
        if (leftover > sizeof(UX_MEMORY_BLOCK))
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2b10      	cmp	r3, #16
 80064ea:	d91c      	bls.n	8006526 <_ux_utility_memory_allocate+0x16e>
        {

            /* Setup the leftover memory block.  */
            leftover_memory_block = (UX_MEMORY_BLOCK *) (((ALIGN_TYPE) new_memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested) & 0xFFFFFFFFu);
 80064ec:	69fa      	ldr	r2, [r7, #28]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4413      	add	r3, r2
 80064f2:	3310      	adds	r3, #16
 80064f4:	617b      	str	r3, [r7, #20]
            leftover_memory_block -> ux_memory_block_next =  new_memory_block -> ux_memory_block_next;
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	689a      	ldr	r2, [r3, #8]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	609a      	str	r2, [r3, #8]
            leftover_memory_block -> ux_memory_block_previous =  new_memory_block;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	60da      	str	r2, [r3, #12]
            leftover_memory_block -> ux_memory_block_size =  leftover - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	f1a3 0210 	sub.w	r2, r3, #16
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	601a      	str	r2, [r3, #0]
            leftover_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	2200      	movs	r2, #0
 8006512:	605a      	str	r2, [r3, #4]

            new_memory_block -> ux_memory_block_next =  leftover_memory_block;
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	609a      	str	r2, [r3, #8]
            new_memory_block -> ux_memory_block_size -=  leftover;
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	1ad2      	subs	r2, r2, r3
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	601a      	str	r2, [r3, #0]
        }

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  new_memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3310      	adds	r3, #16
 800652c:	62bb      	str	r3, [r7, #40]	; 0x28

        /* The new memory block is the one we give to the user.  */
        memory_block =  new_memory_block;
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* The memory to be returned is after the block header.  */
    memory_buffer =  ((UCHAR *) memory_block) + sizeof(UX_MEMORY_BLOCK);
 8006532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006534:	3310      	adds	r3, #16
 8006536:	613b      	str	r3, [r7, #16]

    /* Clear the memory block.  */
    _ux_utility_memory_set(memory_buffer, 0, memory_size_requested); /* Use case of memset is verified. */
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	2100      	movs	r1, #0
 800653c:	6938      	ldr	r0, [r7, #16]
 800653e:	f000 f93d 	bl	80067bc <_ux_utility_memory_set>

    /* Update the memory free in the pool.  */
    if (_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 8006542:	4b15      	ldr	r3, [pc, #84]	; (8006598 <_ux_utility_memory_allocate+0x1e0>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68da      	ldr	r2, [r3, #12]
 8006548:	4b13      	ldr	r3, [pc, #76]	; (8006598 <_ux_utility_memory_allocate+0x1e0>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d108      	bne.n	8006564 <_ux_utility_memory_allocate+0x1ac>
    {

        /* There is only one memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 8006552:	4b11      	ldr	r3, [pc, #68]	; (8006598 <_ux_utility_memory_allocate+0x1e0>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6899      	ldr	r1, [r3, #8]
 8006558:	4b0f      	ldr	r3, [pc, #60]	; (8006598 <_ux_utility_memory_allocate+0x1e0>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800655e:	1a8a      	subs	r2, r1, r2
 8006560:	609a      	str	r2, [r3, #8]
 8006562:	e014      	b.n	800658e <_ux_utility_memory_allocate+0x1d6>
    }
    else
    {

       switch (memory_cache_flag)
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d108      	bne.n	800657c <_ux_utility_memory_allocate+0x1c4>
       {

            case UX_CACHE_SAFE_MEMORY:
                /* Update the amount of free memory in the cache safe memory pool.  */
                _ux_system -> ux_system_cache_safe_memory_pool_free -= memory_removed_from_pool;
 800656a:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <_ux_utility_memory_allocate+0x1e0>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6959      	ldr	r1, [r3, #20]
 8006570:	4b09      	ldr	r3, [pc, #36]	; (8006598 <_ux_utility_memory_allocate+0x1e0>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006576:	1a8a      	subs	r2, r1, r2
 8006578:	615a      	str	r2, [r3, #20]

            break;
 800657a:	e008      	b.n	800658e <_ux_utility_memory_allocate+0x1d6>

            default:
                /* Update the amount of free memory in the regular memory pool.  */
                _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 800657c:	4b06      	ldr	r3, [pc, #24]	; (8006598 <_ux_utility_memory_allocate+0x1e0>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6899      	ldr	r1, [r3, #8]
 8006582:	4b05      	ldr	r3, [pc, #20]	; (8006598 <_ux_utility_memory_allocate+0x1e0>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006588:	1a8a      	subs	r2, r1, r2
 800658a:	609a      	str	r2, [r3, #8]
            break;
 800658c:	bf00      	nop
    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

    /* The memory block pointer contains a memory area properly
       aligned.  */
    return(memory_buffer);
 800658e:	693b      	ldr	r3, [r7, #16]
}                                
 8006590:	4618      	mov	r0, r3
 8006592:	3730      	adds	r7, #48	; 0x30
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	240005e4 	.word	0x240005e4

0800659c <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00a      	beq.n	80065c6 <_ux_utility_memory_allocate_mulc_safe+0x2a>
 80065b0:	2100      	movs	r1, #0
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	fba3 2302 	umull	r2, r3, r3, r2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d000      	beq.n	80065c0 <_ux_utility_memory_allocate_mulc_safe+0x24>
 80065be:	2101      	movs	r1, #1
 80065c0:	460b      	mov	r3, r1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10a      	bne.n	80065dc <_ux_utility_memory_allocate_mulc_safe+0x40>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	fb02 f303 	mul.w	r3, r2, r3
 80065ce:	461a      	mov	r2, r3
 80065d0:	68b9      	ldr	r1, [r7, #8]
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f7ff fef0 	bl	80063b8 <_ux_utility_memory_allocate>
 80065d8:	4603      	mov	r3, r0
 80065da:	e000      	b.n	80065de <_ux_utility_memory_allocate_mulc_safe+0x42>
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b087      	sub	sp, #28
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	60f8      	str	r0, [r7, #12]
 80065ee:	60b9      	str	r1, [r7, #8]
 80065f0:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 80065fa:	e007      	b.n	800660c <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	1c53      	adds	r3, r2, #1
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	1c59      	adds	r1, r3, #1
 8006606:	6139      	str	r1, [r7, #16]
 8006608:	7812      	ldrb	r2, [r2, #0]
 800660a:	701a      	strb	r2, [r3, #0]
    while(length--)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	1e5a      	subs	r2, r3, #1
 8006610:	607a      	str	r2, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1f2      	bne.n	80065fc <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 8006616:	bf00      	nop
}
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
	...

08006624 <_ux_utility_memory_free>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
    }
#endif

    /* The memory block for this memory pointer is located right before the
       memory.  */
    memory_block =  (UX_MEMORY_BLOCK *) (((UCHAR *) memory) - sizeof(UX_MEMORY_BLOCK));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	3b10      	subs	r3, #16
 8006630:	617b      	str	r3, [r7, #20]
    
    /* Keep track of the memory returned to the pool.  */
    memory_size_returned = memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	3310      	adds	r3, #16
 8006638:	60fb      	str	r3, [r7, #12]

    /* Check this memory block to see if it valid.  */
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006642:	d00a      	beq.n	800665a <_ux_utility_memory_free+0x36>
        memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_CACHE_SAFE_MEMORY))
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	685b      	ldr	r3, [r3, #4]
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 8006648:	4a39      	ldr	r2, [pc, #228]	; (8006730 <_ux_utility_memory_free+0x10c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d005      	beq.n	800665a <_ux_utility_memory_free+0x36>

        /* Not valid. Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);
 800664e:	2219      	movs	r2, #25
 8006650:	2108      	movs	r1, #8
 8006652:	2002      	movs	r0, #2
 8006654:	f7ff fd8e 	bl	8006174 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_CORRUPTED, memory, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return to caller.  */
        return;
 8006658:	e066      	b.n	8006728 <_ux_utility_memory_free+0x104>
        _ux_system -> ux_system_cache_safe_memory_pool_alloc_total -= memory_block -> ux_memory_block_size;
    }
#endif

    /* We mark this memory block as being unused.  */
    memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2200      	movs	r2, #0
 800665e:	605a      	str	r2, [r3, #4]
    
    /* Now we must concatenate as many free blocks as possible,
       that include the blocks before and the blocks after the current
       block.  Scan memory backwards.  */

     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 8006660:	e007      	b.n	8006672 <_ux_utility_memory_free+0x4e>
     {

        /* Check if the block is free.  */            
        if (memory_block -> ux_memory_block_previous -> ux_memory_block_status == UX_MEMORY_UNUSED)
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d107      	bne.n	800667c <_ux_utility_memory_free+0x58>

            /* The memory block before is free. This will be our starting point to 
               concatenate memory.  */
            memory_block =  memory_block -> ux_memory_block_previous;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	617b      	str	r3, [r7, #20]
     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1f3      	bne.n	8006662 <_ux_utility_memory_free+0x3e>
 800667a:	e000      	b.n	800667e <_ux_utility_memory_free+0x5a>

        else

            /* The previous memory block is not free.  */
            break;
 800667c:	bf00      	nop
    }

    /* The pointer to the memory block is now our first free block. We use this 
       starting address to concatenate all the contiguous memory block.  */
    next_block =  memory_block -> ux_memory_block_next;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 8006684:	e01a      	b.n	80066bc <_ux_utility_memory_free+0x98>
    {

        /* Determine if the memory block is used.  */
        if (next_block -> ux_memory_block_status != UX_MEMORY_UNUSED)
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d006      	beq.n	800669c <_ux_utility_memory_free+0x78>
        {

            /* Yes, move to next block.  */
            memory_block -> ux_memory_block_next =  next_block;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	609a      	str	r2, [r3, #8]
            next_block -> ux_memory_block_previous =  memory_block;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	60da      	str	r2, [r3, #12]
            break;
 800669a:	e012      	b.n	80066c2 <_ux_utility_memory_free+0x9e>
        }

        memory_block -> ux_memory_block_next =  next_block -> ux_memory_block_next;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size +=  next_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4413      	add	r3, r2
 80066ae:	f103 0210 	add.w	r2, r3, #16
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	601a      	str	r2, [r3, #0]
        next_block =  next_block -> ux_memory_block_next;                       
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1e1      	bne.n	8006686 <_ux_utility_memory_free+0x62>
    }

    /* Update the memory free in the appropriate pool.  We need to know if this 
       block is in regular memory or cache safe memory.  */
    if(_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 80066c2:	4b1c      	ldr	r3, [pc, #112]	; (8006734 <_ux_utility_memory_free+0x110>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	4b1a      	ldr	r3, [pc, #104]	; (8006734 <_ux_utility_memory_free+0x110>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d108      	bne.n	80066e4 <_ux_utility_memory_free+0xc0>
    {

        /* There is only one regular memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 80066d2:	4b18      	ldr	r3, [pc, #96]	; (8006734 <_ux_utility_memory_free+0x110>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6899      	ldr	r1, [r3, #8]
 80066d8:	4b16      	ldr	r3, [pc, #88]	; (8006734 <_ux_utility_memory_free+0x110>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	440a      	add	r2, r1
 80066e0:	609a      	str	r2, [r3, #8]

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

    /* Return to caller.  */
    return;
 80066e2:	e020      	b.n	8006726 <_ux_utility_memory_free+0x102>
        memory_address = (UCHAR *) _ux_system -> ux_system_regular_memory_pool_start;
 80066e4:	4b13      	ldr	r3, [pc, #76]	; (8006734 <_ux_utility_memory_free+0x110>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	60bb      	str	r3, [r7, #8]
        if ((UCHAR *) memory_block >= memory_address && (UCHAR *) memory_block < (memory_address + _ux_system -> ux_system_regular_memory_pool_size))
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d310      	bcc.n	8006716 <_ux_utility_memory_free+0xf2>
 80066f4:	4b0f      	ldr	r3, [pc, #60]	; (8006734 <_ux_utility_memory_free+0x110>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	4413      	add	r3, r2
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	429a      	cmp	r2, r3
 8006702:	d208      	bcs.n	8006716 <_ux_utility_memory_free+0xf2>
            _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 8006704:	4b0b      	ldr	r3, [pc, #44]	; (8006734 <_ux_utility_memory_free+0x110>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6899      	ldr	r1, [r3, #8]
 800670a:	4b0a      	ldr	r3, [pc, #40]	; (8006734 <_ux_utility_memory_free+0x110>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	440a      	add	r2, r1
 8006712:	609a      	str	r2, [r3, #8]
    return;
 8006714:	e007      	b.n	8006726 <_ux_utility_memory_free+0x102>
            _ux_system -> ux_system_cache_safe_memory_pool_free += memory_size_returned;
 8006716:	4b07      	ldr	r3, [pc, #28]	; (8006734 <_ux_utility_memory_free+0x110>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6959      	ldr	r1, [r3, #20]
 800671c:	4b05      	ldr	r3, [pc, #20]	; (8006734 <_ux_utility_memory_free+0x110>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	440a      	add	r2, r1
 8006724:	615a      	str	r2, [r3, #20]
    return;
 8006726:	bf00      	nop
}
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	80000001 	.word	0x80000001
 8006734:	240005e4 	.word	0x240005e4

08006738 <_ux_utility_memory_free_block_best_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UX_MEMORY_BLOCK  *_ux_utility_memory_free_block_best_get(ULONG memory_cache_flag, 
                                                        ULONG memory_size_requested)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
UX_MEMORY_BLOCK     *memory_block;
UX_MEMORY_BLOCK     *best_memory_block;
    

    /* Reset the free memory block.  */
    best_memory_block =  UX_NULL;
 8006742:	2300      	movs	r3, #0
 8006744:	60bb      	str	r3, [r7, #8]
    
    /* Check the type of memory we need.  */
    switch (memory_cache_flag)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d003      	beq.n	8006754 <_ux_utility_memory_free_block_best_get+0x1c>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d005      	beq.n	800675e <_ux_utility_memory_free_block_best_get+0x26>
 8006752:	e009      	b.n	8006768 <_ux_utility_memory_free_block_best_get+0x30>
    {

        case UX_REGULAR_MEMORY            :

            /* Start at the beginning of the regular memory pool.  */
            memory_block =  _ux_system -> ux_system_regular_memory_pool_start;
 8006754:	4b18      	ldr	r3, [pc, #96]	; (80067b8 <_ux_utility_memory_free_block_best_get+0x80>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	60fb      	str	r3, [r7, #12]
            break;
 800675c:	e006      	b.n	800676c <_ux_utility_memory_free_block_best_get+0x34>
            
        case UX_CACHE_SAFE_MEMORY       :

            /* Start at the beginning of the cache safe memory pool.  */
            memory_block =  _ux_system -> ux_system_cache_safe_memory_pool_start;
 800675e:	4b16      	ldr	r3, [pc, #88]	; (80067b8 <_ux_utility_memory_free_block_best_get+0x80>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	60fb      	str	r3, [r7, #12]
            break;
 8006766:	e001      	b.n	800676c <_ux_utility_memory_free_block_best_get+0x34>
        
        default                            :
        
            /* Wrong memory type.  */
            return(UX_NULL);
 8006768:	2300      	movs	r3, #0
 800676a:	e01e      	b.n	80067aa <_ux_utility_memory_free_block_best_get+0x72>

    }

    /* Loop on all memory blocks from the beginning.  */
    while (memory_block != UX_NULL)
 800676c:	e019      	b.n	80067a2 <_ux_utility_memory_free_block_best_get+0x6a>
    {

        /* Check the memory block status.  */
        if (memory_block -> ux_memory_block_status == UX_MEMORY_UNUSED)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d112      	bne.n	800679c <_ux_utility_memory_free_block_best_get+0x64>
        {

            /* Check the size of this free block and see if it will 
               fit the memory requirement.  */
            if (memory_block -> ux_memory_block_size > memory_size_requested)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	429a      	cmp	r2, r3
 800677e:	d20d      	bcs.n	800679c <_ux_utility_memory_free_block_best_get+0x64>
            {
                
                /* This memory block will do. Now see if it is the best.
                   The best memory block is the one whose memory is closest
                   to the memory requested.  */
                if (best_memory_block == UX_NULL)
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d102      	bne.n	800678c <_ux_utility_memory_free_block_best_get+0x54>

                    /* Initialize the best block with the first free one.  */
                    best_memory_block =  memory_block;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	60bb      	str	r3, [r7, #8]
 800678a:	e007      	b.n	800679c <_ux_utility_memory_free_block_best_get+0x64>
                else
                {

                    if (memory_block -> ux_memory_block_size < best_memory_block -> ux_memory_block_size)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	429a      	cmp	r2, r3
 8006796:	d201      	bcs.n	800679c <_ux_utility_memory_free_block_best_get+0x64>

                        /* We have discovered a better fit block.  */
                        best_memory_block =  memory_block;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	60bb      	str	r3, [r7, #8]
                }                    
            }
        }

        /* Search the next free block until the end.  */            
        memory_block =  memory_block -> ux_memory_block_next;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	60fb      	str	r3, [r7, #12]
    while (memory_block != UX_NULL)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e2      	bne.n	800676e <_ux_utility_memory_free_block_best_get+0x36>
    }

    /* If no free memory block was found, the return value will be NULL.  */
    return(best_memory_block);        
 80067a8:	68bb      	ldr	r3, [r7, #8]
}                                
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	240005e4 	.word	0x240005e4

080067bc <_ux_utility_memory_set>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	460b      	mov	r3, r1
 80067c6:	607a      	str	r2, [r7, #4]
 80067c8:	72fb      	strb	r3, [r7, #11]

UCHAR *    work_ptr;


    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	617b      	str	r3, [r7, #20]

    /* Loop to set the memory.  */
    while(length--)
 80067ce:	e004      	b.n	80067da <_ux_utility_memory_set+0x1e>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	617a      	str	r2, [r7, #20]
 80067d6:	7afa      	ldrb	r2, [r7, #11]
 80067d8:	701a      	strb	r2, [r3, #0]
    while(length--)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	1e5a      	subs	r2, r3, #1
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1f5      	bne.n	80067d0 <_ux_utility_memory_set+0x14>
    }

    /* Return to caller.  */
    return; 
 80067e4:	bf00      	nop
}
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	607a      	str	r2, [r7, #4]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	81fb      	strh	r3, [r7, #14]
    value |=  (USHORT)(*address << 8);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	b29b      	uxth	r3, r3
 8006808:	021b      	lsls	r3, r3, #8
 800680a:	b29a      	uxth	r2, r3
 800680c:	89fb      	ldrh	r3, [r7, #14]
 800680e:	4313      	orrs	r3, r2
 8006810:	81fb      	strh	r3, [r7, #14]

    /* Return to caller.  */
    return((ULONG) value);
 8006812:	89fb      	ldrh	r3, [r7, #14]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <_ux_utility_string_length_check>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]

UINT    string_length;


    if (string == UX_NULL)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <_ux_utility_string_length_check+0x16>
        return(UX_ERROR);
 8006832:	23ff      	movs	r3, #255	; 0xff
 8006834:	e01d      	b.n	8006872 <_ux_utility_string_length_check+0x52>

    string_length = 0;
 8006836:	2300      	movs	r3, #0
 8006838:	617b      	str	r3, [r7, #20]

    while (1)
    {

        if (string[string_length] == '\0')
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	4413      	add	r3, r2
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00d      	beq.n	8006862 <_ux_utility_string_length_check+0x42>
            break;

        string_length++;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	3301      	adds	r3, #1
 800684a:	617b      	str	r3, [r7, #20]
        if (string_length > max_string_length)
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	429a      	cmp	r2, r3
 8006852:	d9f2      	bls.n	800683a <_ux_utility_string_length_check+0x1a>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 8006854:	22ff      	movs	r2, #255	; 0xff
 8006856:	2108      	movs	r1, #8
 8006858:	2002      	movs	r0, #2
 800685a:	f7ff fc8b 	bl	8006174 <_ux_system_error_handler>

            return(UX_ERROR);
 800685e:	23ff      	movs	r3, #255	; 0xff
 8006860:	e007      	b.n	8006872 <_ux_utility_string_length_check+0x52>
            break;
 8006862:	bf00      	nop
        }
    }

    if (string_length_ptr)
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <_ux_utility_string_length_check+0x50>
        *string_length_ptr = string_length;
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	601a      	str	r2, [r3, #0]

    return(UX_SUCCESS); 
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <_ux_device_class_hid_activate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b088      	sub	sp, #32
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]

UX_SLAVE_INTERFACE                      *interface_ptr;
UX_SLAVE_CLASS                          *class_ptr;
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_ENDPOINT                       *endpoint_interrupt;
UX_SLAVE_ENDPOINT                       *endpoint_in = UX_NULL;
 8006882:	2300      	movs	r3, #0
 8006884:	61bb      	str	r3, [r7, #24]
#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)
UX_SLAVE_ENDPOINT                       *endpoint_out = UX_NULL;
#endif

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006890:	613b      	str	r3, [r7, #16]

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	60fb      	str	r3, [r7, #12]

    /* Store the class instance into the interface.  */
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)hid;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	609a      	str	r2, [r3, #8]

    /* Now the opposite, store the interface in the class instance.  */
    hid -> ux_slave_class_hid_interface =  interface_ptr;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	601a      	str	r2, [r3, #0]

    /* Locate the endpoints.  */
    endpoint_interrupt =  interface_ptr -> ux_slave_interface_first_endpoint;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a8:	61fb      	str	r3, [r7, #28]

    /* Check if interrupt IN endpoint exists.  */
    while (endpoint_interrupt != UX_NULL)
 80068aa:	e011      	b.n	80068d0 <_ux_device_class_hid_activate+0x56>
    {
        if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bmAttributes &
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	f003 0303 	and.w	r3, r3, #3
 80068b4:	2b03      	cmp	r3, #3
 80068b6:	d108      	bne.n	80068ca <_ux_device_class_hid_activate+0x50>
             UX_MASK_ENDPOINT_TYPE) == UX_INTERRUPT_ENDPOINT)
        {
            if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bEndpointAddress &
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <_ux_device_class_hid_activate+0x50>
                 UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
            {

                /* It's interrupt IN endpoint we need.  */
                endpoint_in = endpoint_interrupt;
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	61bb      	str	r3, [r7, #24]
#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)
                if (endpoint_out != UX_NULL)
#endif
                    break;
 80068c8:	e005      	b.n	80068d6 <_ux_device_class_hid_activate+0x5c>
            }
#endif
        }

        /* Try next endpoint.  */
        endpoint_interrupt =  endpoint_interrupt -> ux_slave_endpoint_next_endpoint;
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	61fb      	str	r3, [r7, #28]
    while (endpoint_interrupt != UX_NULL)
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1ea      	bne.n	80068ac <_ux_device_class_hid_activate+0x32>
    }

    /* Check if we found right endpoint.  */
    if (endpoint_in == UX_NULL)
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <_ux_device_class_hid_activate+0x66>
        return (UX_ERROR);
 80068dc:	23ff      	movs	r3, #255	; 0xff
 80068de:	e01c      	b.n	800691a <_ux_device_class_hid_activate+0xa0>
    UX_ASSERT(UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH >=
              endpoint_in -> ux_slave_endpoint_transfer_request.
                            ux_slave_transfer_request_transfer_length);

    /* Default HID protocol is report protocol.  */
    hid -> ux_device_class_hid_protocol = UX_DEVICE_CLASS_HID_PROTOCOL_REPORT;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	2201      	movs	r2, #1
 80068e4:	665a      	str	r2, [r3, #100]	; 0x64

    /* Save the endpoints in the hid instance.  */
    hid -> ux_device_class_hid_interrupt_endpoint         = endpoint_in;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	605a      	str	r2, [r3, #4]
    /* Resume thread.  */
    _ux_device_thread_resume(&class_ptr -> ux_slave_class_thread);
#else

    /* Reset event buffered for background transfer.  */
    _ux_utility_memory_set((VOID *)&hid -> ux_device_class_hid_event, 0,
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	3330      	adds	r3, #48	; 0x30
 80068f0:	222c      	movs	r2, #44	; 0x2c
 80068f2:	2100      	movs	r1, #0
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff ff61 	bl	80067bc <_ux_utility_memory_set>
                                            sizeof(UX_SLAVE_CLASS_HID_EVENT)); /* Use case of memset is verified. */
    hid -> ux_device_class_hid_event.ux_device_class_hid_event_length =
                    endpoint_in -> ux_slave_endpoint_transfer_request.
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    hid -> ux_device_class_hid_event.ux_device_class_hid_event_length =
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	659a      	str	r2, [r3, #88]	; 0x58
                                    ux_slave_transfer_request_transfer_length;

    /* Reset event sending state.  */
    hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	2200      	movs	r2, #0
 8006906:	629a      	str	r2, [r3, #40]	; 0x28
#endif


    /* If there is a activate function call it.  */
    if (hid -> ux_slave_class_hid_instance_activate != UX_NULL)
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d003      	beq.n	8006918 <_ux_device_class_hid_activate+0x9e>
    {

        /* Invoke the application.  */
        hid -> ux_slave_class_hid_instance_activate(hid);
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	6938      	ldr	r0, [r7, #16]
 8006916:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, hid, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3720      	adds	r7, #32
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <_ux_device_class_hid_control_request>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08c      	sub	sp, #48	; 0x30
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
ULONG                       descriptor_type;
UCHAR                       duration;
UX_SLAVE_CLASS_HID          *hid;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800692c:	4b5a      	ldr	r3, [pc, #360]	; (8006a98 <_ux_device_class_hid_control_request+0x174>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3324      	adds	r3, #36	; 0x24
 8006932:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8006934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006936:	336c      	adds	r3, #108	; 0x6c
 8006938:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800693a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
    request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8006942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006944:	333c      	adds	r3, #60	; 0x3c
 8006946:	3302      	adds	r3, #2
 8006948:	4618      	mov	r0, r3
 800694a:	f7ff ff51 	bl	80067f0 <_ux_utility_short_get>
 800694e:	6238      	str	r0, [r7, #32]
    request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 8006950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006952:	333c      	adds	r3, #60	; 0x3c
 8006954:	3304      	adds	r3, #4
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff ff4a 	bl	80067f0 <_ux_utility_short_get>
 800695c:	61f8      	str	r0, [r7, #28]
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 800695e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006960:	333c      	adds	r3, #60	; 0x3c
 8006962:	3306      	adds	r3, #6
 8006964:	4618      	mov	r0, r3
 8006966:	f7ff ff43 	bl	80067f0 <_ux_utility_short_get>
 800696a:	61b8      	str	r0, [r7, #24]

    /* Duration - upper byte of wValue.  */
    duration       =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 800696c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006972:	75fb      	strb	r3, [r7, #23]
    
     /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	613b      	str	r3, [r7, #16]
    
    /* Get the storage instance from this class container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800697e:	60fb      	str	r3, [r7, #12]

    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	3b01      	subs	r3, #1
 8006984:	2b0a      	cmp	r3, #10
 8006986:	d87e      	bhi.n	8006a86 <_ux_device_class_hid_control_request+0x162>
 8006988:	a201      	add	r2, pc, #4	; (adr r2, 8006990 <_ux_device_class_hid_control_request+0x6c>)
 800698a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698e:	bf00      	nop
 8006990:	080069bd 	.word	0x080069bd
 8006994:	080069ef 	.word	0x080069ef
 8006998:	08006a67 	.word	0x08006a67
 800699c:	08006a87 	.word	0x08006a87
 80069a0:	08006a87 	.word	0x08006a87
 80069a4:	080069e1 	.word	0x080069e1
 80069a8:	08006a87 	.word	0x08006a87
 80069ac:	08006a87 	.word	0x08006a87
 80069b0:	080069cb 	.word	0x080069cb
 80069b4:	080069ef 	.word	0x080069ef
 80069b8:	08006a7f 	.word	0x08006a7f
    {

        case UX_DEVICE_CLASS_HID_COMMAND_GET_REPORT:

            /* Send the requested report to the host.  */
            _ux_device_class_hid_report_get(hid, request_value, request_index, request_length);
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	69fa      	ldr	r2, [r7, #28]
 80069c0:	6a39      	ldr	r1, [r7, #32]
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 fabc 	bl	8006f40 <_ux_device_class_hid_report_get>
            break;
 80069c8:	e060      	b.n	8006a8c <_ux_device_class_hid_control_request+0x168>

        case UX_DEVICE_CLASS_HID_COMMAND_SET_REPORT:

            /* Extract the descriptor type.  */
            descriptor_type =  (request_value & 0xff00) >> 8;
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	0a1b      	lsrs	r3, r3, #8
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	60bb      	str	r3, [r7, #8]

            /* Get the requested report from the host.  */
            _ux_device_class_hid_report_set(hid, descriptor_type, request_index, request_length);
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	69fa      	ldr	r2, [r7, #28]
 80069d6:	68b9      	ldr	r1, [r7, #8]
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 fb35 	bl	8007048 <_ux_device_class_hid_report_set>
            break;
 80069de:	e055      	b.n	8006a8c <_ux_device_class_hid_control_request+0x168>

        case UX_GET_DESCRIPTOR:

            /* Send the requested descriptor to the host.  */
            _ux_device_class_hid_descriptor_send(hid, request_value, request_index, request_length);
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	69fa      	ldr	r2, [r7, #28]
 80069e4:	6a39      	ldr	r1, [r7, #32]
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 f878 	bl	8006adc <_ux_device_class_hid_descriptor_send>
            break;            
 80069ec:	e04e      	b.n	8006a8c <_ux_device_class_hid_control_request+0x168>
        case UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE:
        case UX_DEVICE_CLASS_HID_COMMAND_SET_IDLE:

            /* Ignore Report ID for now.  */

            if (request == UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE)
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d10b      	bne.n	8006a0c <_ux_device_class_hid_control_request+0xe8>
            {

                /* Send the idle rate.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_event_idle_rate;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80069f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	b2d2      	uxtb	r2, r2
 80069fe:	701a      	strb	r2, [r3, #0]
                _ux_device_stack_transfer_request(transfer_request, 1, request_length);
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	2101      	movs	r1, #1
 8006a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a06:	f003 f81a 	bl	8009a3e <_ux_device_stack_transfer_request>
                        _ux_device_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_IDLE_RATE, UX_OR);
#endif
                    }
                }
            }
            break;
 8006a0a:	e03e      	b.n	8006a8a <_ux_device_class_hid_control_request+0x166>
                if ((UCHAR)hid -> ux_device_class_hid_event_idle_rate != duration)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	7dfa      	ldrb	r2, [r7, #23]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d038      	beq.n	8006a8a <_ux_device_class_hid_control_request+0x166>
                    hid -> ux_device_class_hid_event_idle_rate = duration;
 8006a18:	7dfa      	ldrb	r2, [r7, #23]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	65da      	str	r2, [r3, #92]	; 0x5c
                    if (duration == 0)
 8006a1e:	7dfb      	ldrb	r3, [r7, #23]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d104      	bne.n	8006a2e <_ux_device_class_hid_control_request+0x10a>
                        hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f04f 32ff 	mov.w	r2, #4294967295
 8006a2a:	661a      	str	r2, [r3, #96]	; 0x60
            break;
 8006a2c:	e02d      	b.n	8006a8a <_ux_device_class_hid_control_request+0x166>
                        hid -> ux_device_class_hid_event_wait_timeout = (ULONG)UX_MS_TO_TICK((ULONG)duration << 2u);
 8006a2e:	7dfb      	ldrb	r3, [r7, #23]
 8006a30:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8006a34:	fb02 f303 	mul.w	r3, r2, r3
 8006a38:	4a18      	ldr	r2, [pc, #96]	; (8006a9c <_ux_device_class_hid_control_request+0x178>)
 8006a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3e:	099a      	lsrs	r2, r3, #6
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	661a      	str	r2, [r3, #96]	; 0x60
                        if (hid -> ux_device_class_hid_event_wait_timeout == 0)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d104      	bne.n	8006a56 <_ux_device_class_hid_control_request+0x132>
                            hid -> ux_device_class_hid_event_wait_timeout ++;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	661a      	str	r2, [r3, #96]	; 0x60
                        if (hid -> ux_device_class_hid_event_state != UX_STATE_WAIT)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5a:	2b05      	cmp	r3, #5
 8006a5c:	d015      	beq.n	8006a8a <_ux_device_class_hid_control_request+0x166>
                            hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 8006a64:	e011      	b.n	8006a8a <_ux_device_class_hid_control_request+0x166>

        case UX_DEVICE_CLASS_HID_COMMAND_GET_PROTOCOL:

            /* Send the protocol.  */
            *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_protocol;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	701a      	strb	r2, [r3, #0]
            _ux_device_stack_transfer_request(transfer_request, 1, request_length);
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	2101      	movs	r1, #1
 8006a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a78:	f002 ffe1 	bl	8009a3e <_ux_device_stack_transfer_request>
            break;
 8006a7c:	e006      	b.n	8006a8c <_ux_device_class_hid_control_request+0x168>

        case UX_DEVICE_CLASS_HID_COMMAND_SET_PROTOCOL:

            /* Accept the protocol.  */
            hid -> ux_device_class_hid_protocol = request_value;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a3a      	ldr	r2, [r7, #32]
 8006a82:	665a      	str	r2, [r3, #100]	; 0x64
            break;
 8006a84:	e002      	b.n	8006a8c <_ux_device_class_hid_control_request+0x168>

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 8006a86:	23ff      	movs	r3, #255	; 0xff
 8006a88:	e001      	b.n	8006a8e <_ux_device_class_hid_control_request+0x16a>
            break;
 8006a8a:	bf00      	nop
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3730      	adds	r7, #48	; 0x30
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	240005e8 	.word	0x240005e8
 8006a9c:	10624dd3 	.word	0x10624dd3

08006aa0 <_ux_device_class_hid_deactivate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_HID         *hid;
UX_SLAVE_CLASS             *class_ptr;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ab2:	60bb      	str	r3, [r7, #8]

    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(hid -> ux_device_class_hid_interrupt_endpoint, UX_TRANSFER_BUS_RESET);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	2126      	movs	r1, #38	; 0x26
 8006aba:	4618      	mov	r0, r3
 8006abc:	f002 ffae 	bl	8009a1c <_ux_device_stack_transfer_all_request_abort>

    /* If there is a deactivate function call it.  */
    if (hid -> ux_slave_class_hid_instance_deactivate != UX_NULL)
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d003      	beq.n	8006ad0 <_ux_device_class_hid_deactivate+0x30>
    {
        /* Invoke the application.  */
        hid -> ux_slave_class_hid_instance_deactivate(hid);
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	68b8      	ldr	r0, [r7, #8]
 8006ace:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(hid);

    /* Return completion status.  */
    return(UX_SUCCESS);
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <_ux_device_class_hid_descriptor_send>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_descriptor_send(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08e      	sub	sp, #56	; 0x38
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
UX_SLAVE_TRANSFER               *transfer_request;
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR *                         device_framework;
UCHAR *                         device_framework_end;
ULONG                           descriptor_length;
UINT                            status =  UX_ERROR;
 8006aea:	23ff      	movs	r3, #255	; 0xff
 8006aec:	633b      	str	r3, [r7, #48]	; 0x30
ULONG                           length;
UCHAR                           interface_number = 0xFF;
 8006aee:	23ff      	movs	r3, #255	; 0xff
 8006af0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_DESCRIPTOR_SEND, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8006af4:	4b5a      	ldr	r3, [pc, #360]	; (8006c60 <_ux_device_class_hid_descriptor_send+0x184>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8006afa:	4b59      	ldr	r3, [pc, #356]	; (8006c60 <_ux_device_class_hid_descriptor_send+0x184>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3324      	adds	r3, #36	; 0x24
 8006b00:	623b      	str	r3, [r7, #32]
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	333c      	adds	r3, #60	; 0x3c
 8006b06:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	3330      	adds	r3, #48	; 0x30
 8006b0c:	61bb      	str	r3, [r7, #24]

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2203      	movs	r2, #3
 8006b12:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	0a1b      	lsrs	r3, r3, #8
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	60bb      	str	r3, [r7, #8]

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b21      	cmp	r3, #33	; 0x21
 8006b20:	d003      	beq.n	8006b2a <_ux_device_class_hid_descriptor_send+0x4e>
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2b22      	cmp	r3, #34	; 0x22
 8006b26:	d060      	beq.n	8006bea <_ux_device_class_hid_descriptor_send+0x10e>
 8006b28:	e08b      	b.n	8006c42 <_ux_device_class_hid_descriptor_send+0x166>
    {

    case UX_DEVICE_CLASS_HID_DESCRIPTOR_HID:
    
        /* We should have a HID descriptor as part of the config descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8006b2a:	4b4d      	ldr	r3, [pc, #308]	; (8006c60 <_ux_device_class_hid_descriptor_send+0x184>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006b32:	637b      	str	r3, [r7, #52]	; 0x34
        device_framework_end = device_framework + _ux_system_slave -> ux_system_slave_device_framework_length;
 8006b34:	4b4a      	ldr	r3, [pc, #296]	; (8006c60 <_ux_device_class_hid_descriptor_send+0x184>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8006b3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b3e:	4413      	add	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]

        /* Parse the device framework and locate the HID descriptor.  
           There is only one HID descriptor.  */
        while (device_framework < device_framework_end)
 8006b42:	e042      	b.n	8006bca <_ux_device_class_hid_descriptor_send+0xee>
        {

            /* Get the type of the current descriptor.  */
            descriptor_type =  *(device_framework + 1);
 8006b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b46:	3301      	adds	r3, #1
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	60bb      	str	r3, [r7, #8]

            /* And its length.  */
            descriptor_length =  (ULONG) *device_framework;
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	617b      	str	r3, [r7, #20]

            /* Save interface number for later check.  */
            if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2b04      	cmp	r3, #4
 8006b56:	d103      	bne.n	8006b60 <_ux_device_class_hid_descriptor_send+0x84>
                interface_number = *(device_framework + 2);
 8006b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5a:	789b      	ldrb	r3, [r3, #2]
 8006b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            /* Check if this is a HID report descriptor.  */
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2b21      	cmp	r3, #33	; 0x21
 8006b64:	d12d      	bne.n	8006bc2 <_ux_device_class_hid_descriptor_send+0xe6>
                (interface_number == (UCHAR)request_index))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	b2db      	uxtb	r3, r3
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 8006b6a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d127      	bne.n	8006bc2 <_ux_device_class_hid_descriptor_send+0xe6>
            {

                /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                   and do not return more than what is allowed.  */
                if (descriptor_length < host_length)
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d202      	bcs.n	8006b80 <_ux_device_class_hid_descriptor_send+0xa4>
                    length =  descriptor_length;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b7e:	e001      	b.n	8006b84 <_ux_device_class_hid_descriptor_send+0xa8>
                else                            
                    length =  host_length;                
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Check buffer length, since descriptor length may exceed buffer...  */
                if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8006b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b8a:	d90c      	bls.n	8006ba6 <_ux_device_class_hid_descriptor_send+0xca>
                {

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 8006b8c:	2212      	movs	r2, #18
 8006b8e:	2107      	movs	r1, #7
 8006b90:	2002      	movs	r0, #2
 8006b92:	f7ff faef 	bl	8006174 <_ux_system_error_handler>

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, hid, 0, 0, UX_TRACE_ERRORS, 0, 0)

                    /* Stall the endpoint.  */
                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	69fa      	ldr	r2, [r7, #28]
 8006b9c:	2114      	movs	r1, #20
 8006b9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ba0:	4798      	blx	r3
 8006ba2:	6338      	str	r0, [r7, #48]	; 0x30
                    break;
 8006ba4:	e015      	b.n	8006bd2 <_ux_device_class_hid_descriptor_send+0xf6>
                }

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7ff fd19 	bl	80065e6 <_ux_utility_memory_copy>
                                            device_framework, length); /* Use case of memcpy is verified. */

                /* We can return the configuration descriptor.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bb8:	69b8      	ldr	r0, [r7, #24]
 8006bba:	f002 ff40 	bl	8009a3e <_ux_device_stack_transfer_request>
 8006bbe:	6338      	str	r0, [r7, #48]	; 0x30
                break;
 8006bc0:	e007      	b.n	8006bd2 <_ux_device_class_hid_descriptor_send+0xf6>
                
            }

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 8006bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	637b      	str	r3, [r7, #52]	; 0x34
        while (device_framework < device_framework_end)
 8006bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d3b8      	bcc.n	8006b44 <_ux_device_class_hid_descriptor_send+0x68>
        }

        /* Stall the endpoint if not found or corrupt.  */
        if (device_framework >= device_framework_end)
 8006bd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d33b      	bcc.n	8006c52 <_ux_device_class_hid_descriptor_send+0x176>
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	69fa      	ldr	r2, [r7, #28]
 8006be0:	2114      	movs	r1, #20
 8006be2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006be4:	4798      	blx	r3
 8006be6:	6338      	str	r0, [r7, #48]	; 0x30

        break;
 8006be8:	e033      	b.n	8006c52 <_ux_device_class_hid_descriptor_send+0x176>

    case UX_DEVICE_CLASS_HID_DESCRIPTOR_REPORT:
        
        /* Get the length of entire configuration descriptor.  */
        descriptor_length =  hid -> ux_device_class_hid_report_length;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	617b      	str	r3, [r7, #20]

        /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
           and do not return more than what is allowed.  */
        if (descriptor_length < host_length)
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d202      	bcs.n	8006bfe <_ux_device_class_hid_descriptor_send+0x122>
            length =  descriptor_length;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bfc:	e001      	b.n	8006c02 <_ux_device_class_hid_descriptor_send+0x126>
        else                            
            length =  host_length;                
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check buffer length, since total descriptors length may exceed buffer...  */
        if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c08:	d90c      	bls.n	8006c24 <_ux_device_class_hid_descriptor_send+0x148>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 8006c0a:	2212      	movs	r2, #18
 8006c0c:	2107      	movs	r1, #7
 8006c0e:	2002      	movs	r0, #2
 8006c10:	f7ff fab0 	bl	8006174 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, hid, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* Stall the endpoint.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	69fa      	ldr	r2, [r7, #28]
 8006c1a:	2114      	movs	r1, #20
 8006c1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c1e:	4798      	blx	r3
 8006c20:	6338      	str	r0, [r7, #48]	; 0x30
            break;
 8006c22:	e017      	b.n	8006c54 <_ux_device_class_hid_descriptor_send+0x178>
        }

        /* Copy the device descriptor into the transfer request memory.  */
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	68d8      	ldr	r0, [r3, #12]
                                    hid -> ux_device_class_hid_report_address, length); /* Use case of memcpy is verified. */
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	69db      	ldr	r3, [r3, #28]
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8006c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c2e:	4619      	mov	r1, r3
 8006c30:	f7ff fcd9 	bl	80065e6 <_ux_utility_memory_copy>

        /* We can return the report descriptor.  */
        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c38:	69b8      	ldr	r0, [r7, #24]
 8006c3a:	f002 ff00 	bl	8009a3e <_ux_device_stack_transfer_request>
 8006c3e:	6338      	str	r0, [r7, #48]	; 0x30
        break;
 8006c40:	e008      	b.n	8006c54 <_ux_device_class_hid_descriptor_send+0x178>
        /* Not treated for now.  Fall through and Stall endpoint.  */
        
    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	69fa      	ldr	r2, [r7, #28]
 8006c48:	2114      	movs	r1, #20
 8006c4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c4c:	4798      	blx	r3
        return(UX_ERROR);
 8006c4e:	23ff      	movs	r3, #255	; 0xff
 8006c50:	e001      	b.n	8006c56 <_ux_device_class_hid_descriptor_send+0x17a>
        break;
 8006c52:	bf00      	nop
    }

    /* Return the status to the caller.  */
    return(status);
 8006c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3738      	adds	r7, #56	; 0x38
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	240005e8 	.word	0x240005e8

08006c64 <_ux_device_class_hid_entry>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	2b06      	cmp	r3, #6
 8006c74:	d836      	bhi.n	8006ce4 <_ux_device_class_hid_entry+0x80>
 8006c76:	a201      	add	r2, pc, #4	; (adr r2, 8006c7c <_ux_device_class_hid_entry+0x18>)
 8006c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7c:	08006cb1 	.word	0x08006cb1
 8006c80:	08006cc1 	.word	0x08006cc1
 8006c84:	08006ccd 	.word	0x08006ccd
 8006c88:	08006cd9 	.word	0x08006cd9
 8006c8c:	08006c99 	.word	0x08006c99
 8006c90:	08006ce5 	.word	0x08006ce5
 8006c94:	08006ca5 	.word	0x08006ca5
    {

    case UX_SLAVE_CLASS_COMMAND_INITIALIZE:

        /* Call the init function of the HID class.  */
        status =  _ux_device_class_hid_initialize(command);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f8e1 	bl	8006e60 <_ux_device_class_hid_initialize>
 8006c9e:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	e020      	b.n	8006ce6 <_ux_device_class_hid_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the HID class.  */
        status =  _ux_device_class_hid_uninitialize(command);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fab1 	bl	800720c <_ux_device_class_hid_uninitialize>
 8006caa:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	e01a      	b.n	8006ce6 <_ux_device_class_hid_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_DEVICE_CLASS_HID_CLASS)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	2b03      	cmp	r3, #3
 8006cb6:	d101      	bne.n	8006cbc <_ux_device_class_hid_entry+0x58>
            return(UX_SUCCESS);
 8006cb8:	2300      	movs	r3, #0
 8006cba:	e014      	b.n	8006ce6 <_ux_device_class_hid_entry+0x82>
        else
            return(UX_NO_CLASS_MATCH);
 8006cbc:	2357      	movs	r3, #87	; 0x57
 8006cbe:	e012      	b.n	8006ce6 <_ux_device_class_hid_entry+0x82>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the hid thread needs to be activated.  */
        status =  _ux_device_class_hid_activate(command);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7ff fdda 	bl	800687a <_ux_device_class_hid_activate>
 8006cc6:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	e00c      	b.n	8006ce6 <_ux_device_class_hid_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the hid thread canceled.  */
        status =  _ux_device_class_hid_deactivate(command);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7ff fee7 	bl	8006aa0 <_ux_device_class_hid_deactivate>
 8006cd2:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	e006      	b.n	8006ce6 <_ux_device_class_hid_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_hid_control_request(command);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7ff fe23 	bl	8006924 <_ux_device_class_hid_control_request>
 8006cde:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	e000      	b.n	8006ce6 <_ux_device_class_hid_entry+0x82>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 8006ce4:	2354      	movs	r3, #84	; 0x54
    }   
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop

08006cf0 <_ux_device_class_hid_event_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_get(UX_SLAVE_CLASS_HID *hid, 
                                      UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_GET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */                   
    device =  &_ux_system_slave -> ux_system_slave_device;
 8006cfa:	4b21      	ldr	r3, [pc, #132]	; (8006d80 <_ux_device_class_hid_event_get+0x90>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3324      	adds	r3, #36	; 0x24
 8006d00:	60fb      	str	r3, [r7, #12]
    
    /* Check the device state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	d001      	beq.n	8006d0e <_ux_device_class_hid_event_get+0x1e>
        return(UX_DEVICE_HANDLE_UNKNOWN);
 8006d0a:	2350      	movs	r3, #80	; 0x50
 8006d0c:	e033      	b.n	8006d76 <_ux_device_class_hid_event_get+0x86>

    /* Check if the head and the tail of the event array is the same.  */
    if (hid -> ux_device_class_hid_event_array_head == 
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hid -> ux_device_class_hid_event_array_tail)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if (hid -> ux_device_class_hid_event_array_head == 
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d101      	bne.n	8006d1e <_ux_device_class_hid_event_get+0x2e>

        /* No event to report.  */
        return(UX_ERROR);        
 8006d1a:	23ff      	movs	r3, #255	; 0xff
 8006d1c:	e02b      	b.n	8006d76 <_ux_device_class_hid_event_get+0x86>

    /* There is an event to report, get the current pointer to the event.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_tail;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d22:	60bb      	str	r3, [r7, #8]

    /* Keep the event data length inside buffer area.  */
    if (current_hid_event -> ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d28:	2b20      	cmp	r3, #32
 8006d2a:	d902      	bls.n	8006d32 <_ux_device_class_hid_event_get+0x42>
        current_hid_event -> ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	629a      	str	r2, [r3, #40]	; 0x28

    /* fill in the event structure from the user.  */
    hid_event -> ux_device_class_hid_event_length =  current_hid_event -> ux_device_class_hid_event_length;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	629a      	str	r2, [r3, #40]	; 0x28
    _ux_utility_memory_copy(hid_event -> ux_device_class_hid_event_buffer, current_hid_event -> ux_device_class_hid_event_buffer,
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	f103 0008 	add.w	r0, r3, #8
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	f103 0108 	add.w	r1, r3, #8
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	f7ff fc4b 	bl	80065e6 <_ux_utility_memory_copy>
                                current_hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

    /* Adjust the tail pointer.  Check if we are at the end.  */
    if ((current_hid_event + 1) == hid -> ux_device_class_hid_event_array_end)
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d104      	bne.n	8006d68 <_ux_device_class_hid_event_get+0x78>

        /* We are at the end, go back to the beginning.  */
        hid -> ux_device_class_hid_event_array_tail =  hid -> ux_device_class_hid_event_array;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	671a      	str	r2, [r3, #112]	; 0x70
 8006d66:	e005      	b.n	8006d74 <_ux_device_class_hid_event_get+0x84>
        
    else        
        /* We are not at the end, increment the tail position.  */
        hid -> ux_device_class_hid_event_array_tail++;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return event status to the user.  */
    return(UX_SUCCESS);
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	240005e8 	.word	0x240005e8

08006d84 <_ux_device_class_hid_event_set>:
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_set(UX_SLAVE_CLASS_HID *hid, 
                                      UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_SET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Current position of the head.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d92:	60bb      	str	r3, [r7, #8]
    
    /* If the pointer is NULL, the round robin buffer has not been activated.  */
    if (current_hid_event == UX_NULL)
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <_ux_device_class_hid_event_set+0x1a>
        return (UX_ERROR);
 8006d9a:	23ff      	movs	r3, #255	; 0xff
 8006d9c:	e05b      	b.n	8006e56 <_ux_device_class_hid_event_set+0xd2>
    
    /* Calculate the next position.  */
    if ((current_hid_event + 1) == hid -> ux_device_class_hid_event_array_end)
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d103      	bne.n	8006db4 <_ux_device_class_hid_event_set+0x30>

        /* We are at the end, go back to the beginning.  */
        next_hid_event =  hid -> ux_device_class_hid_event_array;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006db0:	60fb      	str	r3, [r7, #12]
 8006db2:	e002      	b.n	8006dba <_ux_device_class_hid_event_set+0x36>
        
    else        

        /* We are not at the end, increment the head position.  */
        next_hid_event = current_hid_event + 1;
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	332c      	adds	r3, #44	; 0x2c
 8006db8:	60fb      	str	r3, [r7, #12]
    

    /* Any place left for this event ? */
    if (next_hid_event == hid -> ux_device_class_hid_event_array_tail)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d101      	bne.n	8006dc8 <_ux_device_class_hid_event_set+0x44>
        return (UX_ERROR);
 8006dc4:	23ff      	movs	r3, #255	; 0xff
 8006dc6:	e046      	b.n	8006e56 <_ux_device_class_hid_event_set+0xd2>

    /* There is an event to report, get the current pointer to the event.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dcc:	60bb      	str	r3, [r7, #8]

    /* Update the head.  */
    hid -> ux_device_class_hid_event_array_head = next_hid_event;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Check if this event has a report ID.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d121      	bne.n	8006e20 <_ux_device_class_hid_event_set+0x9c>
    {

        /* Yes, there's a report ID. Check to see if our event buffer can also
           fit the extra byte.  */
        if (hid_event -> ux_device_class_hid_event_length + 1 > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de0:	3301      	adds	r3, #1
 8006de2:	2b20      	cmp	r3, #32
 8006de4:	d906      	bls.n	8006df4 <_ux_device_class_hid_event_set+0x70>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 8006de6:	2212      	movs	r2, #18
 8006de8:	2107      	movs	r1, #7
 8006dea:	2002      	movs	r0, #2
 8006dec:	f7ff f9c2 	bl	8006174 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* Return overflow error.  */
            return(UX_MEMORY_INSUFFICIENT);
 8006df0:	2312      	movs	r3, #18
 8006df2:	e030      	b.n	8006e56 <_ux_device_class_hid_event_set+0xd2>
        }

        /* Store the report ID.  */
        *current_hid_event -> ux_device_class_hid_event_buffer =  (UCHAR)(hid_event -> ux_device_class_hid_event_report_id);  
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	721a      	strb	r2, [r3, #8]
                
        /* Store the data itself.  */
        _ux_utility_memory_copy(current_hid_event -> ux_device_class_hid_event_buffer + 1, hid_event -> ux_device_class_hid_event_buffer,
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	3308      	adds	r3, #8
 8006e02:	1c58      	adds	r0, r3, #1
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	f103 0108 	add.w	r1, r3, #8
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f7ff fbe9 	bl	80065e6 <_ux_utility_memory_copy>
                                hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */
    
        /* fill in the event structure from the user.  */
        current_hid_event -> ux_device_class_hid_event_length =  hid_event -> ux_device_class_hid_event_length + 1;    
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e18:	1c5a      	adds	r2, r3, #1
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	629a      	str	r2, [r3, #40]	; 0x28
 8006e1e:	e00e      	b.n	8006e3e <_ux_device_class_hid_event_set+0xba>
    }
    else
    {
    
        /* No report ID to consider.  */
        _ux_utility_memory_copy(current_hid_event -> ux_device_class_hid_event_buffer, hid_event -> ux_device_class_hid_event_buffer,
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f103 0008 	add.w	r0, r3, #8
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	f103 0108 	add.w	r1, r3, #8
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e30:	461a      	mov	r2, r3
 8006e32:	f7ff fbd8 	bl	80065e6 <_ux_utility_memory_copy>
                                hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

        /* fill in the event structure from the user.  */
        current_hid_event -> ux_device_class_hid_event_length = hid_event -> ux_device_class_hid_event_length;    
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	629a      	str	r2, [r3, #40]	; 0x28
    }

#if defined(UX_DEVICE_STANDALONE)

    /* Set state machine to start sending if no transfer on going.  */
    if (hid -> ux_device_class_hid_event_state != UX_STATE_WAIT &&
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e42:	2b05      	cmp	r3, #5
 8006e44:	d006      	beq.n	8006e54 <_ux_device_class_hid_event_set+0xd0>
        hid -> ux_device_class_hid_event_state != UX_STATE_EXIT)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if (hid -> ux_device_class_hid_event_state != UX_STATE_WAIT &&
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d002      	beq.n	8006e54 <_ux_device_class_hid_event_set+0xd0>
        hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	629a      	str	r2, [r3, #40]	; 0x28
    /* Set an event to wake up the interrupt thread.  */
    _ux_device_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_EVENT, UX_OR);                
#endif

    /* Return event status to the user.  */
    return(UX_SUCCESS);
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
	...

08006e60 <_ux_device_class_hid_initialize>:
/*                                            fixed compile warnings,     */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS_HID_PARAMETER            *hid_parameter;
UX_SLAVE_CLASS                          *class_ptr;
UINT                                    status = UX_SUCCESS;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	617b      	str	r3, [r7, #20]


    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	613b      	str	r3, [r7, #16]

    /* Create an instance of the device hid class.  */
    hid =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_HID));
 8006e72:	2278      	movs	r2, #120	; 0x78
 8006e74:	2100      	movs	r1, #0
 8006e76:	2000      	movs	r0, #0
 8006e78:	f7ff fa9e 	bl	80063b8 <_ux_utility_memory_allocate>
 8006e7c:	60f8      	str	r0, [r7, #12]

    /* Check for successful allocation.  */
    if (hid == UX_NULL)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <_ux_device_class_hid_initialize+0x28>
        return(UX_MEMORY_INSUFFICIENT);
 8006e84:	2312      	movs	r3, #18
 8006e86:	e054      	b.n	8006f32 <_ux_device_class_hid_initialize+0xd2>

    /* Save the address of the HID instance inside the HID container.  */
    class_ptr -> ux_slave_class_instance = (VOID *) hid;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	649a      	str	r2, [r3, #72]	; 0x48
                    UX_DEVICE_CLASS_HID_THREAD_STACK_SIZE, UX_THREAD_PRIORITY_CLASS,
                    UX_THREAD_PRIORITY_CLASS, UX_NO_TIME_SLICE, UX_DONT_START);
#else

    /* Set task function.  */
    class_ptr -> ux_slave_class_task_function = _ux_device_class_hid_tasks_run;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	4a2a      	ldr	r2, [pc, #168]	; (8006f3c <_ux_device_class_hid_initialize+0xdc>)
 8006e92:	651a      	str	r2, [r3, #80]	; 0x50
#endif

    /* Check the creation of this thread.  */
    if (status == UX_SUCCESS)
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d142      	bne.n	8006f20 <_ux_device_class_hid_initialize+0xc0>
#if !defined(UX_DEVICE_STANDALONE)
        UX_THREAD_EXTENSION_PTR_SET(&(class_ptr -> ux_slave_class_thread), class_ptr)
#endif

        /* Get the pointer to the application parameters for the hid class.  */
        hid_parameter =  command -> ux_slave_class_command_parameter;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	60bb      	str	r3, [r7, #8]

        /* Store all the application parameter information about the report.  */
        hid -> ux_device_class_hid_report_address             = hid_parameter -> ux_device_class_hid_parameter_report_address;
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	61da      	str	r2, [r3, #28]
        hid -> ux_device_class_hid_report_length              = hid_parameter -> ux_device_class_hid_parameter_report_length;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	625a      	str	r2, [r3, #36]	; 0x24
        hid -> ux_device_class_hid_report_id                  = hid_parameter -> ux_device_class_hid_parameter_report_id;
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	68da      	ldr	r2, [r3, #12]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	621a      	str	r2, [r3, #32]

        /* Store the callback function.  */
        hid -> ux_device_class_hid_callback                   = hid_parameter -> ux_device_class_hid_parameter_callback;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	695a      	ldr	r2, [r3, #20]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	60da      	str	r2, [r3, #12]
        hid -> ux_device_class_hid_get_callback               = hid_parameter -> ux_device_class_hid_parameter_get_callback;
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	699a      	ldr	r2, [r3, #24]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	611a      	str	r2, [r3, #16]

        /* Create the event array.  */
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_HID_EVENT), UX_DEVICE_CLASS_HID_MAX_EVENTS_QUEUE);
 8006ec8:	2310      	movs	r3, #16
 8006eca:	222c      	movs	r2, #44	; 0x2c
 8006ecc:	2100      	movs	r1, #0
 8006ece:	2000      	movs	r0, #0
 8006ed0:	f7ff fb64 	bl	800659c <_ux_utility_memory_allocate_mulc_safe>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	669a      	str	r2, [r3, #104]	; 0x68

        /* Check for successful allocation.  */
        if (hid -> ux_device_class_hid_event_array != UX_NULL)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d01b      	beq.n	8006f1a <_ux_device_class_hid_initialize+0xba>
        {

            /* Initialize the head and tail of the notification round robin buffers. 
               At first, the head and tail are pointing to the beginning of the array.  */
            hid -> ux_device_class_hid_event_array_head =  hid -> ux_device_class_hid_event_array;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	66da      	str	r2, [r3, #108]	; 0x6c
            hid -> ux_device_class_hid_event_array_tail =  hid -> ux_device_class_hid_event_array;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	671a      	str	r2, [r3, #112]	; 0x70
            hid -> ux_device_class_hid_event_array_end  =  hid -> ux_device_class_hid_event_array + UX_DEVICE_CLASS_HID_MAX_EVENTS_QUEUE;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ef6:	f503 7230 	add.w	r2, r3, #704	; 0x2c0
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	675a      	str	r2, [r3, #116]	; 0x74

            /* Store the start and stop signals if needed by the application.  */
            hid -> ux_slave_class_hid_instance_activate = hid_parameter -> ux_slave_class_hid_instance_activate;
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	615a      	str	r2, [r3, #20]
            hid -> ux_slave_class_hid_instance_deactivate = hid_parameter -> ux_slave_class_hid_instance_deactivate;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	619a      	str	r2, [r3, #24]

            /* By default no event wait timeout.  */
            hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f04f 32ff 	mov.w	r2, #4294967295
 8006f14:	661a      	str	r2, [r3, #96]	; 0x60

                /* There is error, delete event flags.  */
                _ux_utility_event_flags_delete(&hid -> ux_device_class_hid_event_flags_group);
#endif
#else
                return(status);
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	e00b      	b.n	8006f32 <_ux_device_class_hid_initialize+0xd2>
            _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
#endif

        }
        else
            status =  UX_MEMORY_INSUFFICIENT;
 8006f1a:	2312      	movs	r3, #18
 8006f1c:	617b      	str	r3, [r7, #20]
 8006f1e:	e001      	b.n	8006f24 <_ux_device_class_hid_initialize+0xc4>
        /* Delete thread.  */
        _ux_device_thread_delete(&class_ptr -> ux_slave_class_thread);
#endif
    }
    else
        status = (UX_THREAD_ERROR);
 8006f20:	2316      	movs	r3, #22
 8006f22:	617b      	str	r3, [r7, #20]
    if (class_ptr -> ux_slave_class_thread_stack)
        _ux_utility_memory_free(class_ptr -> ux_slave_class_thread_stack);
#endif

    /* Unmount instance. */
    class_ptr -> ux_slave_class_instance =  UX_NULL;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	2200      	movs	r2, #0
 8006f28:	649a      	str	r2, [r3, #72]	; 0x48

    /* Free HID instance. */
    _ux_utility_memory_free(hid);
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f7ff fb7a 	bl	8006624 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 8006f30:	697b      	ldr	r3, [r7, #20]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	080070dd 	.word	0x080070dd

08006f40 <_ux_device_class_hid_report_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_get(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b096      	sub	sp, #88	; 0x58
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
 8006f4c:	603b      	str	r3, [r7, #0]
UCHAR                           report_id;
UCHAR                           report_type;
UX_SLAVE_CLASS_HID_EVENT        hid_event;
ULONG                           hid_event_length;
UCHAR                           *buffer;
UINT                            status =  UX_ERROR;
 8006f4e:	23ff      	movs	r3, #255	; 0xff
 8006f50:	653b      	str	r3, [r7, #80]	; 0x50

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_GET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8006f52:	4b3c      	ldr	r3, [pc, #240]	; (8007044 <_ux_device_class_hid_report_get+0x104>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3324      	adds	r3, #36	; 0x24
 8006f58:	64fb      	str	r3, [r7, #76]	; 0x4c
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8006f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f5c:	333c      	adds	r3, #60	; 0x3c
 8006f5e:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8006f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f62:	3330      	adds	r3, #48	; 0x30
 8006f64:	647b      	str	r3, [r7, #68]	; 0x44

    /* Get report ID (wValue.lower) and report type (wValue.higher).  */
    report_id   = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 0);
 8006f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f6c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    report_type = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 8006f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f72:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8006f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f7c:	2203      	movs	r2, #3
 8006f7e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Prepare the event data payload from the hid event structure.  Get a pointer to the buffer area.  */
    buffer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8006f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Initialize event fields.  */
    hid_event.ux_device_class_hid_event_report_id   = report_id;
 8006f86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006f8a:	613b      	str	r3, [r7, #16]
    hid_event.ux_device_class_hid_event_report_type = report_type;
 8006f8c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8006f90:	617b      	str	r3, [r7, #20]
    hid_event.ux_device_class_hid_event_length      = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 8006f92:	2320      	movs	r3, #32
 8006f94:	63bb      	str	r3, [r7, #56]	; 0x38

    /* If it's input report without ID try to get it from event queue head.  */
    if (report_type == UX_DEVICE_CLASS_HID_REPORT_TYPE_INPUT &&
 8006f96:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d10b      	bne.n	8006fb6 <_ux_device_class_hid_report_get+0x76>
        hid -> ux_device_class_hid_report_id != UX_TRUE)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
    if (report_type == UX_DEVICE_CLASS_HID_REPORT_TYPE_INPUT &&
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d007      	beq.n	8006fb6 <_ux_device_class_hid_report_get+0x76>

        /* Check if we have an event to report.  */
        status = _ux_device_class_hid_event_get(hid, &hid_event);
 8006fa6:	f107 0310 	add.w	r3, r7, #16
 8006faa:	4619      	mov	r1, r3
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f7ff fe9f 	bl	8006cf0 <_ux_device_class_hid_event_get>
 8006fb2:	6538      	str	r0, [r7, #80]	; 0x50
 8006fb4:	e00b      	b.n	8006fce <_ux_device_class_hid_report_get+0x8e>
    /* Try to get event from application callback.  */
    else
    {
        
        /* Let application fill event.  */
        if (hid -> ux_device_class_hid_get_callback != UX_NULL)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d007      	beq.n	8006fce <_ux_device_class_hid_report_get+0x8e>
            status = hid -> ux_device_class_hid_get_callback(hid, &hid_event);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	f107 0210 	add.w	r2, r7, #16
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	4798      	blx	r3
 8006fcc:	6538      	str	r0, [r7, #80]	; 0x50
    }

    if (status == UX_SUCCESS)
 8006fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d11d      	bne.n	8007010 <_ux_device_class_hid_report_get+0xd0>
    {

        /* Get the length to send back to the host.  */
        if (host_length < hid_event.ux_device_class_hid_event_length)
 8006fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d202      	bcs.n	8006fe2 <_ux_device_class_hid_report_get+0xa2>
            hid_event_length =  host_length;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	657b      	str	r3, [r7, #84]	; 0x54
 8006fe0:	e001      	b.n	8006fe6 <_ux_device_class_hid_report_get+0xa6>
        else
            hid_event_length =  hid_event.ux_device_class_hid_event_length;
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	657b      	str	r3, [r7, #84]	; 0x54
        if (hid_event_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8006fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fec:	d902      	bls.n	8006ff4 <_ux_device_class_hid_report_get+0xb4>
            hid_event_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 8006fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ff2:	657b      	str	r3, [r7, #84]	; 0x54

        /* First reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 8006ff4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006ffa:	f7ff fbdf 	bl	80067bc <_ux_utility_memory_set>

        /* Copy the event buffer into the target buffer.  */
        _ux_utility_memory_copy(buffer, hid_event.ux_device_class_hid_event_buffer, hid_event_length); /* Use case of memcpy is verified. */
 8006ffe:	f107 0310 	add.w	r3, r7, #16
 8007002:	3308      	adds	r3, #8
 8007004:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007006:	4619      	mov	r1, r3
 8007008:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800700a:	f7ff faec 	bl	80065e6 <_ux_utility_memory_copy>
 800700e:	e00d      	b.n	800702c <_ux_device_class_hid_report_get+0xec>
    {

        /* There's no event, so send back zero'd memory.  */

        /* Get the length to send back to the host.  */
        if (host_length < UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2bff      	cmp	r3, #255	; 0xff
 8007014:	d802      	bhi.n	800701c <_ux_device_class_hid_report_get+0xdc>
            hid_event_length =  host_length;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	657b      	str	r3, [r7, #84]	; 0x54
 800701a:	e002      	b.n	8007022 <_ux_device_class_hid_report_get+0xe2>
        else
            hid_event_length =  UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 800701c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007020:	657b      	str	r3, [r7, #84]	; 0x54

        /* Reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 8007022:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007024:	2100      	movs	r1, #0
 8007026:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007028:	f7ff fbc8 	bl	80067bc <_ux_utility_memory_set>
    }

    /* We can send the report.  */
    status =  _ux_device_stack_transfer_request(transfer_request, hid_event_length, host_length);
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007030:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007032:	f002 fd04 	bl	8009a3e <_ux_device_stack_transfer_request>
 8007036:	6538      	str	r0, [r7, #80]	; 0x50

    /* Return the status to the caller.  */
    return(status);
 8007038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800703a:	4618      	mov	r0, r3
 800703c:	3758      	adds	r7, #88	; 0x58
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	240005e8 	.word	0x240005e8

08007048 <_ux_device_class_hid_report_set>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_set(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b094      	sub	sp, #80	; 0x50
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_SET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8007056:	4b20      	ldr	r3, [pc, #128]	; (80070d8 <_ux_device_class_hid_report_set+0x90>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3324      	adds	r3, #36	; 0x24
 800705c:	64bb      	str	r3, [r7, #72]	; 0x48
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800705e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007060:	333c      	adds	r3, #60	; 0x3c
 8007062:	647b      	str	r3, [r7, #68]	; 0x44

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8007064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007066:	3330      	adds	r3, #48	; 0x30
 8007068:	643b      	str	r3, [r7, #64]	; 0x40
    
    /* Set the event type to OUTPUT.  */
    hid_event.ux_device_class_hid_event_report_type =  descriptor_type;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	61bb      	str	r3, [r7, #24]
    
    /* Get HID data address.  */
    hid_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 800706e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for report ID in this HID descriptor.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d10a      	bne.n	8007092 <_ux_device_class_hid_report_set+0x4a>
    {
        /* Set the report ID, First byte of data payload.  */
        hid_event.ux_device_class_hid_event_report_id = (ULONG) *hid_buffer;
 800707c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	617b      	str	r3, [r7, #20]

        /* Set the length = total length - report ID. */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length -1;
 8007082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	3b01      	subs	r3, #1
 8007088:	63fb      	str	r3, [r7, #60]	; 0x3c
    
        /* Set HID data after report ID.  */
        hid_buffer++;
 800708a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800708c:	3301      	adds	r3, #1
 800708e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007090:	e004      	b.n	800709c <_ux_device_class_hid_report_set+0x54>
    }
        
    else
    {    
        /* Set the report ID, not used here.  */
        hid_event.ux_device_class_hid_event_report_id = 0;
 8007092:	2300      	movs	r3, #0
 8007094:	617b      	str	r3, [r7, #20]

        /* Set the length.  */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length;
 8007096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
        
    /* Copy the buffer received from the host.  Check for overflow. */
    if (hid_event.ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 800709c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800709e:	2b20      	cmp	r3, #32
 80070a0:	d901      	bls.n	80070a6 <_ux_device_class_hid_report_set+0x5e>
    
        /* Overflow detected.  */
        hid_event.ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;        
 80070a2:	2320      	movs	r3, #32
 80070a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        
    /* Now we can safely copy the payload.  */
    _ux_utility_memory_copy(hid_event.ux_device_class_hid_event_buffer, hid_buffer, 
 80070a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070a8:	f107 0314 	add.w	r3, r7, #20
 80070ac:	3308      	adds	r3, #8
 80070ae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7ff fa98 	bl	80065e6 <_ux_utility_memory_copy>
                                hid_event.ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

    /* If there is a callback defined by the application, send the hid event to it.  */
    if (hid -> ux_device_class_hid_callback != UX_NULL)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d006      	beq.n	80070cc <_ux_device_class_hid_report_set+0x84>
    
        /* Callback exists. */
        hid -> ux_device_class_hid_callback(hid, &hid_event);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	f107 0214 	add.w	r2, r7, #20
 80070c6:	4611      	mov	r1, r2
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	4798      	blx	r3
        
    /* Return the status to the caller.  */
    return(UX_SUCCESS);
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3750      	adds	r7, #80	; 0x50
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	240005e8 	.word	0x240005e8

080070dc <_ux_device_class_hid_tasks_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_hid_tasks_run(VOID *instance)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08a      	sub	sp, #40	; 0x28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
ULONG                       tick, elapsed;
UINT                        status;


    /* Get HID instance.  */
    hid = (UX_SLAVE_CLASS_HID *) instance;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80070e8:	4b47      	ldr	r3, [pc, #284]	; (8007208 <_ux_device_class_hid_tasks_run+0x12c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3324      	adds	r3, #36	; 0x24
 80070ee:	623b      	str	r3, [r7, #32]

    /* Check if the device is configured.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d004      	beq.n	8007102 <_ux_device_class_hid_tasks_run+0x26>
    {
        hid -> ux_device_class_hid_event_state = UX_STATE_EXIT;
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	2201      	movs	r2, #1
 80070fc:	629a      	str	r2, [r3, #40]	; 0x28
        return(UX_STATE_EXIT);
 80070fe:	2301      	movs	r3, #1
 8007100:	e07d      	b.n	80071fe <_ux_device_class_hid_tasks_run+0x122>
    if (hid -> ux_device_class_hid_receiver)
        hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_tasks_run(hid);
#endif

    /* Run HID state machine.  */
    switch(hid -> ux_device_class_hid_event_state)
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007106:	2b05      	cmp	r3, #5
 8007108:	d875      	bhi.n	80071f6 <_ux_device_class_hid_tasks_run+0x11a>
 800710a:	a201      	add	r2, pc, #4	; (adr r2, 8007110 <_ux_device_class_hid_tasks_run+0x34>)
 800710c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007110:	0800712d 	.word	0x0800712d
 8007114:	08007129 	.word	0x08007129
 8007118:	0800713d 	.word	0x0800713d
 800711c:	080071f7 	.word	0x080071f7
 8007120:	080071f7 	.word	0x080071f7
 8007124:	080071c3 	.word	0x080071c3
    {
    case UX_STATE_EXIT:

        /* There is nothing to do in this state.  */
        return (UX_STATE_EXIT);
 8007128:	2301      	movs	r3, #1
 800712a:	e068      	b.n	80071fe <_ux_device_class_hid_tasks_run+0x122>

    case UX_STATE_RESET:

        /* Start timeout waiting.  */
        hid -> ux_device_class_hid_event_wait_start = _ux_utility_time_get();
 800712c:	f002 fe3f 	bl	8009dae <_ux_utility_time_get>
 8007130:	4602      	mov	r2, r0
 8007132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007134:	62da      	str	r2, [r3, #44]	; 0x2c
        hid -> ux_device_class_hid_event_state = UX_STATE_IDLE;
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	2202      	movs	r2, #2
 800713a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Fall through.  */
    case UX_STATE_IDLE:

        /* Check if there is event ready.  */
        hid_event = &hid -> ux_device_class_hid_event;
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	3330      	adds	r3, #48	; 0x30
 8007140:	61fb      	str	r3, [r7, #28]
        status = _ux_device_class_hid_event_get(hid, hid_event);
 8007142:	69f9      	ldr	r1, [r7, #28]
 8007144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007146:	f7ff fdd3 	bl	8006cf0 <_ux_device_class_hid_event_get>
 800714a:	61b8      	str	r0, [r7, #24]

        /* If there is no event, check idle rate.  */
        if (status != UX_SUCCESS)
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d01f      	beq.n	8007192 <_ux_device_class_hid_tasks_run+0xb6>
        {

            /* Check idle rate setting.  */
            if (hid -> ux_device_class_hid_event_wait_timeout == UX_WAIT_FOREVER)
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715a:	d101      	bne.n	8007160 <_ux_device_class_hid_tasks_run+0x84>
            {

                /* There is no background idle report, keep waiting.  */
                return(UX_STATE_IDLE);
 800715c:	2302      	movs	r3, #2
 800715e:	e04e      	b.n	80071fe <_ux_device_class_hid_tasks_run+0x122>
            }

            /* Check wait timeout.  */
            tick = _ux_utility_time_get();
 8007160:	f002 fe25 	bl	8009dae <_ux_utility_time_get>
 8007164:	6178      	str	r0, [r7, #20]
            elapsed = _ux_utility_time_elapsed(hid -> ux_device_class_hid_event_wait_start, tick);
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	429a      	cmp	r2, r3
 800716e:	d304      	bcc.n	800717a <_ux_device_class_hid_tasks_run+0x9e>
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	e003      	b.n	8007182 <_ux_device_class_hid_tasks_run+0xa6>
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	613b      	str	r3, [r7, #16]
            if (elapsed < hid -> ux_device_class_hid_event_wait_timeout)
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	429a      	cmp	r2, r3
 800718c:	d201      	bcs.n	8007192 <_ux_device_class_hid_tasks_run+0xb6>
            {

                /* Keep waiting.  */
                return(UX_STATE_IDLE);
 800718e:	2302      	movs	r3, #2
 8007190:	e035      	b.n	80071fe <_ux_device_class_hid_tasks_run+0x122>

            /* Send the last event in buffer.  */
        }

        /* Prepare the request to send event.  */
        trans = &hid -> ux_device_class_hid_interrupt_endpoint ->
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	3330      	adds	r3, #48	; 0x30
 8007198:	60fb      	str	r3, [r7, #12]
                                            ux_slave_endpoint_transfer_request;
        _ux_utility_memory_copy(trans -> ux_slave_transfer_request_data_pointer,
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	68d8      	ldr	r0, [r3, #12]
                                hid_event -> ux_device_class_hid_event_buffer,
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	f103 0108 	add.w	r1, r3, #8
        _ux_utility_memory_copy(trans -> ux_slave_transfer_request_data_pointer,
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a8:	461a      	mov	r2, r3
 80071aa:	f7ff fa1c 	bl	80065e6 <_ux_utility_memory_copy>
                                hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */
        trans -> ux_slave_transfer_request_requested_length =
                                hid_event -> ux_device_class_hid_event_length;
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        trans -> ux_slave_transfer_request_requested_length =
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	615a      	str	r2, [r3, #20]
        UX_SLAVE_TRANSFER_STATE_RESET(trans);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	631a      	str	r2, [r3, #48]	; 0x30
        hid -> ux_device_class_hid_event_state = UX_STATE_WAIT;
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	2205      	movs	r2, #5
 80071c0:	629a      	str	r2, [r3, #40]	; 0x28

        /* Fall through.  */
    case UX_STATE_WAIT:

        /* Run transfer state machine.  */
        trans = &hid -> ux_device_class_hid_interrupt_endpoint ->
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	3330      	adds	r3, #48	; 0x30
 80071c8:	60fb      	str	r3, [r7, #12]
                                            ux_slave_endpoint_transfer_request;
        hid_event = &hid -> ux_device_class_hid_event;
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	3330      	adds	r3, #48	; 0x30
 80071ce:	61fb      	str	r3, [r7, #28]
        status = _ux_device_stack_transfer_run(trans,
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d8:	461a      	mov	r2, r3
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f002 fc4e 	bl	8009a7c <_ux_device_stack_transfer_run>
 80071e0:	61b8      	str	r0, [r7, #24]
                                hid_event -> ux_device_class_hid_event_length,
                                hid_event -> ux_device_class_hid_event_length);

        /* Any error or success case.  */
        if (status <= UX_STATE_NEXT)
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d804      	bhi.n	80071f2 <_ux_device_class_hid_tasks_run+0x116>
        {

            /* Next round.  */
            hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	2200      	movs	r2, #0
 80071ec:	629a      	str	r2, [r3, #40]	; 0x28
            return(UX_STATE_IDLE);
 80071ee:	2302      	movs	r3, #2
 80071f0:	e005      	b.n	80071fe <_ux_device_class_hid_tasks_run+0x122>
        }

        /* Wait.  */
        return(UX_STATE_WAIT);
 80071f2:	2305      	movs	r3, #5
 80071f4:	e003      	b.n	80071fe <_ux_device_class_hid_tasks_run+0x122>

    default:

        /* Just go back to normal state.  */
        hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	2200      	movs	r2, #0
 80071fa:	629a      	str	r2, [r3, #40]	; 0x28
        return(UX_STATE_IDLE);
 80071fc:	2302      	movs	r3, #2
    }
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3728      	adds	r7, #40	; 0x28
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	240005e8 	.word	0x240005e8

0800720c <_ux_device_class_hid_uninitialize>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS                          *class_ptr;


    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800721e:	60bb      	str	r3, [r7, #8]
    /* Delete the event flag group for the hid class.  */
    _ux_device_event_flags_delete(&hid -> ux_device_class_hid_event_flags_group);
#endif

    /* Free memory for the array. */
    _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007224:	4618      	mov	r0, r3
 8007226:	f7ff f9fd 	bl	8006624 <_ux_utility_memory_free>
        hid -> ux_device_class_hid_receiver ->
            ux_device_class_hid_receiver_uninitialize(hid -> ux_device_class_hid_receiver);
#endif

    /* Free the resources.  */
    _ux_utility_memory_free(hid);
 800722a:	68b8      	ldr	r0, [r7, #8]
 800722c:	f7ff f9fa 	bl	8006624 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(UX_SUCCESS);
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <_ux_dcd_stm32_setup_in>:
#include "ux_device_stack.h"
#include "ux_utility.h"


static inline void _ux_dcd_stm32_setup_in(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b082      	sub	sp, #8
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	6039      	str	r1, [r7, #0]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2280      	movs	r2, #128	; 0x80
 8007248:	729a      	strb	r2, [r3, #10]

    /* Set the state to TX.  */
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	721a      	strb	r2, [r3, #8]

    /* Call the Control Transfer dispatcher.  */
    _ux_device_stack_control_request_process(transfer_request);
 8007250:	6838      	ldr	r0, [r7, #0]
 8007252:	f001 fb59 	bl	8008908 <_ux_device_stack_control_request_process>
}
 8007256:	bf00      	nop
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <_ux_dcd_stm32_setup_out>:

static inline void _ux_dcd_stm32_setup_out(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                           PCD_HandleTypeDef *hpcd)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	60b9      	str	r1, [r7, #8]
 8007268:	607a      	str	r2, [r7, #4]

    /* Set the completion code to no error.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2200      	movs	r2, #0
 800726e:	625a      	str	r2, [r3, #36]	; 0x24

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2280      	movs	r2, #128	; 0x80
 8007274:	729a      	strb	r2, [r3, #10]

    /* We are using a Control endpoint on a OUT transaction and there was a payload.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8007276:	68b8      	ldr	r0, [r7, #8]
 8007278:	f001 fb46 	bl	8008908 <_ux_device_stack_control_request_process>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d108      	bne.n	8007294 <_ux_dcd_stm32_setup_out+0x36>
    {

        /* Set the state to STATUS phase TX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2203      	movs	r2, #3
 8007286:	721a      	strb	r2, [r3, #8]

        /* Arm the status transfer.  */
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 8007288:	2300      	movs	r3, #0
 800728a:	2200      	movs	r2, #0
 800728c:	2100      	movs	r1, #0
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7fa fdfc 	bl	8001e8c <HAL_PCD_EP_Transmit>
    }
}
 8007294:	bf00      	nop
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <_ux_dcd_stm32_setup_status>:

static inline void _ux_dcd_stm32_setup_status(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                              PCD_HandleTypeDef *hpcd)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
            in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2280      	movs	r2, #128	; 0x80
 80072ac:	729a      	strb	r2, [r3, #10]

    /* Call the Control Transfer dispatcher.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 80072ae:	68b8      	ldr	r0, [r7, #8]
 80072b0:	f001 fb2a 	bl	8008908 <_ux_device_stack_control_request_process>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d108      	bne.n	80072cc <_ux_dcd_stm32_setup_status+0x30>
    {

        /* Set the state to STATUS RX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2204      	movs	r2, #4
 80072be:	721a      	strb	r2, [r3, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 80072c0:	2300      	movs	r3, #0
 80072c2:	2200      	movs	r2, #0
 80072c4:	2100      	movs	r1, #0
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7fa fde0 	bl	8001e8c <HAL_PCD_EP_Transmit>
    }
}
 80072cc:	bf00      	nop
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <_ux_dcd_stm32_setup_isr_pending>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
VOID     _ux_dcd_stm32_setup_isr_pending(UX_DCD_STM32 *dcd_stm32)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
UX_DCD_STM32_ED         *ed;
UX_SLAVE_TRANSFER       *transfer_request;
ULONG                   ed_status;

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3304      	adds	r3, #4
 80072e0:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3330      	adds	r3, #48	; 0x30
 80072e8:	613b      	str	r3, [r7, #16]

    UX_DISABLE
 80072ea:	f002 fd3f 	bl	8009d6c <_ux_utility_interrupt_disable>
 80072ee:	60f8      	str	r0, [r7, #12]

    /* Get the ED status.  */
    ed_status = ed -> ux_dcd_stm32_ed_status;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	60bb      	str	r3, [r7, #8]

    /* Check if Task is pending to avoid re-entry.  */
    if (ed_status & UX_DCD_STM32_ED_STATUS_TASK_PENDING)
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d003      	beq.n	8007308 <_ux_dcd_stm32_setup_isr_pending+0x34>
    {
        UX_RESTORE
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f002 fd44 	bl	8009d8e <_ux_utility_interrupt_restore>
        return;
 8007306:	e03f      	b.n	8007388 <_ux_dcd_stm32_setup_isr_pending+0xb4>
    }

    /* Check if SETUP ISR is pending.  */
    ed_status &= UX_DCD_STM32_ED_STATUS_SETUP;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800730e:	60bb      	str	r3, [r7, #8]
    if (ed_status == 0)
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d103      	bne.n	800731e <_ux_dcd_stm32_setup_isr_pending+0x4a>
    {
        UX_RESTORE
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f002 fd39 	bl	8009d8e <_ux_utility_interrupt_restore>
        return;
 800731c:	e034      	b.n	8007388 <_ux_dcd_stm32_setup_isr_pending+0xb4>
    }
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_SETUP;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	605a      	str	r2, [r3, #4]
    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_TASK_PENDING;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	605a      	str	r2, [r3, #4]
    UX_RESTORE
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f002 fd29 	bl	8009d8e <_ux_utility_interrupt_restore>

    /* Handle different SETUP cases.  */
    switch(ed_status)
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007342:	d004      	beq.n	800734e <_ux_dcd_stm32_setup_isr_pending+0x7a>
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800734a:	d005      	beq.n	8007358 <_ux_dcd_stm32_setup_isr_pending+0x84>
 800734c:	e00d      	b.n	800736a <_ux_dcd_stm32_setup_isr_pending+0x96>
    {
    case UX_DCD_STM32_ED_STATUS_SETUP_IN:
        _ux_dcd_stm32_setup_in(ed, transfer_request);
 800734e:	6939      	ldr	r1, [r7, #16]
 8007350:	6978      	ldr	r0, [r7, #20]
 8007352:	f7ff ff72 	bl	800723a <_ux_dcd_stm32_setup_in>
        break;
 8007356:	e011      	b.n	800737c <_ux_dcd_stm32_setup_isr_pending+0xa8>

    case UX_DCD_STM32_ED_STATUS_SETUP_OUT:
        _ux_dcd_stm32_setup_out(ed, transfer_request, dcd_stm32 -> pcd_handle);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800735e:	461a      	mov	r2, r3
 8007360:	6939      	ldr	r1, [r7, #16]
 8007362:	6978      	ldr	r0, [r7, #20]
 8007364:	f7ff ff7b 	bl	800725e <_ux_dcd_stm32_setup_out>
        break;
 8007368:	e008      	b.n	800737c <_ux_dcd_stm32_setup_isr_pending+0xa8>

    default: /* UX_DCD_STM32_ED_STATUS_SETUP_STATUS  */
        _ux_dcd_stm32_setup_status(ed, transfer_request, dcd_stm32 -> pcd_handle);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007370:	461a      	mov	r2, r3
 8007372:	6939      	ldr	r1, [r7, #16]
 8007374:	6978      	ldr	r0, [r7, #20]
 8007376:	f7ff ff91 	bl	800729c <_ux_dcd_stm32_setup_status>
        break;
 800737a:	bf00      	nop
    }

    /* Task is done.  */
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_TASK_PENDING;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	605a      	str	r2, [r3, #4]
}
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
	...

08007390 <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b088      	sub	sp, #32
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8007398:	4b3e      	ldr	r3, [pc, #248]	; (8007494 <HAL_PCD_SetupStageCallback+0x104>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	3304      	adds	r3, #4
 80073a8:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3330      	adds	r3, #48	; 0x30
 80073b0:	613b      	str	r3, [r7, #16]

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80073be:	2208      	movs	r2, #8
 80073c0:	4619      	mov	r1, r3
 80073c2:	f7ff f910 	bl	80065e6 <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	2200      	movs	r2, #0
 80073ca:	619a      	str	r2, [r3, #24]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	2201      	movs	r2, #1
 80073d0:	605a      	str	r2, [r3, #4]

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	2200      	movs	r2, #0
 80073d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f023 020e 	bic.w	r2, r3, #14
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ea:	b25b      	sxtb	r3, r3
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	da06      	bge.n	80073fe <HAL_PCD_SetupStageCallback+0x6e>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	605a      	str	r2, [r3, #4]
 80073fc:	e046      	b.n	800748c <HAL_PCD_SetupStageCallback+0xfc>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2200      	movs	r2, #0
 8007402:	729a      	strb	r2, [r3, #10]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10b      	bne.n	8007426 <HAL_PCD_SetupStageCallback+0x96>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 8007414:	2b00      	cmp	r3, #0
 8007416:	d106      	bne.n	8007426 <HAL_PCD_SetupStageCallback+0x96>
        {
#if defined(UX_DEVICE_STANDALONE)
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	605a      	str	r2, [r3, #4]
 8007424:	e032      	b.n	800748c <HAL_PCD_SetupStageCallback+0xfc>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	60fb      	str	r3, [r7, #12]

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	333c      	adds	r3, #60	; 0x3c
 8007430:	3306      	adds	r3, #6
 8007432:	4618      	mov	r0, r3
 8007434:	f7ff f9dc 	bl	80067f0 <_ux_utility_short_get>
 8007438:	4602      	mov	r2, r0
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	615a      	str	r2, [r3, #20]

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007446:	d90d      	bls.n	8007464 <HAL_PCD_SetupStageCallback+0xd4>
            {

                /* No space available, stall the endpoint.  */
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 8007448:	68f9      	ldr	r1, [r7, #12]
 800744a:	69b8      	ldr	r0, [r7, #24]
 800744c:	f000 fade 	bl	8007a0c <_ux_dcd_stm32_endpoint_stall>

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2200      	movs	r2, #0
 8007454:	721a      	strb	r2, [r3, #8]

#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	605a      	str	r2, [r3, #4]
#endif

                /* We are done.  */
                return;
 8007462:	e013      	b.n	800748c <HAL_PCD_SetupStageCallback+0xfc>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	2200      	movs	r2, #0
 8007468:	619a      	str	r2, [r3, #24]

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	68da      	ldr	r2, [r3, #12]
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	611a      	str	r2, [r3, #16]

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Receive(hpcd,
 8007476:	b2d9      	uxtb	r1, r3
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Receive(hpcd,
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7fa fcaf 	bl	8001de4 <HAL_PCD_EP_Receive>
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	2202      	movs	r2, #2
 800748a:	721a      	strb	r2, [r3, #8]
            }
        }
    }
}
 800748c:	3720      	adds	r7, #32
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	240005e8 	.word	0x240005e8

08007498 <HAL_PCD_DataInStageCallback>:
/*                                            fixed transmit ZLP issue,   */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b088      	sub	sp, #32
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80074a4:	4b5b      	ldr	r3, [pc, #364]	; (8007614 <HAL_PCD_DataInStageCallback+0x17c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	613b      	str	r3, [r7, #16]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 80074b0:	78fb      	ldrb	r3, [r7, #3]
 80074b2:	f003 030f 	and.w	r3, r3, #15
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00b      	beq.n	80074d2 <HAL_PCD_DataInStageCallback+0x3a>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 80074ba:	78fb      	ldrb	r3, [r7, #3]
 80074bc:	f003 020f 	and.w	r2, r3, #15
 80074c0:	4613      	mov	r3, r2
 80074c2:	005b      	lsls	r3, r3, #1
 80074c4:	4413      	add	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	3370      	adds	r3, #112	; 0x70
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	4413      	add	r3, r2
 80074ce:	61fb      	str	r3, [r7, #28]
 80074d0:	e00a      	b.n	80074e8 <HAL_PCD_DataInStageCallback+0x50>
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 80074d2:	78fb      	ldrb	r3, [r7, #3]
 80074d4:	f003 020f 	and.w	r2, r3, #15
 80074d8:	4613      	mov	r3, r2
 80074da:	005b      	lsls	r3, r3, #1
 80074dc:	4413      	add	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	4413      	add	r3, r2
 80074e4:	3304      	adds	r3, #4
 80074e6:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	3330      	adds	r3, #48	; 0x30
 80074ee:	60fb      	str	r3, [r7, #12]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 80074f0:	78fb      	ldrb	r3, [r7, #3]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d164      	bne.n	80075c0 <HAL_PCD_DataInStageCallback+0x128>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	60bb      	str	r3, [r7, #8]

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	7a1b      	ldrb	r3, [r3, #8]
 8007500:	2b01      	cmp	r3, #1
 8007502:	f040 8082 	bne.w	800760a <HAL_PCD_DataInStageCallback+0x172>
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 8007506:	2300      	movs	r3, #0
 8007508:	2200      	movs	r2, #0
 800750a:	2100      	movs	r1, #0
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fa fc69 	bl	8001de4 <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	69da      	ldr	r2, [r3, #28]
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	69db      	ldr	r3, [r3, #28]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 800751a:	429a      	cmp	r2, r3
 800751c:	d82b      	bhi.n	8007576 <HAL_PCD_DataInStageCallback+0xde>
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007522:	2b01      	cmp	r3, #1
 8007524:	d10b      	bne.n	800753e <HAL_PCD_DataInStageCallback+0xa6>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Transmit(hpcd,
 800752a:	b2d9      	uxtb	r1, r3
 800752c:	2300      	movs	r3, #0
 800752e:	2200      	movs	r2, #0
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7fa fcab 	bl	8001e8c <HAL_PCD_EP_Transmit>

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	639a      	str	r2, [r3, #56]	; 0x38
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
 800753c:	e065      	b.n	800760a <HAL_PCD_DataInStageCallback+0x172>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	625a      	str	r2, [r3, #36]	; 0x24
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2202      	movs	r2, #2
 8007548:	601a      	str	r2, [r3, #0]
                        transfer_request -> ux_slave_transfer_request_requested_length;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	695a      	ldr	r2, [r3, #20]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	619a      	str	r2, [r3, #24]
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f043 0208 	orr.w	r2, r3, #8
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	605a      	str	r2, [r3, #4]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <HAL_PCD_DataInStageCallback+0xd6>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	2204      	movs	r2, #4
 8007572:	721a      	strb	r2, [r3, #8]
}
 8007574:	e049      	b.n	800760a <HAL_PCD_DataInStageCallback+0x172>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	69da      	ldr	r2, [r3, #28]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	61bb      	str	r3, [r7, #24]
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	69db      	ldr	r3, [r3, #28]
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	429a      	cmp	r2, r3
 800758a:	d902      	bls.n	8007592 <HAL_PCD_DataInStageCallback+0xfa>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	61bb      	str	r3, [r7, #24]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	691a      	ldr	r2, [r3, #16]
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	441a      	add	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	611a      	str	r2, [r3, #16]
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	69da      	ldr	r2, [r3, #28]
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	1ad2      	subs	r2, r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	61da      	str	r2, [r3, #28]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Transmit(hpcd,
 80075b0:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_current_data_pointer,
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Transmit(hpcd,
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7fa fc67 	bl	8001e8c <HAL_PCD_EP_Transmit>
}
 80075be:	e024      	b.n	800760a <HAL_PCD_DataInStageCallback+0x172>
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d010      	beq.n	80075ea <HAL_PCD_DataInStageCallback+0x152>
            transfer_request -> ux_slave_transfer_request_requested_length)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	695b      	ldr	r3, [r3, #20]
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00c      	beq.n	80075ea <HAL_PCD_DataInStageCallback+0x152>
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	639a      	str	r2, [r3, #56]	; 0x38
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	61da      	str	r2, [r3, #28]
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 80075dc:	78f9      	ldrb	r1, [r7, #3]
 80075de:	2300      	movs	r3, #0
 80075e0:	2200      	movs	r2, #0
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7fa fc52 	bl	8001e8c <HAL_PCD_EP_Transmit>
}
 80075e8:	e00f      	b.n	800760a <HAL_PCD_DataInStageCallback+0x172>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	625a      	str	r2, [r3, #36]	; 0x24
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2202      	movs	r2, #2
 80075f4:	601a      	str	r2, [r3, #0]
                transfer_request -> ux_slave_transfer_request_requested_length;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	695a      	ldr	r2, [r3, #20]
            transfer_request -> ux_slave_transfer_request_actual_length =
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	619a      	str	r2, [r3, #24]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f043 0208 	orr.w	r2, r3, #8
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	605a      	str	r2, [r3, #4]
}
 800760a:	bf00      	nop
 800760c:	3720      	adds	r7, #32
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	240005e8 	.word	0x240005e8

08007618 <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b088      	sub	sp, #32
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 8007624:	4b3f      	ldr	r3, [pc, #252]	; (8007724 <HAL_PCD_DataOutStageCallback+0x10c>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	f003 020f 	and.w	r2, r3, #15
 8007636:	4613      	mov	r3, r2
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	4413      	add	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	4413      	add	r3, r2
 8007642:	3304      	adds	r3, #4
 8007644:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3330      	adds	r3, #48	; 0x30
 800764c:	613b      	str	r3, [r7, #16]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 800764e:	78fb      	ldrb	r3, [r7, #3]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d14e      	bne.n	80076f2 <HAL_PCD_DataOutStageCallback+0xda>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	7a1b      	ldrb	r3, [r3, #8]
 8007658:	2b02      	cmp	r3, #2
 800765a:	d15e      	bne.n	800771a <HAL_PCD_DataOutStageCallback+0x102>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	60fb      	str	r3, [r7, #12]

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8007662:	78fb      	ldrb	r3, [r7, #3]
 8007664:	4619      	mov	r1, r3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7fa fbf8 	bl	8001e5c <HAL_PCD_EP_GetRxCount>
 800766c:	60b8      	str	r0, [r7, #8]

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	699a      	ldr	r2, [r3, #24]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	441a      	add	r2, r3
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	619a      	str	r2, [r3, #24]

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	699a      	ldr	r2, [r3, #24]
                transfer_request -> ux_slave_transfer_request_requested_length)
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	695b      	ldr	r3, [r3, #20]
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 8007682:	429a      	cmp	r2, r3
 8007684:	d823      	bhi.n	80076ce <HAL_PCD_DataOutStageCallback+0xb6>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	699a      	ldr	r2, [r3, #24]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	695b      	ldr	r3, [r3, #20]
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 800768e:	429a      	cmp	r2, r3
 8007690:	d004      	beq.n	800769c <HAL_PCD_DataOutStageCallback+0x84>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	69db      	ldr	r3, [r3, #28]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	429a      	cmp	r2, r3
 800769a:	d006      	beq.n	80076aa <HAL_PCD_DataOutStageCallback+0x92>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	605a      	str	r2, [r3, #4]
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 80076a8:	e037      	b.n	800771a <HAL_PCD_DataOutStageCallback+0x102>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	691a      	ldr	r2, [r3, #16]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	441a      	add	r2, r3
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	611a      	str	r2, [r3, #16]
                                endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Receive(hpcd,
 80076bc:	b2d9      	uxtb	r1, r3
                                transfer_request -> ux_slave_transfer_request_current_data_pointer,
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	691a      	ldr	r2, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7fa fb8c 	bl	8001de4 <HAL_PCD_EP_Receive>
}
 80076cc:	e025      	b.n	800771a <HAL_PCD_DataOutStageCallback+0x102>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	2227      	movs	r2, #39	; 0x27
 80076d2:	625a      	str	r2, [r3, #36]	; 0x24
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f043 0208 	orr.w	r2, r3, #8
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	605a      	str	r2, [r3, #4]
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d018      	beq.n	800771a <HAL_PCD_DataOutStageCallback+0x102>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ec:	6938      	ldr	r0, [r7, #16]
 80076ee:	4798      	blx	r3
}
 80076f0:	e013      	b.n	800771a <HAL_PCD_DataOutStageCallback+0x102>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 80076f2:	78fb      	ldrb	r3, [r7, #3]
 80076f4:	4619      	mov	r1, r3
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7fa fbb0 	bl	8001e5c <HAL_PCD_EP_GetRxCount>
 80076fc:	4602      	mov	r2, r0
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	2200      	movs	r2, #0
 8007706:	625a      	str	r2, [r3, #36]	; 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	2202      	movs	r2, #2
 800770c:	601a      	str	r2, [r3, #0]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f043 0208 	orr.w	r2, r3, #8
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	605a      	str	r2, [r3, #4]
}
 800771a:	bf00      	nop
 800771c:	3720      	adds	r7, #32
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	240005e8 	.word	0x240005e8

08007728 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 8007730:	4b14      	ldr	r3, [pc, #80]	; (8007784 <HAL_PCD_ResetCallback+0x5c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <HAL_PCD_ResetCallback+0x16>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 800773a:	f001 fc61 	bl	8009000 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d002      	beq.n	800774c <HAL_PCD_ResetCallback+0x24>
 8007746:	2b02      	cmp	r3, #2
 8007748:	d006      	beq.n	8007758 <HAL_PCD_ResetCallback+0x30>
 800774a:	e00b      	b.n	8007764 <HAL_PCD_ResetCallback+0x3c>
    {
#ifdef PCD_SPEED_HIGH
    case PCD_SPEED_HIGH:

        /* We are connected at high speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
 800774c:	4b0d      	ldr	r3, [pc, #52]	; (8007784 <HAL_PCD_ResetCallback+0x5c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2202      	movs	r2, #2
 8007752:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
        break;
 8007756:	e00b      	b.n	8007770 <HAL_PCD_ResetCallback+0x48>
#endif
    case PCD_SPEED_FULL:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 8007758:	4b0a      	ldr	r3, [pc, #40]	; (8007784 <HAL_PCD_ResetCallback+0x5c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2201      	movs	r2, #1
 800775e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
        break;
 8007762:	e005      	b.n	8007770 <HAL_PCD_ResetCallback+0x48>

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 8007764:	4b07      	ldr	r3, [pc, #28]	; (8007784 <HAL_PCD_ResetCallback+0x5c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2201      	movs	r2, #1
 800776a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
        break;
 800776e:	bf00      	nop
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 8007770:	f000 fa8e 	bl	8007c90 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 8007774:	4b03      	ldr	r3, [pc, #12]	; (8007784 <HAL_PCD_ResetCallback+0x5c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2201      	movs	r2, #1
 800777a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800777c:	bf00      	nop
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	240005e8 	.word	0x240005e8

08007788 <HAL_PCD_ConnectCallback>:
/*                                                                        */
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/**************************************************************************/
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8007790:	4b07      	ldr	r3, [pc, #28]	; (80077b0 <HAL_PCD_ConnectCallback+0x28>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <HAL_PCD_ConnectCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_CONNECTED);
 800779c:	4b04      	ldr	r3, [pc, #16]	; (80077b0 <HAL_PCD_ConnectCallback+0x28>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80077a4:	20f1      	movs	r0, #241	; 0xf1
 80077a6:	4798      	blx	r3
    }
}
 80077a8:	bf00      	nop
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	240005e8 	.word	0x240005e8

080077b4 <HAL_PCD_DisconnectCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80077bc:	4b0b      	ldr	r3, [pc, #44]	; (80077ec <HAL_PCD_DisconnectCallback+0x38>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d005      	beq.n	80077d4 <HAL_PCD_DisconnectCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_DISCONNECTED);
 80077c8:	4b08      	ldr	r3, [pc, #32]	; (80077ec <HAL_PCD_DisconnectCallback+0x38>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80077d0:	20f2      	movs	r0, #242	; 0xf2
 80077d2:	4798      	blx	r3
    }

    /* Check if the device is attached or configured.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 80077d4:	4b05      	ldr	r3, [pc, #20]	; (80077ec <HAL_PCD_DisconnectCallback+0x38>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <HAL_PCD_DisconnectCallback+0x2e>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 80077de:	f001 fc0f 	bl	8009000 <_ux_device_stack_disconnect>
    }
}
 80077e2:	bf00      	nop
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	240005e8 	.word	0x240005e8

080077f0 <HAL_PCD_SuspendCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80077f8:	4b07      	ldr	r3, [pc, #28]	; (8007818 <HAL_PCD_SuspendCallback+0x28>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8007800:	2b00      	cmp	r3, #0
 8007802:	d005      	beq.n	8007810 <HAL_PCD_SuspendCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
 8007804:	4b04      	ldr	r3, [pc, #16]	; (8007818 <HAL_PCD_SuspendCallback+0x28>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800780c:	20f4      	movs	r0, #244	; 0xf4
 800780e:	4798      	blx	r3
    }
}
 8007810:	bf00      	nop
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	240005e8 	.word	0x240005e8

0800781c <HAL_PCD_ResumeCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8007824:	4b07      	ldr	r3, [pc, #28]	; (8007844 <HAL_PCD_ResumeCallback+0x28>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800782c:	2b00      	cmp	r3, #0
 800782e:	d005      	beq.n	800783c <HAL_PCD_ResumeCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
 8007830:	4b04      	ldr	r3, [pc, #16]	; (8007844 <HAL_PCD_ResumeCallback+0x28>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8007838:	20f3      	movs	r0, #243	; 0xf3
 800783a:	4798      	blx	r3
    }
}
 800783c:	bf00      	nop
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	240005e8 	.word	0x240005e8

08007848 <HAL_PCD_SOFCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8007850:	4b07      	ldr	r3, [pc, #28]	; (8007870 <HAL_PCD_SOFCallback+0x28>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8007858:	2b00      	cmp	r3, #0
 800785a:	d005      	beq.n	8007868 <HAL_PCD_SOFCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
 800785c:	4b04      	ldr	r3, [pc, #16]	; (8007870 <HAL_PCD_SOFCallback+0x28>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8007864:	20f0      	movs	r0, #240	; 0xf0
 8007866:	4798      	blx	r3
    }
}
 8007868:	bf00      	nop
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	240005e8 	.word	0x240005e8

08007874 <_stm32_ed_get>:
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    PCD_HandleTypeDef   *pcd_handle;
} UX_DCD_STM32;

static inline struct UX_DCD_STM32_ED_STRUCT *_stm32_ed_get(UX_DCD_STM32 *dcd_stm32, ULONG ep_addr)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
ULONG ep_dir = ep_addr & 0x80u;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007884:	60fb      	str	r3, [r7, #12]
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
ULONG ep_num = ep_addr & 0x7Fu;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800788c:	60bb      	str	r3, [r7, #8]

    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2b08      	cmp	r3, #8
 8007892:	d806      	bhi.n	80078a2 <_stm32_ed_get+0x2e>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800789a:	685b      	ldr	r3, [r3, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d301      	bcc.n	80078a6 <_stm32_ed_get+0x32>
        return(UX_NULL);
 80078a2:	2300      	movs	r3, #0
 80078a4:	e013      	b.n	80078ce <_stm32_ed_get+0x5a>

#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if (ep_dir)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d008      	beq.n	80078be <_stm32_ed_get+0x4a>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	4613      	mov	r3, r2
 80078b0:	005b      	lsls	r3, r3, #1
 80078b2:	4413      	add	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	3370      	adds	r3, #112	; 0x70
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	4413      	add	r3, r2
 80078bc:	e007      	b.n	80078ce <_stm32_ed_get+0x5a>
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	4613      	mov	r3, r2
 80078c2:	005b      	lsls	r3, r3, #1
 80078c4:	4413      	add	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	4413      	add	r3, r2
 80078cc:	3304      	adds	r3, #4
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <_ux_dcd_stm32_endpoint_create>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_create(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	6039      	str	r1, [r7, #0]
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_index;


    /* The endpoint index in the array of the STM32 must match the endpoint number.  */
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078ec:	60fb      	str	r3, [r7, #12]

    /* Get STM32 ED.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7ff ffbd 	bl	8007874 <_stm32_ed_get>
 80078fa:	60b8      	str	r0, [r7, #8]

    if (ed == UX_NULL)
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <_ux_dcd_stm32_endpoint_create+0x2c>
        return(UX_NO_ED_AVAILABLE);
 8007902:	2314      	movs	r3, #20
 8007904:	e034      	b.n	8007970 <_ux_dcd_stm32_endpoint_create+0x96>

    /* Check the endpoint status, if it is free, reserve it. If not reject this endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d12d      	bne.n	800796e <_ux_dcd_stm32_endpoint_create+0x94>
    {

        /* We can use this endpoint.  */
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f043 0201 	orr.w	r2, r3, #1
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	605a      	str	r2, [r3, #4]

        /* Keep the physical endpoint address in the endpoint container.  */
        endpoint -> ux_slave_endpoint_ed =  (VOID *) ed;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	609a      	str	r2, [r3, #8]

        /* Save the endpoint pointer.  */
        ed -> ux_dcd_stm32_ed_endpoint =  endpoint;
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	601a      	str	r2, [r3, #0]

        /* And its index.  */
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	b2da      	uxtb	r2, r3
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	725a      	strb	r2, [r3, #9]

        /* And its direction.  */
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	b2db      	uxtb	r3, r3
 8007938:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800793c:	b2da      	uxtb	r2, r3
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	729a      	strb	r2, [r3, #10]

        /* Check if it is non-control endpoint.  */
        if (stm32_endpoint_index != 0)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d010      	beq.n	800796a <_ux_dcd_stm32_endpoint_create+0x90>
        {

            /* Open the endpoint.  */
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	b2d9      	uxtb	r1, r3
                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize,
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	69db      	ldr	r3, [r3, #28]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8007958:	b29a      	uxth	r2, r3
                            endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	699b      	ldr	r3, [r3, #24]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 800795e:	b2db      	uxtb	r3, r3
 8007960:	f003 0303 	and.w	r3, r3, #3
 8007964:	b2db      	uxtb	r3, r3
 8007966:	f7fa f98b 	bl	8001c80 <HAL_PCD_EP_Open>
        }

        /* Return successful completion.  */
        return(UX_SUCCESS);
 800796a:	2300      	movs	r3, #0
 800796c:	e000      	b.n	8007970 <_ux_dcd_stm32_endpoint_create+0x96>
    }

    /* Return an error.  */
    return(UX_NO_ED_AVAILABLE);
 800796e:	2314      	movs	r3, #20
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <_ux_dcd_stm32_endpoint_destroy>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	60fb      	str	r3, [r7, #12]

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	605a      	str	r2, [r3, #4]

    /* Deactivate the endpoint.  */
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	b2db      	uxtb	r3, r3
 800799a:	4619      	mov	r1, r3
 800799c:	4610      	mov	r0, r2
 800799e:	f7fa f9d7 	bl	8001d50 <HAL_PCD_EP_Close>

    /* This function never fails.  */
    return(UX_SUCCESS);
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <_ux_dcd_stm32_endpoint_reset>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
UX_INTERRUPT_SAVE_AREA
UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	60fb      	str	r3, [r7, #12]

    UX_DISABLE
 80079bc:	f002 f9d6 	bl	8009d6c <_ux_utility_interrupt_disable>
 80079c0:	60b8      	str	r0, [r7, #8]

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f423 7243 	bic.w	r2, r3, #780	; 0x30c
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_DONE |
                                      UX_DCD_STM32_ED_STATUS_SETUP);

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	721a      	strb	r2, [r3, #8]

    /* Clear STALL condition.  */
    HAL_PCD_EP_ClrStall(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	4619      	mov	r1, r3
 80079e2:	4610      	mov	r0, r2
 80079e4:	f7fa faf1 	bl	8001fca <HAL_PCD_EP_ClrStall>

    /* Flush buffer.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	4619      	mov	r1, r3
 80079f6:	4610      	mov	r0, r2
 80079f8:	f7fa fb6e 	bl	80020d8 <HAL_PCD_EP_Flush>
    /* Wakeup pending thread.  */
    if (endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore.tx_semaphore_suspended_count)
        _ux_utility_semaphore_put(&endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
#endif

    UX_RESTORE
 80079fc:	68b8      	ldr	r0, [r7, #8]
 80079fe:	f002 f9c6 	bl	8009d8e <_ux_utility_interrupt_restore>

    /* This function never fails.  */
    return(UX_SUCCESS);
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	60fb      	str	r3, [r7, #12]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f043 0204 	orr.w	r2, r3, #4
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	7a9b      	ldrb	r3, [r3, #10]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	f7fa fa60 	bl	8001f02 <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <_stm32_ed_get>:
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
ULONG ep_dir = ep_addr & 0x80u;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a5c:	60fb      	str	r3, [r7, #12]
ULONG ep_num = ep_addr & 0x7Fu;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a64:	60bb      	str	r3, [r7, #8]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2b08      	cmp	r3, #8
 8007a6a:	d806      	bhi.n	8007a7a <_stm32_ed_get+0x2e>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007a72:	685b      	ldr	r3, [r3, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d301      	bcc.n	8007a7e <_stm32_ed_get+0x32>
        return(UX_NULL);
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	e013      	b.n	8007aa6 <_stm32_ed_get+0x5a>
    if (ep_dir)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d008      	beq.n	8007a96 <_stm32_ed_get+0x4a>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	4613      	mov	r3, r2
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	4413      	add	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	3370      	adds	r3, #112	; 0x70
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	4413      	add	r3, r2
 8007a94:	e007      	b.n	8007aa6 <_stm32_ed_get+0x5a>
    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	4413      	add	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	3304      	adds	r3, #4
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3714      	adds	r7, #20
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <_ux_dcd_stm32_endpoint_status>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_status(UX_DCD_STM32 *dcd_stm32, ULONG endpoint_index)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED      *ed;


    /* Fetch the address of the physical endpoint.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint_index);
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7ff ffc4 	bl	8007a4c <_stm32_ed_get>
 8007ac4:	60f8      	str	r0, [r7, #12]

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f003 0301 	and.w	r3, r3, #1
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <_ux_dcd_stm32_endpoint_status+0x24>
        return(UX_ERROR);
 8007ad2:	23ff      	movs	r3, #255	; 0xff
 8007ad4:	e008      	b.n	8007ae8 <_ux_dcd_stm32_endpoint_status+0x36>

    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f003 0304 	and.w	r3, r3, #4
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d101      	bne.n	8007ae6 <_ux_dcd_stm32_endpoint_status+0x34>
        return(UX_FALSE);
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e000      	b.n	8007ae8 <_ux_dcd_stm32_endpoint_status+0x36>
    else
        return(UX_TRUE);
 8007ae6:	2301      	movs	r3, #1
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <_ux_dcd_stm32_frame_number_get>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]

    /* This function never fails. */
    return(UX_SUCCESS);
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <_ux_dcd_stm32_function>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_function(UX_SLAVE_DCD *dcd, UINT function, VOID *parameter)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
UINT             status;
UX_DCD_STM32     *dcd_stm32;


    /* Check the status of the controller.  */
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d106      	bne.n	8007b2a <_ux_dcd_stm32_function+0x22>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_CONTROLLER_UNKNOWN);
 8007b1c:	2255      	movs	r2, #85	; 0x55
 8007b1e:	2102      	movs	r1, #2
 8007b20:	2002      	movs	r0, #2
 8007b22:	f7fe fb27 	bl	8006174 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONTROLLER_UNKNOWN, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_CONTROLLER_UNKNOWN);
 8007b26:	2355      	movs	r3, #85	; 0x55
 8007b28:	e07d      	b.n	8007c26 <_ux_dcd_stm32_function+0x11e>
    }

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 =  (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	613b      	str	r3, [r7, #16]

    /* Look at the function and route it.  */
    switch(function)
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	3b0a      	subs	r3, #10
 8007b34:	2b0b      	cmp	r3, #11
 8007b36:	d86d      	bhi.n	8007c14 <_ux_dcd_stm32_function+0x10c>
 8007b38:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <_ux_dcd_stm32_function+0x38>)
 8007b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3e:	bf00      	nop
 8007b40:	08007b71 	.word	0x08007b71
 8007b44:	08007c15 	.word	0x08007c15
 8007b48:	08007b7d 	.word	0x08007b7d
 8007b4c:	08007b89 	.word	0x08007b89
 8007b50:	08007b95 	.word	0x08007b95
 8007b54:	08007ba1 	.word	0x08007ba1
 8007b58:	08007bad 	.word	0x08007bad
 8007b5c:	08007bc5 	.word	0x08007bc5
 8007b60:	08007c09 	.word	0x08007c09
 8007b64:	08007bdd 	.word	0x08007bdd
 8007b68:	08007bb9 	.word	0x08007bb9
 8007b6c:	08007bfb 	.word	0x08007bfb
    {

    case UX_DCD_GET_FRAME_NUMBER:

        status =  _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG *) parameter);
 8007b70:	6879      	ldr	r1, [r7, #4]
 8007b72:	6938      	ldr	r0, [r7, #16]
 8007b74:	f7ff ffbc 	bl	8007af0 <_ux_dcd_stm32_frame_number_get>
 8007b78:	6178      	str	r0, [r7, #20]
        break;
 8007b7a:	e053      	b.n	8007c24 <_ux_dcd_stm32_function+0x11c>

    case UX_DCD_TRANSFER_REQUEST:

#if defined(UX_DEVICE_STANDALONE)
        status =  _ux_dcd_stm32_transfer_run(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
 8007b7c:	6879      	ldr	r1, [r7, #4]
 8007b7e:	6938      	ldr	r0, [r7, #16]
 8007b80:	f000 f972 	bl	8007e68 <_ux_dcd_stm32_transfer_run>
 8007b84:	6178      	str	r0, [r7, #20]
#else
        status =  _ux_dcd_stm32_transfer_request(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
#endif /* defined(UX_DEVICE_STANDALONE) */
        break;
 8007b86:	e04d      	b.n	8007c24 <_ux_dcd_stm32_function+0x11c>

    case UX_DCD_TRANSFER_ABORT:
        status = _ux_dcd_stm32_transfer_abort(dcd_stm32, parameter);
 8007b88:	6879      	ldr	r1, [r7, #4]
 8007b8a:	6938      	ldr	r0, [r7, #16]
 8007b8c:	f000 f94a 	bl	8007e24 <_ux_dcd_stm32_transfer_abort>
 8007b90:	6178      	str	r0, [r7, #20]
        break;
 8007b92:	e047      	b.n	8007c24 <_ux_dcd_stm32_function+0x11c>

    case UX_DCD_CREATE_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 8007b94:	6879      	ldr	r1, [r7, #4]
 8007b96:	6938      	ldr	r0, [r7, #16]
 8007b98:	f7ff fe9f 	bl	80078da <_ux_dcd_stm32_endpoint_create>
 8007b9c:	6178      	str	r0, [r7, #20]
        break;
 8007b9e:	e041      	b.n	8007c24 <_ux_dcd_stm32_function+0x11c>

    case UX_DCD_DESTROY_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 8007ba0:	6879      	ldr	r1, [r7, #4]
 8007ba2:	6938      	ldr	r0, [r7, #16]
 8007ba4:	f7ff fee8 	bl	8007978 <_ux_dcd_stm32_endpoint_destroy>
 8007ba8:	6178      	str	r0, [r7, #20]
        break;
 8007baa:	e03b      	b.n	8007c24 <_ux_dcd_stm32_function+0x11c>

    case UX_DCD_RESET_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 8007bac:	6879      	ldr	r1, [r7, #4]
 8007bae:	6938      	ldr	r0, [r7, #16]
 8007bb0:	f7ff fefc 	bl	80079ac <_ux_dcd_stm32_endpoint_reset>
 8007bb4:	6178      	str	r0, [r7, #20]
        break;
 8007bb6:	e035      	b.n	8007c24 <_ux_dcd_stm32_function+0x11c>

    case UX_DCD_STALL_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 8007bb8:	6879      	ldr	r1, [r7, #4]
 8007bba:	6938      	ldr	r0, [r7, #16]
 8007bbc:	f7ff ff26 	bl	8007a0c <_ux_dcd_stm32_endpoint_stall>
 8007bc0:	6178      	str	r0, [r7, #20]
        break;
 8007bc2:	e02f      	b.n	8007c24 <_ux_dcd_stm32_function+0x11c>

    case UX_DCD_SET_DEVICE_ADDRESS:

        status =  HAL_PCD_SetAddress(dcd_stm32 -> pcd_handle, (uint8_t)(ULONG) parameter);
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	b2d2      	uxtb	r2, r2
 8007bce:	4611      	mov	r1, r2
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7fa f830 	bl	8001c36 <HAL_PCD_SetAddress>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	617b      	str	r3, [r7, #20]
        break;
 8007bda:	e023      	b.n	8007c24 <_ux_dcd_stm32_function+0x11c>

    case UX_DCD_CHANGE_STATE:

        if ((ULONG) parameter == UX_DEVICE_FORCE_DISCONNECT)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b0b      	cmp	r3, #11
 8007be0:	d108      	bne.n	8007bf4 <_ux_dcd_stm32_function+0xec>
        {
          /* Disconnect the USB device */
          status =  HAL_PCD_Stop(dcd_stm32 -> pcd_handle);
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7f9 fb05 	bl	80011f8 <HAL_PCD_Stop>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	617b      	str	r3, [r7, #20]
        else
        {
          status = UX_SUCCESS;
        }

        break;
 8007bf2:	e017      	b.n	8007c24 <_ux_dcd_stm32_function+0x11c>
          status = UX_SUCCESS;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	617b      	str	r3, [r7, #20]
        break;
 8007bf8:	e014      	b.n	8007c24 <_ux_dcd_stm32_function+0x11c>

    case UX_DCD_ENDPOINT_STATUS:

        status =  _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG) parameter);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	6938      	ldr	r0, [r7, #16]
 8007c00:	f7ff ff57 	bl	8007ab2 <_ux_dcd_stm32_endpoint_status>
 8007c04:	6178      	str	r0, [r7, #20]
        break;
 8007c06:	e00d      	b.n	8007c24 <_ux_dcd_stm32_function+0x11c>

#if defined(UX_DEVICE_STANDALONE)
    case UX_DCD_ISR_PENDING:

        _ux_dcd_stm32_setup_isr_pending(dcd_stm32);
 8007c08:	6938      	ldr	r0, [r7, #16]
 8007c0a:	f7ff fb63 	bl	80072d4 <_ux_dcd_stm32_setup_isr_pending>
        status = UX_SUCCESS;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	617b      	str	r3, [r7, #20]
        break;
 8007c12:	e007      	b.n	8007c24 <_ux_dcd_stm32_function+0x11c>
#endif /* defined(UX_DEVICE_STANDALONE) */

    default:

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_FUNCTION_NOT_SUPPORTED);
 8007c14:	2254      	movs	r2, #84	; 0x54
 8007c16:	2102      	movs	r1, #2
 8007c18:	2002      	movs	r0, #2
 8007c1a:	f7fe faab 	bl	8006174 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        status =  UX_FUNCTION_NOT_SUPPORTED;
 8007c1e:	2354      	movs	r3, #84	; 0x54
 8007c20:	617b      	str	r3, [r7, #20]
        break;
 8007c22:	bf00      	nop
    }

    /* Return completion status.  */
    return(status);
 8007c24:	697b      	ldr	r3, [r7, #20]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3718      	adds	r7, #24
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop

08007c30 <_ux_dcd_stm32_initialize>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize(ULONG dcd_io, ULONG parameter)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]


    UX_PARAMETER_NOT_USED(dcd_io);

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8007c3a:	4b13      	ldr	r3, [pc, #76]	; (8007c88 <_ux_dcd_stm32_initialize+0x58>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	60fb      	str	r3, [r7, #12]

    /* The controller initialized here is of STM32 type.  */
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2280      	movs	r2, #128	; 0x80
 8007c44:	605a      	str	r2, [r3, #4]

    /* Allocate memory for this STM32 DCD instance.  */
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 8007c46:	22e0      	movs	r2, #224	; 0xe0
 8007c48:	2100      	movs	r1, #0
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	f7fe fbb4 	bl	80063b8 <_ux_utility_memory_allocate>
 8007c50:	60b8      	str	r0, [r7, #8]

    /* Check if memory was properly allocated.  */
    if(dcd_stm32 == UX_NULL)
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <_ux_dcd_stm32_initialize+0x2c>
        return(UX_MEMORY_INSUFFICIENT);
 8007c58:	2312      	movs	r3, #18
 8007c5a:	e010      	b.n	8007c7e <_ux_dcd_stm32_initialize+0x4e>

    /* Set the pointer to the STM32 DCD.  */
    dcd -> ux_slave_dcd_controller_hardware =  (VOID *) dcd_stm32;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	61da      	str	r2, [r3, #28]

    /* Set the generic DCD owner for the STM32 DCD.  */
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	601a      	str	r2, [r3, #0]

    /* Initialize the function collector for this DCD.  */
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4a08      	ldr	r2, [pc, #32]	; (8007c8c <_ux_dcd_stm32_initialize+0x5c>)
 8007c6c:	619a      	str	r2, [r3, #24]

    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    /* Set the state of the controller to OPERATIONAL now.  */
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */
    return(UX_SUCCESS);
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	240005e8 	.word	0x240005e8
 8007c8c:	08007b09 	.word	0x08007b09

08007c90 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8007c96:	4b61      	ldr	r3, [pc, #388]	; (8007e1c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	69db      	ldr	r3, [r3, #28]
 8007ca0:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8007ca2:	4b5e      	ldr	r3, [pc, #376]	; (8007e1c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3324      	adds	r3, #36	; 0x24
 8007ca8:	60fb      	str	r3, [r7, #12]

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 8007caa:	4b5c      	ldr	r3, [pc, #368]	; (8007e1c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d110      	bne.n	8007cd8 <_ux_dcd_stm32_initialize_complete+0x48>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 8007cb6:	4b59      	ldr	r3, [pc, #356]	; (8007e1c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	4b58      	ldr	r3, [pc, #352]	; (8007e1c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f8d2 213c 	ldr.w	r2, [r2, #316]	; 0x13c
 8007cc2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 8007cc6:	4b55      	ldr	r3, [pc, #340]	; (8007e1c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	4b54      	ldr	r3, [pc, #336]	; (8007e1c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 8007cd2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8007cd6:	e02b      	b.n	8007d30 <_ux_dcd_stm32_initialize_complete+0xa0>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 8007cd8:	4b50      	ldr	r3, [pc, #320]	; (8007e1c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 8007ce2:	4b4e      	ldr	r3, [pc, #312]	; (8007e1c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d110      	bne.n	8007d10 <_ux_dcd_stm32_initialize_complete+0x80>
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 8007cee:	4b4b      	ldr	r3, [pc, #300]	; (8007e1c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	4b4a      	ldr	r3, [pc, #296]	; (8007e1c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
 8007cfa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 8007cfe:	4b47      	ldr	r3, [pc, #284]	; (8007e1c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	4b46      	ldr	r3, [pc, #280]	; (8007e1c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f8d2 2120 	ldr.w	r2, [r2, #288]	; 0x120
 8007d0a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8007d0e:	e00f      	b.n	8007d30 <_ux_dcd_stm32_initialize_complete+0xa0>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 8007d10:	4b42      	ldr	r3, [pc, #264]	; (8007e1c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	4b41      	ldr	r3, [pc, #260]	; (8007e1c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f8d2 2124 	ldr.w	r2, [r2, #292]	; 0x124
 8007d1c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 8007d20:	4b3e      	ldr	r3, [pc, #248]	; (8007e1c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	4b3d      	ldr	r3, [pc, #244]	; (8007e1c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f8d2 2128 	ldr.w	r2, [r2, #296]	; 0x128
 8007d2c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        }
    }

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8007d30:	4b3a      	ldr	r3, [pc, #232]	; (8007e1c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007d38:	60bb      	str	r3, [r7, #8]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3304      	adds	r3, #4
    _ux_utility_descriptor_parse(device_framework,
 8007d3e:	220e      	movs	r2, #14
 8007d40:	4937      	ldr	r1, [pc, #220]	; (8007e20 <_ux_dcd_stm32_initialize_complete+0x190>)
 8007d42:	68b8      	ldr	r0, [r7, #8]
 8007d44:	f7fe fada 	bl	80062fc <_ux_utility_descriptor_parse>

    /* Now we create a transfer request to accept the first SETUP packet
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	336c      	adds	r3, #108	; 0x6c
 8007d4c:	607b      	str	r3, [r7, #4]

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f242 7210 	movw	r2, #10000	; 0x2710
 8007d54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	611a      	str	r2, [r3, #16]

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	609a      	str	r2, [r3, #8]

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	69d2      	ldr	r2, [r2, #28]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 8007d70:	61da      	str	r2, [r3, #28]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	69da      	ldr	r2, [r3, #28]
    transfer_request -> ux_slave_transfer_request_requested_length =
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	615a      	str	r2, [r3, #20]

    /* Attach the control endpoint to the transfer request.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	609a      	str	r2, [r3, #8]

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	699b      	ldr	r3, [r3, #24]
                                    (VOID *) &device -> ux_slave_device_control_endpoint);
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	323c      	adds	r2, #60	; 0x3c
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 8007d8c:	210e      	movs	r1, #14
 8007d8e:	6978      	ldr	r0, [r7, #20]
 8007d90:	4798      	blx	r3

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007d98:	2100      	movs	r1, #0
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fa f99c 	bl	80020d8 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	2300      	movs	r3, #0
 8007dae:	2100      	movs	r1, #0
 8007db0:	f7f9 ff66 	bl	8001c80 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007dba:	2180      	movs	r1, #128	; 0x80
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fa f98b 	bl	80020d8 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	69db      	ldr	r3, [r3, #28]
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	2300      	movs	r3, #0
 8007dd0:	2180      	movs	r1, #128	; 0x80
 8007dd2:	f7f9 ff55 	bl	8001c80 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	605a      	str	r2, [r3, #4]

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	601a      	str	r2, [r3, #0]

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2208      	movs	r2, #8
 8007dec:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2208      	movs	r2, #8
 8007df2:	61da      	str	r2, [r3, #28]

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	619a      	str	r2, [r3, #24]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8007dfa:	4b08      	ldr	r3, [pc, #32]	; (8007e1c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d005      	beq.n	8007e12 <_ux_dcd_stm32_initialize_complete+0x182>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 8007e06:	4b05      	ldr	r3, [pc, #20]	; (8007e1c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8007e0e:	2001      	movs	r0, #1
 8007e10:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	240005e8 	.word	0x240005e8
 8007e20:	24000018 	.word	0x24000018

08007e24 <_ux_dcd_stm32_transfer_abort>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_abort(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]

UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	60fb      	str	r3, [r7, #12]

    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	4619      	mov	r1, r3
 8007e42:	4610      	mov	r0, r2
 8007e44:	f7fa f917 	bl	8002076 <HAL_PCD_EP_Abort>
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	4619      	mov	r1, r3
 8007e56:	4610      	mov	r0, r2
 8007e58:	f7fa f93e 	bl	80020d8 <HAL_PCD_EP_Flush>

    /* No semaphore put here since it's already done in stack.  */

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
	...

08007e68 <_ux_dcd_stm32_transfer_run>:
/*                                            controller,                 */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_run(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
UX_DCD_STM32_ED         *ed;
ULONG                   ed_status;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	617b      	str	r3, [r7, #20]

    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	613b      	str	r3, [r7, #16]

    UX_DISABLE
 8007e7e:	f001 ff75 	bl	8009d6c <_ux_utility_interrupt_disable>
 8007e82:	60f8      	str	r0, [r7, #12]

    /* Get current ED status.  */
    ed_status = ed -> ux_dcd_stm32_ed_status;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	60bb      	str	r3, [r7, #8]

    /* Invalid state.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state == UX_DEVICE_RESET)
 8007e8a:	4b30      	ldr	r3, [pc, #192]	; (8007f4c <_ux_dcd_stm32_transfer_run+0xe4>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d107      	bne.n	8007ea4 <_ux_dcd_stm32_transfer_run+0x3c>
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_BUS_RESET;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	2226      	movs	r2, #38	; 0x26
 8007e98:	625a      	str	r2, [r3, #36]	; 0x24
        UX_RESTORE
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f001 ff77 	bl	8009d8e <_ux_utility_interrupt_restore>
        return(UX_STATE_EXIT);
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e04e      	b.n	8007f42 <_ux_dcd_stm32_transfer_run+0xda>
    }

    /* ED stalled.  */
    if (ed_status & UX_DCD_STM32_ED_STATUS_STALLED)
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	f003 0304 	and.w	r3, r3, #4
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d007      	beq.n	8007ebe <_ux_dcd_stm32_transfer_run+0x56>
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_STALLED;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2221      	movs	r2, #33	; 0x21
 8007eb2:	625a      	str	r2, [r3, #36]	; 0x24
        UX_RESTORE
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f001 ff6a 	bl	8009d8e <_ux_utility_interrupt_restore>
        return(UX_STATE_NEXT);
 8007eba:	2304      	movs	r3, #4
 8007ebc:	e041      	b.n	8007f42 <_ux_dcd_stm32_transfer_run+0xda>
    }

    /* ED transfer in progress.  */
    if (ed_status & UX_DCD_STM32_ED_STATUS_TRANSFER)
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	f003 0302 	and.w	r3, r3, #2
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d015      	beq.n	8007ef4 <_ux_dcd_stm32_transfer_run+0x8c>
    {
        if (ed_status & UX_DCD_STM32_ED_STATUS_DONE)
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f003 0308 	and.w	r3, r3, #8
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00b      	beq.n	8007eea <_ux_dcd_stm32_transfer_run+0x82>
        {

            /* Keep used, stall and task pending bits.  */
            ed -> ux_dcd_stm32_ed_status &= (UX_DCD_STM32_ED_STATUS_USED |
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	f240 4305 	movw	r3, #1029	; 0x405
 8007eda:	4013      	ands	r3, r2
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	6053      	str	r3, [r2, #4]
                                        UX_DCD_STM32_ED_STATUS_STALLED |
                                        UX_DCD_STM32_ED_STATUS_TASK_PENDING);
            UX_RESTORE
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f001 ff54 	bl	8009d8e <_ux_utility_interrupt_restore>
            return(UX_STATE_NEXT);
 8007ee6:	2304      	movs	r3, #4
 8007ee8:	e02b      	b.n	8007f42 <_ux_dcd_stm32_transfer_run+0xda>
        }
        UX_RESTORE
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f001 ff4f 	bl	8009d8e <_ux_utility_interrupt_restore>
        return(UX_STATE_WAIT);
 8007ef0:	2305      	movs	r3, #5
 8007ef2:	e026      	b.n	8007f42 <_ux_dcd_stm32_transfer_run+0xda>
    }


    /* Start transfer.  */
    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_TRANSFER;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f043 0202 	orr.w	r2, r3, #2
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	605a      	str	r2, [r3, #4]

    /* Check for transfer direction.  Is this a IN endpoint ? */
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f04:	2b03      	cmp	r3, #3
 8007f06:	d10c      	bne.n	8007f22 <_ux_dcd_stm32_transfer_run+0xba>
    {

        /* Transmit data.  */
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8007f12:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	f7f9 ffb6 	bl	8001e8c <HAL_PCD_EP_Transmit>
 8007f20:	e00b      	b.n	8007f3a <_ux_dcd_stm32_transfer_run+0xd2>
    else
    {

        /* We have a request for a SETUP or OUT Endpoint.  */
        /* Receive data.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 8007f2c:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	f7f9 ff55 	bl	8001de4 <HAL_PCD_EP_Receive>
                            transfer_request->ux_slave_transfer_request_requested_length);
    }

    /* Return to caller with WAIT.  */
    UX_RESTORE
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f001 ff27 	bl	8009d8e <_ux_utility_interrupt_restore>
    return(UX_STATE_WAIT);
 8007f40:	2305      	movs	r3, #5
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3718      	adds	r7, #24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	240005e8 	.word	0x240005e8

08007f50 <_ux_device_stack_alternate_setting_get>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b088      	sub	sp, #32
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8007f58:	4b1b      	ldr	r3, [pc, #108]	; (8007fc8 <_ux_device_stack_alternate_setting_get+0x78>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	3324      	adds	r3, #36	; 0x24
 8007f5e:	61bb      	str	r3, [r7, #24]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2b03      	cmp	r3, #3
 8007f66:	d129      	bne.n	8007fbc <_ux_device_stack_alternate_setting_get+0x6c>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007f6e:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Start parsing each interface.  */
        while (interface_ptr != UX_NULL)
 8007f70:	e021      	b.n	8007fb6 <_ux_device_stack_alternate_setting_get+0x66>
        if (interface_ptr != UX_NULL)
#endif
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d119      	bne.n	8007fb0 <_ux_device_stack_alternate_setting_get+0x60>
            {

                /* Get the control endpoint of the device.  */                
                endpoint =  &device -> ux_slave_device_control_endpoint;
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	333c      	adds	r3, #60	; 0x3c
 8007f80:	617b      	str	r3, [r7, #20]

                /* Get the pointer to the transfer request associated with the endpoint.  */
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	3330      	adds	r3, #48	; 0x30
 8007f86:	613b      	str	r3, [r7, #16]

                /* Set the value of the alternate setting in the buffer.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer =
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	699a      	ldr	r2, [r3, #24]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	68db      	ldr	r3, [r3, #12]
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 8007f90:	b2d2      	uxtb	r2, r2
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8007f92:	701a      	strb	r2, [r3, #0]

                /* Setup the length appropriately.  */
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	2201      	movs	r2, #1
 8007f98:	615a      	str	r2, [r3, #20]

                /* Set the phase of the transfer to data out.  */
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	2203      	movs	r2, #3
 8007f9e:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send the descriptor with the appropriate length to the host.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	6938      	ldr	r0, [r7, #16]
 8007fa6:	f001 fd4a 	bl	8009a3e <_ux_device_stack_transfer_request>
 8007faa:	60f8      	str	r0, [r7, #12]

                /* Return the function status.  */
                return(status);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	e006      	b.n	8007fbe <_ux_device_stack_alternate_setting_get+0x6e>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb4:	61fb      	str	r3, [r7, #28]
        while (interface_ptr != UX_NULL)
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1da      	bne.n	8007f72 <_ux_device_stack_alternate_setting_get+0x22>
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 8007fbc:	23ff      	movs	r3, #255	; 0xff
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3720      	adds	r7, #32
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	240005e8 	.word	0x240005e8

08007fcc <_ux_device_stack_alternate_setting_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b0ae      	sub	sp, #184	; 0xb8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8007fd6:	4bc0      	ldr	r3, [pc, #768]	; (80082d8 <_ux_device_stack_alternate_setting_set+0x30c>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3324      	adds	r3, #36	; 0x24
 8007fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8007fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d001      	beq.n	8007fee <_ux_device_stack_alternate_setting_set+0x22>
        return(UX_FUNCTION_NOT_SUPPORTED);
 8007fea:	2354      	movs	r3, #84	; 0x54
 8007fec:	e215      	b.n	800841a <_ux_device_stack_alternate_setting_set+0x44e>

    /* Find the current interface.  */
    interface_ptr =  device -> ux_slave_device_first_interface;
 8007fee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ff2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007ff6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface_ptr != UX_NULL)
 8007ffa:	e00a      	b.n	8008012 <_ux_device_stack_alternate_setting_set+0x46>
    {

        if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8007ffc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	429a      	cmp	r2, r3
 8008006:	d009      	beq.n	800801c <_ux_device_stack_alternate_setting_set+0x50>
            break;
        else
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8008008:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800800c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (interface_ptr != UX_NULL)
 8008012:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1f0      	bne.n	8007ffc <_ux_device_stack_alternate_setting_set+0x30>
 800801a:	e000      	b.n	800801e <_ux_device_stack_alternate_setting_set+0x52>
            break;
 800801c:	bf00      	nop
        interface_ptr = UX_NULL;
#endif

    /* We must have found the interface pointer for the interface value
       requested by the caller.  */
    if (interface_ptr == UX_NULL)
 800801e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008022:	2b00      	cmp	r3, #0
 8008024:	d106      	bne.n	8008034 <_ux_device_stack_alternate_setting_set+0x68>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 8008026:	2252      	movs	r2, #82	; 0x52
 8008028:	2107      	movs	r1, #7
 800802a:	2002      	movs	r0, #2
 800802c:	f7fe f8a2 	bl	8006174 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 8008030:	2352      	movs	r3, #82	; 0x52
 8008032:	e1f2      	b.n	800841a <_ux_device_stack_alternate_setting_set+0x44e>
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 8008034:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	429a      	cmp	r2, r3
 800803e:	d101      	bne.n	8008044 <_ux_device_stack_alternate_setting_set+0x78>
        return(UX_SUCCESS);       
 8008040:	2300      	movs	r3, #0
 8008042:	e1ea      	b.n	800841a <_ux_device_stack_alternate_setting_set+0x44e>

    return(UX_FUNCTION_NOT_SUPPORTED);
#else

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;
 8008044:	4ba4      	ldr	r3, [pc, #656]	; (80082d8 <_ux_device_stack_alternate_setting_set+0x30c>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800804c:	4ba2      	ldr	r3, [pc, #648]	; (80082d8 <_ux_device_stack_alternate_setting_set+0x30c>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8008058:	4b9f      	ldr	r3, [pc, #636]	; (80082d8 <_ux_device_stack_alternate_setting_set+0x30c>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008060:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 8008064:	e1d3      	b.n	800840e <_ux_device_stack_alternate_setting_set+0x442>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8008066:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        /* And its length.  */
        descriptor_type =*  (device_framework + 1);
 8008070:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008074:	785b      	ldrb	r3, [r3, #1]
 8008076:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                
        /* Check if this is a configuration descriptor. */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800807a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800807e:	2b02      	cmp	r3, #2
 8008080:	f040 81b7 	bne.w	80083f2 <_ux_device_stack_alternate_setting_set+0x426>
        {

            /* Parse the descriptor in something more readable. */
            _ux_utility_descriptor_parse(device_framework,
 8008084:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008088:	2208      	movs	r2, #8
 800808a:	4994      	ldr	r1, [pc, #592]	; (80082dc <_ux_device_stack_alternate_setting_set+0x310>)
 800808c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8008090:	f7fe f934 	bl	80062fc <_ux_utility_descriptor_parse>
                        _ux_system_configuration_descriptor_structure,
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value.  */
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 8008094:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008096:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800809a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800809e:	429a      	cmp	r2, r3
 80080a0:	f040 81a7 	bne.w	80083f2 <_ux_device_stack_alternate_setting_set+0x426>
            {

                /* Limit the search in current configuration descriptor. */
                device_framework_length = configuration_descriptor.wTotalLength;
 80080a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* We have found the configuration value that was selected by the host   
                   We need to scan all the interface descriptors following this
                   configuration descriptor and locate the interface for which the alternate
                   setting must be changed. */
                while (device_framework_length != 0)
 80080aa:	e19c      	b.n	80083e6 <_ux_device_stack_alternate_setting_set+0x41a>
                {

                    /* Get the length of the current descriptor.  */
                    descriptor_length =  (ULONG) *device_framework;
 80080ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* And its type.  */
                    descriptor_type = *(device_framework + 1); 
 80080b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80080ba:	785b      	ldrb	r3, [r3, #1]
 80080bc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                
                    /* Check if this is an interface descriptor. */
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 80080c0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80080c4:	2b04      	cmp	r3, #4
 80080c6:	f040 8180 	bne.w	80083ca <_ux_device_stack_alternate_setting_set+0x3fe>
                    {

                        /* Parse the descriptor in something more readable. */
                        _ux_utility_descriptor_parse(device_framework,
 80080ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80080ce:	2209      	movs	r2, #9
 80080d0:	4983      	ldr	r1, [pc, #524]	; (80082e0 <_ux_device_stack_alternate_setting_set+0x314>)
 80080d2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80080d6:	f7fe f911 	bl	80062fc <_ux_utility_descriptor_parse>
                                    _ux_system_interface_descriptor_structure,
                                    UX_INTERFACE_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &interface_descriptor);

                        /* Check if this is the interface we are searching. */
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 80080da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	429a      	cmp	r2, r3
 80080e0:	f040 8173 	bne.w	80083ca <_ux_device_stack_alternate_setting_set+0x3fe>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 80080e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	f040 816e 	bne.w	80083ca <_ux_device_stack_alternate_setting_set+0x3fe>
                        {

                            /* We have found the right interface and alternate setting. Before
                               we mount all the endpoints for this interface, we need to
                               unmount the endpoints associated with the previous alternate setting.  */
                            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 80080ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                            while (endpoint != UX_NULL)
 80080f8:	e028      	b.n	800814c <_ux_device_stack_alternate_setting_set+0x180>
                            {

                                /* Abort any pending transfer.  */
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 80080fa:	2126      	movs	r1, #38	; 0x26
 80080fc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8008100:	f001 fc8c 	bl	8009a1c <_ux_device_stack_transfer_all_request_abort>

                                /* The device controller must be called to destroy the endpoint.  */
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 8008104:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800810e:	210f      	movs	r1, #15
 8008110:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008114:	4798      	blx	r3

                                /* Get the next endpoint.  */
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8008116:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800811a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811c:	67bb      	str	r3, [r7, #120]	; 0x78
                
                                /* Free the endpoint.  */
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800811e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008122:	2200      	movs	r2, #0
 8008124:	601a      	str	r2, [r3, #0]
                        
                                /* Make sure the endpoint instance is now cleaned up.  */
                                endpoint -> ux_slave_endpoint_state =  0;
 8008126:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800812a:	2200      	movs	r2, #0
 800812c:	605a      	str	r2, [r3, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 800812e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008132:	2200      	movs	r2, #0
 8008134:	625a      	str	r2, [r3, #36]	; 0x24
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 8008136:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800813a:	2200      	movs	r2, #0
 800813c:	629a      	str	r2, [r3, #40]	; 0x28
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800813e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008142:	2200      	movs	r2, #0
 8008144:	62da      	str	r2, [r3, #44]	; 0x2c
                                                        
                                /* Now we refresh the endpoint pointer.  */
                                endpoint =  next_endpoint;
 8008146:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008148:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                            while (endpoint != UX_NULL)
 800814c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1d2      	bne.n	80080fa <_ux_device_stack_alternate_setting_set+0x12e>
                            }

                            /* Now clear the interface endpoint entry.  */
                            interface_ptr -> ux_slave_interface_first_endpoint = UX_NULL;
 8008154:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008158:	2200      	movs	r2, #0
 800815a:	635a      	str	r2, [r3, #52]	; 0x34

                            /* Point beyond the interface descriptor.  */
                            device_framework_length -=  (ULONG) *device_framework;
 800815c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008168:	1a9b      	subs	r3, r3, r2
 800816a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                            device_framework +=  (ULONG) *device_framework;
 800816e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	461a      	mov	r2, r3
 8008176:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800817a:	4413      	add	r3, r2
 800817c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                        
                            /* Parse the device framework and locate endpoint descriptor(s).  */
                            while (device_framework_length != 0)
 8008180:	e0e7      	b.n	8008352 <_ux_device_stack_alternate_setting_set+0x386>
                            {
                        
                                /* Get the length of the current descriptor.  */
                                descriptor_length =  (ULONG) *device_framework;
 8008182:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        
                                /* And its type.  */
                                descriptor_type =  *(device_framework + 1);
 800818c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008190:	785b      	ldrb	r3, [r3, #1]
 8008192:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                                        
                                /* Check if this is an endpoint descriptor.  */
                                switch(descriptor_type)
 8008196:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800819a:	2b05      	cmp	r3, #5
 800819c:	d009      	beq.n	80081b2 <_ux_device_stack_alternate_setting_set+0x1e6>
 800819e:	2b05      	cmp	r3, #5
 80081a0:	f300 80c8 	bgt.w	8008334 <_ux_device_stack_alternate_setting_set+0x368>
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	f000 80c0 	beq.w	800832a <_ux_device_stack_alternate_setting_set+0x35e>
 80081aa:	2b04      	cmp	r3, #4
 80081ac:	f000 80bd 	beq.w	800832a <_ux_device_stack_alternate_setting_set+0x35e>


                                default:
                                
                                    /* We have found another descriptor embedded in the interface. Ignore it.  */
                                    break;
 80081b0:	e0c0      	b.n	8008334 <_ux_device_stack_alternate_setting_set+0x368>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 80081b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80081ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 80081be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80081c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                                    while (endpoints_pool_number != 0)
 80081ca:	e013      	b.n	80081f4 <_ux_device_stack_alternate_setting_set+0x228>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 80081cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d104      	bne.n	80081e0 <_ux_device_stack_alternate_setting_set+0x214>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 80081d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80081da:	2201      	movs	r2, #1
 80081dc:	601a      	str	r2, [r3, #0]
                                            break;
 80081de:	e00d      	b.n	80081fc <_ux_device_stack_alternate_setting_set+0x230>
                                        endpoint++;
 80081e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80081e4:	3378      	adds	r3, #120	; 0x78
 80081e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                                       endpoints_pool_number--; 
 80081ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081ee:	3b01      	subs	r3, #1
 80081f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                                    while (endpoints_pool_number != 0)
 80081f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1e7      	bne.n	80081cc <_ux_device_stack_alternate_setting_set+0x200>
                                    if (endpoints_pool_number == 0)
 80081fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <_ux_device_stack_alternate_setting_set+0x23c>
                                        return(UX_MEMORY_INSUFFICIENT);
 8008204:	2312      	movs	r3, #18
 8008206:	e108      	b.n	800841a <_ux_device_stack_alternate_setting_set+0x44e>
                                                    (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 8008208:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800820c:	330c      	adds	r3, #12
                                    _ux_utility_descriptor_parse(device_framework,
 800820e:	2206      	movs	r2, #6
 8008210:	4934      	ldr	r1, [pc, #208]	; (80082e4 <_ux_device_stack_alternate_setting_set+0x318>)
 8008212:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8008216:	f7fe f871 	bl	80062fc <_ux_utility_descriptor_parse>
                                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800821a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800821e:	3330      	adds	r3, #48	; 0x30
 8008220:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8008224:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008228:	69db      	ldr	r3, [r3, #28]
                                    max_transfer_length =
 800822a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800822e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8008232:	4b29      	ldr	r3, [pc, #164]	; (80082d8 <_ux_device_stack_alternate_setting_set+0x30c>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800823a:	2b02      	cmp	r3, #2
 800823c:	d11c      	bne.n	8008278 <_ux_device_stack_alternate_setting_set+0x2ac>
                                        (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 800823e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	f003 0301 	and.w	r3, r3, #1
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8008248:	2b00      	cmp	r3, #0
 800824a:	d015      	beq.n	8008278 <_ux_device_stack_alternate_setting_set+0x2ac>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800824c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8008256:	67fb      	str	r3, [r7, #124]	; 0x7c
                                        if (n_trans)
 8008258:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00c      	beq.n	8008278 <_ux_device_stack_alternate_setting_set+0x2ac>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800825e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008260:	0adb      	lsrs	r3, r3, #11
 8008262:	67fb      	str	r3, [r7, #124]	; 0x7c
                                            n_trans ++;
 8008264:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008266:	3301      	adds	r3, #1
 8008268:	67fb      	str	r3, [r7, #124]	; 0x7c
                                            max_transfer_length *= n_trans;
 800826a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800826e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008270:	fb02 f303 	mul.w	r3, r2, r3
 8008274:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 8008278:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800827c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008280:	621a      	str	r2, [r3, #32]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 8008282:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008286:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800828a:	609a      	str	r2, [r3, #8]
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800828c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008290:	f04f 32ff 	mov.w	r2, #4294967295
 8008294:	635a      	str	r2, [r3, #52]	; 0x34
                                    endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 8008296:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800829a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800829e:	629a      	str	r2, [r3, #40]	; 0x28
                                    endpoint -> ux_slave_endpoint_device =  device;
 80082a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80082a4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80082a8:	62da      	str	r2, [r3, #44]	; 0x2c
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 80082aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80082b4:	210e      	movs	r1, #14
 80082b6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80082ba:	4798      	blx	r3
 80082bc:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                                    if (status != UX_SUCCESS)
 80082c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00f      	beq.n	80082e8 <_ux_device_stack_alternate_setting_set+0x31c>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 80082c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80082cc:	2200      	movs	r2, #0
 80082ce:	601a      	str	r2, [r3, #0]
                                        return(status);
 80082d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082d4:	e0a1      	b.n	800841a <_ux_device_stack_alternate_setting_set+0x44e>
 80082d6:	bf00      	nop
 80082d8:	240005e8 	.word	0x240005e8
 80082dc:	24000028 	.word	0x24000028
 80082e0:	24000030 	.word	0x24000030
 80082e4:	24000010 	.word	0x24000010
                                    if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 80082e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80082ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d105      	bne.n	80082fe <_ux_device_stack_alternate_setting_set+0x332>
                                        interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 80082f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80082f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80082fa:	635a      	str	r2, [r3, #52]	; 0x34
                                    break;
 80082fc:	e01b      	b.n	8008336 <_ux_device_stack_alternate_setting_set+0x36a>
                                        endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 80082fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008304:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8008308:	e004      	b.n	8008314 <_ux_device_stack_alternate_setting_set+0x348>
                                            endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 800830a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800830e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008310:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8008314:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1f5      	bne.n	800830a <_ux_device_stack_alternate_setting_set+0x33e>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 800831e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008322:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008326:	625a      	str	r2, [r3, #36]	; 0x24
                                    break;
 8008328:	e005      	b.n	8008336 <_ux_device_stack_alternate_setting_set+0x36a>
                                    device_framework_length =  descriptor_length;
 800832a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800832e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                                    break;
 8008332:	e000      	b.n	8008336 <_ux_device_stack_alternate_setting_set+0x36a>
                                    break;
 8008334:	bf00      	nop
                                }
                        
                                /* Adjust what is left of the device framework.  */
                                device_framework_length -=  descriptor_length;
 8008336:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800833a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                        
                                /* Point to the next descriptor.  */
                                device_framework +=  descriptor_length;
 8008344:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008348:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800834c:	4413      	add	r3, r2
 800834e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                            while (device_framework_length != 0)
 8008352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008356:	2b00      	cmp	r3, #0
 8008358:	f47f af13 	bne.w	8008182 <_ux_device_stack_alternate_setting_set+0x1b6>
                            }

                            /* The interface descriptor in the current class must be changed to the new alternate setting.  */
                            _ux_utility_memory_copy(&interface_ptr -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 800835c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008360:	330c      	adds	r3, #12
 8008362:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8008366:	2224      	movs	r2, #36	; 0x24
 8008368:	4618      	mov	r0, r3
 800836a:	f7fe f93c 	bl	80065e6 <_ux_utility_memory_copy>
                            
                            /* Get the class for the interface.  */
                            class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 800836e:	4b2d      	ldr	r3, [pc, #180]	; (8008424 <_ux_device_stack_alternate_setting_set+0x458>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008376:	6952      	ldr	r2, [r2, #20]
 8008378:	3252      	adds	r2, #82	; 0x52
 800837a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Check if class driver is available. */
                            if (class_ptr == UX_NULL || class_ptr -> ux_slave_class_status == UX_UNUSED)
 8008382:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008386:	2b00      	cmp	r3, #0
 8008388:	d004      	beq.n	8008394 <_ux_device_stack_alternate_setting_set+0x3c8>
 800838a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800838e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008390:	2b00      	cmp	r3, #0
 8008392:	d101      	bne.n	8008398 <_ux_device_stack_alternate_setting_set+0x3cc>
                            {

                                return (UX_NO_CLASS_MATCH);
 8008394:	2357      	movs	r3, #87	; 0x57
 8008396:	e040      	b.n	800841a <_ux_device_stack_alternate_setting_set+0x44e>
                            }
                        
                            /* The interface attached to this configuration must be changed at the class
                               level.  */
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 8008398:	2306      	movs	r3, #6
 800839a:	60bb      	str	r3, [r7, #8]
                            class_command.ux_slave_class_command_interface =   (VOID *) interface_ptr;
 800839c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80083a0:	613b      	str	r3, [r7, #16]

                            /* And store it.  */
                            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 80083a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083a6:	62bb      	str	r3, [r7, #40]	; 0x28
                            
                            /* We can now memorize the interface pointer associated with this class.  */
                            class_ptr -> ux_slave_class_interface = interface_ptr;
 80083a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083b0:	661a      	str	r2, [r3, #96]	; 0x60
                            
                            /* We have found a potential candidate. Call this registered class entry function to change the alternate setting.  */
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 80083b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b8:	f107 0208 	add.w	r2, r7, #8
 80083bc:	4610      	mov	r0, r2
 80083be:	4798      	blx	r3
 80083c0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

                            /* We are done here.  */
                            return(status); 
 80083c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083c8:	e027      	b.n	800841a <_ux_device_stack_alternate_setting_set+0x44e>
                        }
                    }               

                    /* Adjust what is left of the device framework.  */
                    device_framework_length -=  descriptor_length;
 80083ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80083ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                    /* Point to the next descriptor.  */
                    device_framework +=  descriptor_length;
 80083d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80083dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80083e0:	4413      	add	r3, r2
 80083e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                while (device_framework_length != 0)
 80083e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f47f ae5e 	bne.w	80080ac <_ux_device_stack_alternate_setting_set+0xe0>
                }

                /* In case alter setting not found, report protocol error. */
                break;
 80083f0:	e012      	b.n	8008418 <_ux_device_stack_alternate_setting_set+0x44c>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 80083f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80083f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 8008400:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008404:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008408:	4413      	add	r3, r2
 800840a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    while (device_framework_length != 0)
 800840e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008412:	2b00      	cmp	r3, #0
 8008414:	f47f ae27 	bne.w	8008066 <_ux_device_stack_alternate_setting_set+0x9a>
    }

    /* Return error completion.  */
    return(UX_ERROR);
 8008418:	23ff      	movs	r3, #255	; 0xff
#endif
}
 800841a:	4618      	mov	r0, r3
 800841c:	37b8      	adds	r7, #184	; 0xb8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	240005e8 	.word	0x240005e8

08008428 <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b092      	sub	sp, #72	; 0x48
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	603b      	str	r3, [r7, #0]

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 8008436:	2300      	movs	r3, #0
 8008438:	613b      	str	r3, [r7, #16]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 800843a:	f107 0310 	add.w	r3, r7, #16
 800843e:	223f      	movs	r2, #63	; 0x3f
 8008440:	4619      	mov	r1, r3
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f7fe f9ec 	bl	8006820 <_ux_utility_string_length_check>
 8008448:	6478      	str	r0, [r7, #68]	; 0x44
    if (status)
 800844a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <_ux_device_stack_class_register+0x2c>
        return(status);
 8008450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008452:	e032      	b.n	80084ba <_ux_device_stack_class_register+0x92>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8008454:	4b1b      	ldr	r3, [pc, #108]	; (80084c4 <_ux_device_stack_class_register+0x9c>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800845c:	643b      	str	r3, [r7, #64]	; 0x40
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
    {
#endif

        /* Check if this class is already used.  */
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 800845e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008462:	2b00      	cmp	r3, #0
 8008464:	d128      	bne.n	80084b8 <_ux_device_stack_class_register+0x90>

#if defined(UX_NAME_REFERENCED_BY_POINTER)
            class_inst -> ux_slave_class_name = (const UCHAR *)class_name;
#else
            /* We have found a free container for the class. Copy the name (with null-terminator).  */
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 8008466:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	3301      	adds	r3, #1
 800846c:	461a      	mov	r2, r3
 800846e:	68f9      	ldr	r1, [r7, #12]
 8008470:	f7fe f8b9 	bl	80065e6 <_ux_utility_memory_copy>
#endif
            
            /* Memorize the entry function of this class.  */
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 8008474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	645a      	str	r2, [r3, #68]	; 0x44

            /* Memorize the pointer to the application parameter.  */
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 800847a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800847c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800847e:	655a      	str	r2, [r3, #84]	; 0x54
            
            /* Memorize the configuration number on which this instance will be called.  */
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 8008480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	65da      	str	r2, [r3, #92]	; 0x5c
            
            /* Memorize the interface number on which this instance will be called.  */
            class_inst -> ux_slave_class_interface_number =  interface_number;
 8008486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	659a      	str	r2, [r3, #88]	; 0x58
            
            /* Build all the fields of the Class Command to initialize the class.  */
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 800848c:	2305      	movs	r3, #5
 800848e:	617b      	str	r3, [r7, #20]
            command.ux_slave_class_command_parameter  =  parameter;
 8008490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008492:	63bb      	str	r3, [r7, #56]	; 0x38
            command.ux_slave_class_command_class_ptr  =  class_inst;
 8008494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008496:	637b      	str	r3, [r7, #52]	; 0x34

            /* Call the class initialization routine.  */
            status = class_entry_function(&command);
 8008498:	f107 0214 	add.w	r2, r7, #20
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	4610      	mov	r0, r2
 80084a0:	4798      	blx	r3
 80084a2:	6478      	str	r0, [r7, #68]	; 0x44
            
            /* Check the status.  */
            if (status != UX_SUCCESS)
 80084a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <_ux_device_stack_class_register+0x86>
                return(status);
 80084aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ac:	e005      	b.n	80084ba <_ux_device_stack_class_register+0x92>
            
            /* Make this class used now.  */
            class_inst -> ux_slave_class_status = UX_USED;
 80084ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084b0:	2201      	movs	r2, #1
 80084b2:	641a      	str	r2, [r3, #64]	; 0x40

            /* Return successful completion.  */
            return(UX_SUCCESS);
 80084b4:	2300      	movs	r3, #0
 80084b6:	e000      	b.n	80084ba <_ux_device_stack_class_register+0x92>
        class_inst ++;
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 80084b8:	2312      	movs	r3, #18
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3748      	adds	r7, #72	; 0x48
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	240005e8 	.word	0x240005e8

080084c8 <_ux_device_stack_clear_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b08a      	sub	sp, #40	; 0x28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80084d4:	4b2a      	ldr	r3, [pc, #168]	; (8008580 <_ux_device_stack_clear_feature+0xb8>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80084da:	4b29      	ldr	r3, [pc, #164]	; (8008580 <_ux_device_stack_clear_feature+0xb8>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	3324      	adds	r3, #36	; 0x24
 80084e0:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	333c      	adds	r3, #60	; 0x3c
 80084e6:	617b      	str	r3, [r7, #20]

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f003 0303 	and.w	r3, r3, #3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d002      	beq.n	80084f8 <_ux_device_stack_clear_feature+0x30>
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d011      	beq.n	800851a <_ux_device_stack_clear_feature+0x52>
 80084f6:	e035      	b.n	8008564 <_ux_device_stack_clear_feature+0x9c>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d13a      	bne.n	8008574 <_ux_device_stack_clear_feature+0xac>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 80084fe:	4b20      	ldr	r3, [pc, #128]	; (8008580 <_ux_device_stack_clear_feature+0xb8>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8008506:	2b00      	cmp	r3, #0
 8008508:	d005      	beq.n	8008516 <_ux_device_stack_clear_feature+0x4e>
            {

                /* Disable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 800850a:	4b1d      	ldr	r3, [pc, #116]	; (8008580 <_ux_device_stack_clear_feature+0xb8>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2200      	movs	r2, #0
 8008510:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
        }

        break;
 8008514:	e02e      	b.n	8008574 <_ux_device_stack_clear_feature+0xac>
                return (UX_FUNCTION_NOT_SUPPORTED);
 8008516:	2354      	movs	r3, #84	; 0x54
 8008518:	e02e      	b.n	8008578 <_ux_device_stack_clear_feature+0xb0>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only clear feature for endpoint is ENDPOINT_STALL. This clears
           the endpoint of the stall situation and resets its data toggle. 
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008520:	627b      	str	r3, [r7, #36]	; 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 8008522:	e01c      	b.n	800855e <_ux_device_stack_clear_feature+0x96>
        {
#endif

            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 8008524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008528:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 800852a:	e012      	b.n	8008552 <_ux_device_stack_clear_feature+0x8a>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 800852c:	6a3b      	ldr	r3, [r7, #32]
 800852e:	695b      	ldr	r3, [r3, #20]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	429a      	cmp	r2, r3
 8008534:	d10a      	bne.n	800854c <_ux_device_stack_clear_feature+0x84>
                {

                    /* Reset the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	6a3a      	ldr	r2, [r7, #32]
 800853c:	2110      	movs	r1, #16
 800853e:	69f8      	ldr	r0, [r7, #28]
 8008540:	4798      	blx	r3
                    
                    /* Mark its state now.  */
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	2200      	movs	r2, #0
 8008546:	605a      	str	r2, [r3, #4]

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 8008548:	2300      	movs	r3, #0
 800854a:	e015      	b.n	8008578 <_ux_device_stack_clear_feature+0xb0>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008550:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1e9      	bne.n	800852c <_ux_device_stack_clear_feature+0x64>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855c:	627b      	str	r3, [r7, #36]	; 0x24
        while (interface_ptr != UX_NULL)
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1df      	bne.n	8008524 <_ux_device_stack_clear_feature+0x5c>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	2114      	movs	r1, #20
 800856c:	69f8      	ldr	r0, [r7, #28]
 800856e:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8008570:	2300      	movs	r3, #0
 8008572:	e001      	b.n	8008578 <_ux_device_stack_clear_feature+0xb0>
        break;
 8008574:	bf00      	nop
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3728      	adds	r7, #40	; 0x28
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	240005e8 	.word	0x240005e8

08008584 <_ux_device_stack_configuration_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_get(VOID)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800858a:	4b0f      	ldr	r3, [pc, #60]	; (80085c8 <_ux_device_stack_configuration_get+0x44>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3324      	adds	r3, #36	; 0x24
 8008590:	60fb      	str	r3, [r7, #12]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	333c      	adds	r3, #60	; 0x3c
 8008596:	60bb      	str	r3, [r7, #8]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	3330      	adds	r3, #48	; 0x30
 800859c:	607b      	str	r3, [r7, #4]

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	68db      	ldr	r3, [r3, #12]
                (UCHAR) device -> ux_slave_device_configuration_selected;
 80085a8:	b2d2      	uxtb	r2, r2
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 80085aa:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2203      	movs	r2, #3
 80085b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 80085b2:	2201      	movs	r2, #1
 80085b4:	2101      	movs	r1, #1
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f001 fa41 	bl	8009a3e <_ux_device_stack_transfer_request>
 80085bc:	6038      	str	r0, [r7, #0]

    /* Return the function status.  */
    return(status);
 80085be:	683b      	ldr	r3, [r7, #0]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	240005e8 	.word	0x240005e8

080085cc <_ux_device_stack_configuration_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b0ac      	sub	sp, #176	; 0xb0
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 80085d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80085d8:	2220      	movs	r2, #32
 80085da:	2100      	movs	r1, #0
 80085dc:	4618      	mov	r0, r3
 80085de:	f002 f9f5 	bl	800a9cc <memset>
UX_SLAVE_INTERFACE              *interface_ptr; 
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE              *next_interface; 
#endif
UX_SLAVE_CLASS                  *class_inst;
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 80085e2:	2300      	movs	r3, #0
 80085e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
UX_SLAVE_CLASS_COMMAND          class_command;
UX_SLAVE_DEVICE                 *device;
ULONG                           iad_flag;
ULONG                           iad_first_interface =  0;
 80085e8:	2300      	movs	r3, #0
 80085ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
ULONG                           iad_number_interfaces =  0;
 80085ee:	2300      	movs	r3, #0
 80085f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80085f4:	4b9b      	ldr	r3, [pc, #620]	; (8008864 <_ux_device_stack_configuration_set+0x298>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80085fc:	4b99      	ldr	r3, [pc, #612]	; (8008864 <_ux_device_stack_configuration_set+0x298>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	3324      	adds	r3, #36	; 0x24
 8008602:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;
 8008606:	2300      	movs	r3, #0
 8008608:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 800860c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008610:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	429a      	cmp	r2, r3
 8008618:	d101      	bne.n	800861e <_ux_device_stack_configuration_set+0x52>
        return(UX_SUCCESS);
 800861a:	2300      	movs	r3, #0
 800861c:	e16e      	b.n	80088fc <_ux_device_stack_configuration_set+0x330>

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 800861e:	4b91      	ldr	r3, [pc, #580]	; (8008864 <_ux_device_stack_configuration_set+0x298>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008626:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800862a:	4b8e      	ldr	r3, [pc, #568]	; (8008864 <_ux_device_stack_configuration_set+0x298>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008632:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 8008636:	e027      	b.n	8008688 <_ux_device_stack_configuration_set+0xbc>
    {
        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8008638:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 8008642:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008646:	785b      	ldrb	r3, [r3, #1]
 8008648:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

        /* Check if this is a configuration descriptor.  */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800864c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008650:	2b02      	cmp	r3, #2
 8008652:	d10b      	bne.n	800866c <_ux_device_stack_configuration_set+0xa0>
        {
            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 8008654:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008658:	2208      	movs	r2, #8
 800865a:	4983      	ldr	r1, [pc, #524]	; (8008868 <_ux_device_stack_configuration_set+0x29c>)
 800865c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8008660:	f7fd fe4c 	bl	80062fc <_ux_utility_descriptor_parse>
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value. It has
               to be the same as the one specified in the setup function.  */
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 8008664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	429a      	cmp	r2, r3
 800866a:	d012      	beq.n	8008692 <_ux_device_stack_configuration_set+0xc6>
                /* The configuration is found. */
                break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
 800866c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008670:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 800867a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800867e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008682:	4413      	add	r3, r2
 8008684:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    while (device_framework_length != 0)
 8008688:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1d3      	bne.n	8008638 <_ux_device_stack_configuration_set+0x6c>
 8008690:	e000      	b.n	8008694 <_ux_device_stack_configuration_set+0xc8>
                break;
 8008692:	bf00      	nop
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 8008694:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008698:	2b00      	cmp	r3, #0
 800869a:	d104      	bne.n	80086a6 <_ux_device_stack_configuration_set+0xda>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <_ux_device_stack_configuration_set+0xda>
        return(UX_ERROR);
 80086a2:	23ff      	movs	r3, #255	; 0xff
 80086a4:	e12a      	b.n	80088fc <_ux_device_stack_configuration_set+0x330>

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 80086a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d02d      	beq.n	800870e <_ux_device_stack_configuration_set+0x142>
    {

        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 80086b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80086ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Deactivate all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 80086be:	e022      	b.n	8008706 <_ux_device_stack_configuration_set+0x13a>
        {
#endif
            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 80086c0:	2303      	movs	r3, #3
 80086c2:	60fb      	str	r3, [r7, #12]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 80086c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80086c8:	617b      	str	r3, [r7, #20]

            /* Get the pointer to the class container of this interface.  */
            class_inst =  interface_ptr -> ux_slave_interface_class;
 80086ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 80086d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80086d8:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* If there is a class container for this instance, deactivate it.  */
            if (class_inst != UX_NULL)
 80086da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d006      	beq.n	80086f0 <_ux_device_stack_configuration_set+0x124>

                /* Call the class with the DEACTIVATE signal.  */
                class_inst -> ux_slave_class_entry_function(&class_command);
 80086e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80086e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e8:	f107 020c 	add.w	r2, r7, #12
 80086ec:	4610      	mov	r0, r2
 80086ee:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 80086f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80086f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f6:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 80086f8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80086fc:	f000 ff22 	bl	8009544 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 8008700:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008702:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        while (interface_ptr != UX_NULL)
 8008706:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1d8      	bne.n	80086c0 <_ux_device_stack_configuration_set+0xf4>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 800870e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008712:	2200      	movs	r2, #0
 8008714:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 8008718:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800871c:	2201      	movs	r2, #1
 800871e:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 8008720:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	2201      	movs	r2, #1
 8008728:	2113      	movs	r1, #19
 800872a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800872e:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <_ux_device_stack_configuration_set+0x16e>
        return(UX_SUCCESS);
 8008736:	2300      	movs	r3, #0
 8008738:	e0e0      	b.n	80088fc <_ux_device_stack_configuration_set+0x330>

    /* Memorize the configuration selected.  */
    device -> ux_slave_device_configuration_selected =  configuration_value;
 800873a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    /* We have found the configuration value requested by the host.
       Create the configuration descriptor and attach it to the device.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_configuration_descriptor_structure,
                UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                (UCHAR *) &device -> ux_slave_device_configuration_descriptor);
 8008744:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008748:	33b8      	adds	r3, #184	; 0xb8
    _ux_utility_descriptor_parse(device_framework,
 800874a:	2208      	movs	r2, #8
 800874c:	4946      	ldr	r1, [pc, #280]	; (8008868 <_ux_device_stack_configuration_set+0x29c>)
 800874e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8008752:	f7fd fdd3 	bl	80062fc <_ux_utility_descriptor_parse>

    /* Configuration character D6 is for Self-powered */
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 8008756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800875c:	2b00      	cmp	r3, #0
 800875e:	d001      	beq.n	8008764 <_ux_device_stack_configuration_set+0x198>
 8008760:	2202      	movs	r2, #2
 8008762:	e000      	b.n	8008766 <_ux_device_stack_configuration_set+0x19a>
 8008764:	2201      	movs	r2, #1
 8008766:	4b3f      	ldr	r3, [pc, #252]	; (8008864 <_ux_device_stack_configuration_set+0x298>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

    /* Configuration character D5 is for Remote Wakeup */
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 800876e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008770:	095a      	lsrs	r2, r3, #5
 8008772:	4b3c      	ldr	r3, [pc, #240]	; (8008864 <_ux_device_stack_configuration_set+0x298>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f002 0201 	and.w	r2, r2, #1
 800877a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

    /* Search only in current configuration */
    device_framework_length =  configuration_descriptor.wTotalLength;
 800877e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008780:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    /*  We need to scan all the interface descriptors following this
        configuration descriptor and enable all endpoints associated
        with the default alternate setting of each interface.  */
    while (device_framework_length != 0)
 8008784:	e0a8      	b.n	80088d8 <_ux_device_stack_configuration_set+0x30c>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8008786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 8008790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008794:	785b      	ldrb	r3, [r3, #1]
 8008796:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

        /* Check if this is an interface association descriptor.  */
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 800879a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800879e:	2b0b      	cmp	r3, #11
 80087a0:	d10e      	bne.n	80087c0 <_ux_device_stack_configuration_set+0x1f4>
        {

            /* Set the IAD flag.  */
            iad_flag = UX_TRUE;
 80087a2:	2301      	movs	r3, #1
 80087a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

            /* Get the first interface we have in the IAD. */
            iad_first_interface = (ULONG)  *(device_framework + 2);
 80087a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087ac:	3302      	adds	r3, #2
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

            /* Get the number of interfaces we have in the IAD. */
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 80087b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087b8:	3303      	adds	r3, #3
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        }

        /* Check if this is an interface descriptor.  */
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 80087c0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80087c4:	2b04      	cmp	r3, #4
 80087c6:	d179      	bne.n	80088bc <_ux_device_stack_configuration_set+0x2f0>
        {

            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 80087c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80087cc:	2209      	movs	r2, #9
 80087ce:	4927      	ldr	r1, [pc, #156]	; (800886c <_ux_device_stack_configuration_set+0x2a0>)
 80087d0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80087d4:	f7fd fd92 	bl	80062fc <_ux_utility_descriptor_parse>
                        UX_INTERFACE_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &interface_descriptor);

            /* If the alternate setting is 0 for this interface, we need to
               memorize its class association and start it.  */
            if (interface_descriptor.bAlternateSetting == 0)
 80087d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d16e      	bne.n	80088bc <_ux_device_stack_configuration_set+0x2f0>
            {

                /* Are we in a IAD scenario ? */
                if (iad_flag == UX_TRUE)
 80087de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d144      	bne.n	8008870 <_ux_device_stack_configuration_set+0x2a4>
                {

                    /* Check if this is the first interface from the IAD. In this case,
                       we need to match a class to this interface.  */
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 80087e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d123      	bne.n	8008838 <_ux_device_stack_configuration_set+0x26c>
                    {

                        /* First interface. Scan the list of classes to find a match.  */
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 80087f0:	4b1c      	ldr	r3, [pc, #112]	; (8008864 <_ux_device_stack_configuration_set+0x298>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80087f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                        {
#endif

                            /* Check if this class driver is used.  */
                            if (class_inst -> ux_slave_class_status == UX_USED)
 80087fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008802:	2b01      	cmp	r3, #1
 8008804:	d120      	bne.n	8008848 <_ux_device_stack_configuration_set+0x27c>
                            {

                                /* Check if this is the same interface for the same configuration. */
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8008806:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008808:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800880c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800880e:	429a      	cmp	r2, r3
 8008810:	d11a      	bne.n	8008848 <_ux_device_stack_configuration_set+0x27c>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 8008812:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	429a      	cmp	r2, r3
 800881c:	d114      	bne.n	8008848 <_ux_device_stack_configuration_set+0x27c>
                                {

                                    /* Memorize the class in the class/interface array.  */
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800881e:	4b11      	ldr	r3, [pc, #68]	; (8008864 <_ux_device_stack_configuration_set+0x298>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008824:	3252      	adds	r2, #82	; 0x52
 8008826:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800882a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                                    /* And again as the current class.  */
                                    current_class = class_inst;
 800882e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008832:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008836:	e007      	b.n	8008848 <_ux_device_stack_configuration_set+0x27c>
#endif
                    }
                    else

                        /* Memorize the class in the class/interface array.  We use the current class. */
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 8008838:	4b0a      	ldr	r3, [pc, #40]	; (8008864 <_ux_device_stack_configuration_set+0x298>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800883e:	3252      	adds	r2, #82	; 0x52
 8008840:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Decrement the number of interfaces found in the same IAD.  */
                    iad_number_interfaces--;
 8008848:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800884c:	3b01      	subs	r3, #1
 800884e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                    /* If none are left, get out of the IAD state machine.  */
                    if (iad_number_interfaces == 0)
 8008852:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008856:	2b00      	cmp	r3, #0
 8008858:	d129      	bne.n	80088ae <_ux_device_stack_configuration_set+0x2e2>

                        /* We have exhausted the interfaces within the IAD.  */
                        iad_flag = UX_FALSE;
 800885a:	2300      	movs	r3, #0
 800885c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008860:	e025      	b.n	80088ae <_ux_device_stack_configuration_set+0x2e2>
 8008862:	bf00      	nop
 8008864:	240005e8 	.word	0x240005e8
 8008868:	24000028 	.word	0x24000028
 800886c:	24000030 	.word	0x24000030
                }
                else
                {

                    /* First interface. Scan the list of classes to find a match.  */
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8008870:	4b24      	ldr	r3, [pc, #144]	; (8008904 <_ux_device_stack_configuration_set+0x338>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8008878:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                    {
#endif

                        /* Check if this class driver is used.  */
                        if (class_inst -> ux_slave_class_status == UX_USED)
 800887c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008882:	2b01      	cmp	r3, #1
 8008884:	d113      	bne.n	80088ae <_ux_device_stack_configuration_set+0x2e2>
                        {

                            /* Check if this is the same interface for the same configuration. */
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8008886:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008888:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800888c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800888e:	429a      	cmp	r2, r3
 8008890:	d10d      	bne.n	80088ae <_ux_device_stack_configuration_set+0x2e2>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 8008892:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	429a      	cmp	r2, r3
 800889c:	d107      	bne.n	80088ae <_ux_device_stack_configuration_set+0x2e2>
                            {

                                /* Memorize the class in the class/interface array.  */
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800889e:	4b19      	ldr	r3, [pc, #100]	; (8008904 <_ux_device_stack_configuration_set+0x338>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088a4:	3252      	adds	r2, #82	; 0x52
 80088a6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80088aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    }
#endif
                }

                /* Set the interface.  */
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 80088ae:	2200      	movs	r2, #0
 80088b0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80088b4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80088b8:	f000 fe8c 	bl	80095d4 <_ux_device_stack_interface_set>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 80088bc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80088c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 80088ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80088ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088d2:	4413      	add	r3, r2
 80088d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    while (device_framework_length != 0)
 80088d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f47f af52 	bne.w	8008786 <_ux_device_stack_configuration_set+0x1ba>
    }

    /* Mark the device as configured now. */
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 80088e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088e6:	2203      	movs	r2, #3
 80088e8:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 80088ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	2203      	movs	r2, #3
 80088f2:	2113      	movs	r1, #19
 80088f4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80088f8:	4798      	blx	r3

    /* Configuration mounted. */
    return(UX_SUCCESS);
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	37b0      	adds	r7, #176	; 0xb0
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	240005e8 	.word	0x240005e8

08008908 <_ux_device_stack_control_request_process>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 8008908:	b590      	push	{r4, r7, lr}
 800890a:	b09d      	sub	sp, #116	; 0x74
 800890c:	af02      	add	r7, sp, #8
 800890e:	6078      	str	r0, [r7, #4]
ULONG                       request;
ULONG                       request_value;
ULONG                       request_index;
ULONG                       request_length;
ULONG                       class_index;
UINT                        status =  UX_ERROR;
 8008910:	23ff      	movs	r3, #255	; 0xff
 8008912:	65fb      	str	r3, [r7, #92]	; 0x5c
UX_SLAVE_ENDPOINT           *endpoint;
ULONG                       application_data_length;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8008914:	4b9e      	ldr	r3, [pc, #632]	; (8008b90 <_ux_device_stack_control_request_process+0x288>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800891a:	4b9d      	ldr	r3, [pc, #628]	; (8008b90 <_ux_device_stack_control_request_process+0x288>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	3324      	adds	r3, #36	; 0x24
 8008920:	657b      	str	r3, [r7, #84]	; 0x54

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008926:	2b00      	cmp	r3, #0
 8008928:	f040 812c 	bne.w	8008b84 <_ux_device_stack_control_request_process+0x27c>
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008932:	667b      	str	r3, [r7, #100]	; 0x64
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800893a:	653b      	str	r3, [r7, #80]	; 0x50
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	333c      	adds	r3, #60	; 0x3c
 8008940:	3302      	adds	r3, #2
 8008942:	4618      	mov	r0, r3
 8008944:	f7fd ff54 	bl	80067f0 <_ux_utility_short_get>
 8008948:	64f8      	str	r0, [r7, #76]	; 0x4c
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	333c      	adds	r3, #60	; 0x3c
 800894e:	3304      	adds	r3, #4
 8008950:	4618      	mov	r0, r3
 8008952:	f7fd ff4d 	bl	80067f0 <_ux_utility_short_get>
 8008956:	64b8      	str	r0, [r7, #72]	; 0x48
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	333c      	adds	r3, #60	; 0x3c
 800895c:	3306      	adds	r3, #6
 800895e:	4618      	mov	r0, r3
 8008960:	f7fd ff46 	bl	80067f0 <_ux_utility_short_get>
 8008964:	6478      	str	r0, [r7, #68]	; 0x44

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 8008966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008968:	2b06      	cmp	r3, #6
 800896a:	d002      	beq.n	8008972 <_ux_device_stack_control_request_process+0x6a>
 800896c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800896e:	2b07      	cmp	r3, #7
 8008970:	d10d      	bne.n	800898e <_ux_device_stack_control_request_process+0x86>
 8008972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008974:	0a1b      	lsrs	r3, r3, #8
 8008976:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800897a:	2b00      	cmp	r3, #0
 800897c:	d007      	beq.n	800898e <_ux_device_stack_control_request_process+0x86>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 800897e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008980:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8008984:	667b      	str	r3, [r7, #100]	; 0x64
            request_type |= UX_REQUEST_TYPE_CLASS;
 8008986:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008988:	f043 0320 	orr.w	r3, r3, #32
 800898c:	667b      	str	r3, [r7, #100]	; 0x64
        }                   

        /* Check if there is a vendor registered function at the application layer.  If the request
           is VENDOR and the request match, pass the request to the application.  */
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 800898e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008990:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008994:	2b40      	cmp	r3, #64	; 0x40
 8008996:	d134      	bne.n	8008a02 <_ux_device_stack_control_request_process+0xfa>
        {

            /* Check the request demanded and compare it to the application registered one.  */
            if (request == _ux_system_slave -> ux_system_slave_device_vendor_request)
 8008998:	4b7d      	ldr	r3, [pc, #500]	; (8008b90 <_ux_device_stack_control_request_process+0x288>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80089a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d12d      	bne.n	8008a02 <_ux_device_stack_control_request_process+0xfa>
            {

                /* This is a Microsoft extended function. It happens before the device is configured. 
                   The request is passed to the application directly.  */
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 80089a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089aa:	60fb      	str	r3, [r7, #12]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 80089ac:	4b78      	ldr	r3, [pc, #480]	; (8008b90 <_ux_device_stack_control_request_process+0x288>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f8d3 41b4 	ldr.w	r4, [r3, #436]	; 0x1b4
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	f107 020c 	add.w	r2, r7, #12
 80089bc:	9201      	str	r2, [sp, #4]
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80089c6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80089c8:	47a0      	blx	r4
 80089ca:	65f8      	str	r0, [r7, #92]	; 0x5c
                                                                                            request_index, request_length, 
                                                                                            transfer_request -> ux_slave_transfer_request_data_pointer,
                                                                                            &application_data_length);

                /* Check the status from the application.  */
                if (status == UX_SUCCESS)
 80089cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d110      	bne.n	80089f4 <_ux_device_stack_control_request_process+0xec>
                {
                
                    /* Get the control endpoint associated with the device.  */
                    endpoint =  &device -> ux_slave_device_control_endpoint;
 80089d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089d4:	333c      	adds	r3, #60	; 0x3c
 80089d6:	643b      	str	r3, [r7, #64]	; 0x40
    
                    /* Get the pointer to the transfer request associated with the control endpoint.  */
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80089d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089da:	3330      	adds	r3, #48	; 0x30
 80089dc:	607b      	str	r3, [r7, #4]
    
                    /* Set the direction to OUT.  */
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2203      	movs	r2, #3
 80089e2:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Perform the data transfer.  */
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089e8:	4619      	mov	r1, r3
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f001 f827 	bl	8009a3e <_ux_device_stack_transfer_request>

                    /* We are done here.  */
                    return(UX_SUCCESS);
 80089f0:	2300      	movs	r3, #0
 80089f2:	e0c8      	b.n	8008b86 <_ux_device_stack_control_request_process+0x27e>
                }
                else
                {

                    /* The application did not like the vendor command format, stall the control endpoint.  */
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 80089f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089f6:	333c      	adds	r3, #60	; 0x3c
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 fb5b 	bl	80090b4 <_ux_device_stack_endpoint_stall>
                    
                    /* We are done here.  */
                    return(UX_SUCCESS);
 80089fe:	2300      	movs	r3, #0
 8008a00:	e0c1      	b.n	8008b86 <_ux_device_stack_control_request_process+0x27e>
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 8008a02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a08:	2b20      	cmp	r3, #32
 8008a0a:	d004      	beq.n	8008a16 <_ux_device_stack_control_request_process+0x10e>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
 8008a0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 8008a12:	2b40      	cmp	r3, #64	; 0x40
 8008a14:	d149      	bne.n	8008aaa <_ux_device_stack_control_request_process+0x1a2>
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 8008a16:	2304      	movs	r3, #4
 8008a18:	613b      	str	r3, [r7, #16]

            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	663b      	str	r3, [r7, #96]	; 0x60
 8008a1e:	e035      	b.n	8008a8c <_ux_device_stack_control_request_process+0x184>
            {

                /* Get the class for the interface.  */
                class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 8008a20:	4b5b      	ldr	r3, [pc, #364]	; (8008b90 <_ux_device_stack_control_request_process+0x288>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a26:	3252      	adds	r2, #82	; 0x52
 8008a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a2c:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* If class is not ready, try next.  */
                if (class_ptr == UX_NULL)
 8008a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d025      	beq.n	8008a80 <_ux_device_stack_control_request_process+0x178>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 8008a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a36:	f003 0303 	and.w	r3, r3, #3
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d113      	bne.n	8008a66 <_ux_device_stack_control_request_process+0x15e>
                       the request is for. So if the current index does not match 
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).  */
                    if (((request_index & 0xFF) != class_index) ||
 8008a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d11d      	bne.n	8008a84 <_ux_device_stack_control_request_process+0x17c>
                        ((class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 8008a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
                    if (((request_index & 0xFF) != class_index) ||
 8008a4e:	2b07      	cmp	r3, #7
 8008a50:	d109      	bne.n	8008a66 <_ux_device_stack_control_request_process+0x15e>
                        ((class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 8008a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d106      	bne.n	8008a66 <_ux_device_stack_control_request_process+0x15e>
                         (request == 0x00) &&
                         *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a5e:	461a      	mov	r2, r3
                         (request == 0x00) &&
 8008a60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d10e      	bne.n	8008a84 <_ux_device_stack_control_request_process+0x17c>
                        continue;
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class_ptr;
 8008a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a68:	633b      	str	r3, [r7, #48]	; 0x30

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8008a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a6e:	f107 0210 	add.w	r2, r7, #16
 8008a72:	4610      	mov	r0, r2
 8008a74:	4798      	blx	r3
 8008a76:	65f8      	str	r0, [r7, #92]	; 0x5c

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 8008a78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00a      	beq.n	8008a94 <_ux_device_stack_control_request_process+0x18c>
 8008a7e:	e002      	b.n	8008a86 <_ux_device_stack_control_request_process+0x17e>
                    continue;
 8008a80:	bf00      	nop
 8008a82:	e000      	b.n	8008a86 <_ux_device_stack_control_request_process+0x17e>
                        continue;
 8008a84:	bf00      	nop
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 8008a86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a88:	3301      	adds	r3, #1
 8008a8a:	663b      	str	r3, [r7, #96]	; 0x60
 8008a8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a8e:	2b0f      	cmp	r3, #15
 8008a90:	d9c6      	bls.n	8008a20 <_ux_device_stack_control_request_process+0x118>
 8008a92:	e000      	b.n	8008a96 <_ux_device_stack_control_request_process+0x18e>

                    /* We are done, break the loop!  */
                    break;
 8008a94:	bf00      	nop

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 8008a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d004      	beq.n	8008aa6 <_ux_device_stack_control_request_process+0x19e>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8008a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a9e:	333c      	adds	r3, #60	; 0x3c
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 fb07 	bl	80090b4 <_ux_device_stack_endpoint_stall>

            /* We are done for class/vendor request.  */
            return(status);
 8008aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aa8:	e06d      	b.n	8008b86 <_ux_device_stack_control_request_process+0x27e>
        }

        /* At this point, the request must be a standard request that the device stack should handle.  */
        switch (request)
 8008aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aac:	2b0c      	cmp	r3, #12
 8008aae:	d85e      	bhi.n	8008b6e <_ux_device_stack_control_request_process+0x266>
 8008ab0:	a201      	add	r2, pc, #4	; (adr r2, 8008ab8 <_ux_device_stack_control_request_process+0x1b0>)
 8008ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab6:	bf00      	nop
 8008ab8:	08008aed 	.word	0x08008aed
 8008abc:	08008afb 	.word	0x08008afb
 8008ac0:	08008b6f 	.word	0x08008b6f
 8008ac4:	08008b09 	.word	0x08008b09
 8008ac8:	08008b6f 	.word	0x08008b6f
 8008acc:	08008b17 	.word	0x08008b17
 8008ad0:	08008b2d 	.word	0x08008b2d
 8008ad4:	08008b3b 	.word	0x08008b3b
 8008ad8:	08008b41 	.word	0x08008b41
 8008adc:	08008b49 	.word	0x08008b49
 8008ae0:	08008b53 	.word	0x08008b53
 8008ae4:	08008b5d 	.word	0x08008b5d
 8008ae8:	08008b69 	.word	0x08008b69
        {

        case UX_GET_STATUS:

            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 8008aec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008aee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008af0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008af2:	f000 fb0f 	bl	8009114 <_ux_device_stack_get_status>
 8008af6:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 8008af8:	e03c      	b.n	8008b74 <_ux_device_stack_control_request_process+0x26c>

        case UX_CLEAR_FEATURE:

            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 8008afa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008afc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008afe:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008b00:	f7ff fce2 	bl	80084c8 <_ux_device_stack_clear_feature>
 8008b04:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 8008b06:	e035      	b.n	8008b74 <_ux_device_stack_control_request_process+0x26c>

        case UX_SET_FEATURE:

            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 8008b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b0a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008b0c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008b0e:	f000 fec3 	bl	8009898 <_ux_device_stack_set_feature>
 8008b12:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 8008b14:	e02e      	b.n	8008b74 <_ux_device_stack_control_request_process+0x26c>

        case UX_SET_ADDRESS:
        
            /* Memorize the address. Some controllers memorize the address here. Some don't.  */
            dcd -> ux_slave_dcd_device_address =  request_value;
 8008b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b1a:	615a      	str	r2, [r3, #20]

            /* Force the new address.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 8008b1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b22:	2111      	movs	r1, #17
 8008b24:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008b26:	4798      	blx	r3
 8008b28:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 8008b2a:	e023      	b.n	8008b74 <_ux_device_stack_control_request_process+0x26c>

        case UX_GET_DESCRIPTOR:

            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 8008b2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b2e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008b30:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008b32:	f000 f82f 	bl	8008b94 <_ux_device_stack_descriptor_send>
 8008b36:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 8008b38:	e01c      	b.n	8008b74 <_ux_device_stack_control_request_process+0x26c>

        case UX_SET_DESCRIPTOR:

            status = UX_FUNCTION_NOT_SUPPORTED;
 8008b3a:	2354      	movs	r3, #84	; 0x54
 8008b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8008b3e:	e019      	b.n	8008b74 <_ux_device_stack_control_request_process+0x26c>

        case UX_GET_CONFIGURATION:

            status =  _ux_device_stack_configuration_get();
 8008b40:	f7ff fd20 	bl	8008584 <_ux_device_stack_configuration_get>
 8008b44:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 8008b46:	e015      	b.n	8008b74 <_ux_device_stack_control_request_process+0x26c>

        case UX_SET_CONFIGURATION:

            status =  _ux_device_stack_configuration_set(request_value);
 8008b48:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008b4a:	f7ff fd3f 	bl	80085cc <_ux_device_stack_configuration_set>
 8008b4e:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 8008b50:	e010      	b.n	8008b74 <_ux_device_stack_control_request_process+0x26c>

        case UX_GET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_get(request_index);
 8008b52:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008b54:	f7ff f9fc 	bl	8007f50 <_ux_device_stack_alternate_setting_get>
 8008b58:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 8008b5a:	e00b      	b.n	8008b74 <_ux_device_stack_control_request_process+0x26c>
                
        case UX_SET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 8008b5c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008b5e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008b60:	f7ff fa34 	bl	8007fcc <_ux_device_stack_alternate_setting_set>
 8008b64:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 8008b66:	e005      	b.n	8008b74 <_ux_device_stack_control_request_process+0x26c>
                

        case UX_SYNCH_FRAME:

            status = UX_SUCCESS;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8008b6c:	e002      	b.n	8008b74 <_ux_device_stack_control_request_process+0x26c>

        default :

            status = UX_FUNCTION_NOT_SUPPORTED;
 8008b6e:	2354      	movs	r3, #84	; 0x54
 8008b70:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8008b72:	bf00      	nop
        }

        if (status != UX_SUCCESS)
 8008b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d004      	beq.n	8008b84 <_ux_device_stack_control_request_process+0x27c>

            /* Stall the control endpoint to issue protocol error. */
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8008b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b7c:	333c      	adds	r3, #60	; 0x3c
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 fa98 	bl	80090b4 <_ux_device_stack_endpoint_stall>
    }

    /* Return the function status.  */
    return(status);
 8008b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	376c      	adds	r7, #108	; 0x6c
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd90      	pop	{r4, r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	240005e8 	.word	0x240005e8

08008b94 <_ux_device_stack_descriptor_send>:
/*                                            internal clean up,          */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b0a2      	sub	sp, #136	; 0x88
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR                           *device_framework;
UCHAR                           *device_framework_end;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
ULONG                           target_descriptor_length = 0;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	677b      	str	r3, [r7, #116]	; 0x74
UINT                            status =  UX_ERROR;
 8008ba4:	23ff      	movs	r3, #255	; 0xff
 8008ba6:	673b      	str	r3, [r7, #112]	; 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8008ba8:	4ba4      	ldr	r3, [pc, #656]	; (8008e3c <_ux_device_stack_descriptor_send+0x2a8>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8008bae:	4ba3      	ldr	r3, [pc, #652]	; (8008e3c <_ux_device_stack_descriptor_send+0x2a8>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3324      	adds	r3, #36	; 0x24
 8008bb4:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8008bb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bb8:	333c      	adds	r3, #60	; 0x3c
 8008bba:	657b      	str	r3, [r7, #84]	; 0x54

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8008bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bbe:	3330      	adds	r3, #48	; 0x30
 8008bc0:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8008bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bc4:	2203      	movs	r2, #3
 8008bc6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	0a1b      	lsrs	r3, r3, #8
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	60fb      	str	r3, [r7, #12]

    /* Default descriptor length is host length.  */
    length =  host_length;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	3b01      	subs	r3, #1
 8008be4:	2b0e      	cmp	r3, #14
 8008be6:	f200 81f8 	bhi.w	8008fda <_ux_device_stack_descriptor_send+0x446>
 8008bea:	a201      	add	r2, pc, #4	; (adr r2, 8008bf0 <_ux_device_stack_descriptor_send+0x5c>)
 8008bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf0:	08008c2d 	.word	0x08008c2d
 8008bf4:	08008cd1 	.word	0x08008cd1
 8008bf8:	08008e0d 	.word	0x08008e0d
 8008bfc:	08008fdb 	.word	0x08008fdb
 8008c00:	08008fdb 	.word	0x08008fdb
 8008c04:	08008c37 	.word	0x08008c37
 8008c08:	08008cd1 	.word	0x08008cd1
 8008c0c:	08008fdb 	.word	0x08008fdb
 8008c10:	08008c47 	.word	0x08008c47
 8008c14:	08008fdb 	.word	0x08008fdb
 8008c18:	08008fdb 	.word	0x08008fdb
 8008c1c:	08008fdb 	.word	0x08008fdb
 8008c20:	08008fdb 	.word	0x08008fdb
 8008c24:	08008fdb 	.word	0x08008fdb
 8008c28:	08008cd1 	.word	0x08008cd1
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b12      	cmp	r3, #18
 8008c30:	d901      	bls.n	8008c36 <_ux_device_stack_descriptor_send+0xa2>
            length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 8008c32:	2312      	movs	r3, #18
 8008c34:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Fall through.  */
    case UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM:

        /* Setup qualifier descriptor length.  */
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2b06      	cmp	r3, #6
 8008c3a:	d104      	bne.n	8008c46 <_ux_device_stack_descriptor_send+0xb2>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b0a      	cmp	r3, #10
 8008c40:	d901      	bls.n	8008c46 <_ux_device_stack_descriptor_send+0xb2>
            host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH)
            length =  UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH;
 8008c42:	230a      	movs	r3, #10
 8008c44:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Fall through.  */
    case UX_OTG_DESCRIPTOR_ITEM:

        /* Setup OTG descriptor length.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2b09      	cmp	r3, #9
 8008c4a:	d104      	bne.n	8008c56 <_ux_device_stack_descriptor_send+0xc2>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2b05      	cmp	r3, #5
 8008c50:	d901      	bls.n	8008c56 <_ux_device_stack_descriptor_send+0xc2>
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 8008c52:	2305      	movs	r3, #5
 8008c54:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8008c56:	4b79      	ldr	r3, [pc, #484]	; (8008e3c <_ux_device_stack_descriptor_send+0x2a8>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008c5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8008c62:	4b76      	ldr	r3, [pc, #472]	; (8008e3c <_ux_device_stack_descriptor_send+0x2a8>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008c6a:	67bb      	str	r3, [r7, #120]	; 0x78
        device_framework_end = device_framework + device_framework_length;
 8008c6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c72:	4413      	add	r3, r2
 8008c74:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 8008c76:	e025      	b.n	8008cc4 <_ux_device_stack_descriptor_send+0x130>
        {

            /* Get descriptor length.  */
            descriptor_length =  (ULONG) *device_framework;
 8008c78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	647b      	str	r3, [r7, #68]	; 0x44

            /* Check if this is a descriptor expected.  */
            if (*(device_framework + 1) == descriptor_type)
 8008c80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c84:	3301      	adds	r3, #1
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d10f      	bne.n	8008cb0 <_ux_device_stack_descriptor_send+0x11c>
            {

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 8008c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c96:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fd fca3 	bl	80065e6 <_ux_utility_memory_copy>
                                                device_framework, length); /* Use case of memcpy is verified. */

                /* Perform the data transfer.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008ca4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008ca6:	f000 feca 	bl	8009a3e <_ux_device_stack_transfer_request>
 8008caa:	6738      	str	r0, [r7, #112]	; 0x70
                break;
 8008cac:	bf00      	nop
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
        }
        break;
 8008cae:	e19f      	b.n	8008ff0 <_ux_device_stack_descriptor_send+0x45c>
            device_framework_length -=  descriptor_length;
 8008cb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework +=  descriptor_length;
 8008cb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        while (device_framework < device_framework_end)
 8008cc4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008cc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d3d4      	bcc.n	8008c78 <_ux_device_stack_descriptor_send+0xe4>
        break;
 8008cce:	e18f      	b.n	8008ff0 <_ux_device_stack_descriptor_send+0x45c>
#endif
    case UX_OTHER_SPEED_DESCRIPTOR_ITEM:
        /* Fall through.  */
    case UX_CONFIGURATION_DESCRIPTOR_ITEM:

        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2b07      	cmp	r3, #7
 8008cd4:	d110      	bne.n	8008cf8 <_ux_device_stack_descriptor_send+0x164>
        {

            /* This request is used by the host to find out the capability of this device
            if it was running at full speed. The behavior is the same as in a GET_CONFIGURATIOn descriptor
            but we do not use the current device framework but rather the full speed framework. */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 8008cd6:	4b59      	ldr	r3, [pc, #356]	; (8008e3c <_ux_device_stack_descriptor_send+0x2a8>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008cde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 8008ce2:	4b56      	ldr	r3, [pc, #344]	; (8008e3c <_ux_device_stack_descriptor_send+0x2a8>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008cea:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework_end = device_framework + device_framework_length;
 8008cec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cf2:	4413      	add	r3, r2
 8008cf4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008cf6:	e051      	b.n	8008d9c <_ux_device_stack_descriptor_send+0x208>
        else
        {

            /* We may have multiple configurations !, the index will tell us what
            configuration descriptor we need to return.  */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8008cf8:	4b50      	ldr	r3, [pc, #320]	; (8008e3c <_ux_device_stack_descriptor_send+0x2a8>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008d00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8008d04:	4b4d      	ldr	r3, [pc, #308]	; (8008e3c <_ux_device_stack_descriptor_send+0x2a8>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008d0c:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework_end = device_framework + device_framework_length;
 8008d0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d14:	4413      	add	r3, r2
 8008d16:	67fb      	str	r3, [r7, #124]	; 0x7c
        }

        /* Parse the device framework and locate a configuration descriptor.  */
        while (device_framework < device_framework_end)
 8008d18:	e040      	b.n	8008d9c <_ux_device_stack_descriptor_send+0x208>
        {

            /* Get descriptor length. */
            descriptor_length =  (ULONG) *device_framework;
 8008d1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	647b      	str	r3, [r7, #68]	; 0x44

#ifndef UX_BOS_SUPPORT_DISABLE

            /* Check if we are finding BOS descriptor.  */
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2b0f      	cmp	r3, #15
 8008d26:	d112      	bne.n	8008d4e <_ux_device_stack_descriptor_send+0x1ba>
            {
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 8008d28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	2b0f      	cmp	r3, #15
 8008d32:	d129      	bne.n	8008d88 <_ux_device_stack_descriptor_send+0x1f4>
                {

                    /* Parse the BOS descriptor.  */
                    _ux_utility_descriptor_parse(device_framework,
 8008d34:	f107 0314 	add.w	r3, r7, #20
 8008d38:	2204      	movs	r2, #4
 8008d3a:	4941      	ldr	r1, [pc, #260]	; (8008e40 <_ux_device_stack_descriptor_send+0x2ac>)
 8008d3c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8008d40:	f7fd fadc 	bl	80062fc <_ux_utility_descriptor_parse>
                                _ux_system_bos_descriptor_structure,
                                UX_BOS_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &bos_descriptor);

                    /* Get the length of entire BOS descriptor.  */
                    target_descriptor_length = bos_descriptor.wTotalLength;
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	677b      	str	r3, [r7, #116]	; 0x74

                    /* Descriptor is found.  */
                    status = UX_SUCCESS;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	673b      	str	r3, [r7, #112]	; 0x70
                    break;
 8008d4c:	e02b      	b.n	8008da6 <_ux_device_stack_descriptor_send+0x212>

                /* Check if this is a configuration descriptor.  We are cheating here. Instead of creating
                a OTHER SPEED descriptor, we simply scan the configuration descriptor for the Full Speed
                framework and return this configuration after we manually changed the configuration descriptor
                item into a Other Speed Descriptor. */
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8008d4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d52:	3301      	adds	r3, #1
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d116      	bne.n	8008d88 <_ux_device_stack_descriptor_send+0x1f4>
                {

                    /* Check the index. It must be the same as the one requested.  */
                    if (parsed_descriptor_index == descriptor_index)
 8008d5a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d10c      	bne.n	8008d7e <_ux_device_stack_descriptor_send+0x1ea>
                    {

                        /* Parse the configuration descriptor. */
                        _ux_utility_descriptor_parse(device_framework,
 8008d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d68:	2208      	movs	r2, #8
 8008d6a:	4936      	ldr	r1, [pc, #216]	; (8008e44 <_ux_device_stack_descriptor_send+0x2b0>)
 8008d6c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8008d70:	f7fd fac4 	bl	80062fc <_ux_utility_descriptor_parse>
                                    _ux_system_configuration_descriptor_structure,
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &configuration_descriptor);

                        /* Get the length of entire configuration descriptor.  */
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 8008d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d76:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Descriptor is found.  */
                        status = UX_SUCCESS;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	673b      	str	r3, [r7, #112]	; 0x70
                        break;
 8008d7c:	e013      	b.n	8008da6 <_ux_device_stack_descriptor_send+0x212>
                    }
                    else
                    {

                        /* There may be more configuration descriptors in this framework.  */
                        parsed_descriptor_index++;
 8008d7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d82:	3301      	adds	r3, #1
 8008d84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    }
                }
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 8008d88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	67bb      	str	r3, [r7, #120]	; 0x78

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 8008d90:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d96:	4413      	add	r3, r2
 8008d98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        while (device_framework < device_framework_end)
 8008d9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008da0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d3b9      	bcc.n	8008d1a <_ux_device_stack_descriptor_send+0x186>
        }

        /* Send the descriptor.  */
        if (status == UX_SUCCESS)
 8008da6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f040 811e 	bne.w	8008fea <_ux_device_stack_descriptor_send+0x456>
        {

            /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                and do not return more than what is allowed.  */
            if (target_descriptor_length < host_length)
 8008dae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d202      	bcs.n	8008dbc <_ux_device_stack_descriptor_send+0x228>
                length =  target_descriptor_length;
 8008db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008db8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008dba:	e001      	b.n	8008dc0 <_ux_device_stack_descriptor_send+0x22c>
            else
                length =  host_length;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Check buffer length, since total descriptors length may exceed buffer...  */
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8008dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dc6:	d90c      	bls.n	8008de2 <_ux_device_stack_descriptor_send+0x24e>
            {
                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8008dc8:	2212      	movs	r2, #18
 8008dca:	2109      	movs	r1, #9
 8008dcc:	2002      	movs	r0, #2
 8008dce:	f7fd f9d1 	bl	8006174 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8008dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008dd8:	2114      	movs	r1, #20
 8008dda:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008ddc:	4798      	blx	r3
 8008dde:	6738      	str	r0, [r7, #112]	; 0x70
                break;
 8008de0:	e106      	b.n	8008ff0 <_ux_device_stack_descriptor_send+0x45c>
            }

            /* Copy the device descriptor into the transfer request memory.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 8008de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008de8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fd fbfa 	bl	80065e6 <_ux_utility_memory_copy>
                                device_framework, length); /* Use case of memcpy is verified. */

            /* Now we need to hack the found descriptor because this request expect a requested
                descriptor type instead of the regular descriptor.  */
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 8008df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	3301      	adds	r3, #1
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	b2d2      	uxtb	r2, r2
 8008dfc:	701a      	strb	r2, [r3, #0]

            /* We can return the configuration descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008e02:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008e04:	f000 fe1b 	bl	8009a3e <_ux_device_stack_transfer_request>
 8008e08:	6738      	str	r0, [r7, #112]	; 0x70
        }
        break;
 8008e0a:	e0ee      	b.n	8008fea <_ux_device_stack_descriptor_send+0x456>

    case UX_STRING_DESCRIPTOR_ITEM:

        /* We need to filter for the index 0 which is the language ID string.  */
        if (descriptor_index == 0)
 8008e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d14f      	bne.n	8008eb2 <_ux_device_stack_descriptor_send+0x31e>
        {

            /* We need to check request buffer size in case it's possible exceed. */
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8008e12:	4b0a      	ldr	r3, [pc, #40]	; (8008e3c <_ux_device_stack_descriptor_send+0x2a8>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8008e1a:	3302      	adds	r3, #2
 8008e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e20:	d912      	bls.n	8008e48 <_ux_device_stack_descriptor_send+0x2b4>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8008e22:	2212      	movs	r2, #18
 8008e24:	2109      	movs	r1, #9
 8008e26:	2002      	movs	r0, #2
 8008e28:	f7fd f9a4 	bl	8006174 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8008e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e32:	2114      	movs	r1, #20
 8008e34:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008e36:	4798      	blx	r3
 8008e38:	6738      	str	r0, [r7, #112]	; 0x70
                break;
 8008e3a:	e0d9      	b.n	8008ff0 <_ux_device_stack_descriptor_send+0x45c>
 8008e3c:	240005e8 	.word	0x240005e8
 8008e40:	2400003c 	.word	0x2400003c
 8008e44:	24000028 	.word	0x24000028
            }

            /* We have a request to send back the language ID list. Use the transfer request buffer.  */
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8008e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Store the total length of the response.  */
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 8008e4e:	4b6b      	ldr	r3, [pc, #428]	; (8008ffc <_ux_device_stack_descriptor_send+0x468>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	3302      	adds	r3, #2
 8008e5a:	b2da      	uxtb	r2, r3
 8008e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e5e:	701a      	strb	r2, [r3, #0]

            /* Store the descriptor type.  */
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 8008e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e62:	3301      	adds	r3, #1
 8008e64:	2203      	movs	r2, #3
 8008e66:	701a      	strb	r2, [r3, #0]

            /* Store the language ID into the buffer.  */
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 8008e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e6a:	1c98      	adds	r0, r3, #2
 8008e6c:	4b63      	ldr	r3, [pc, #396]	; (8008ffc <_ux_device_stack_descriptor_send+0x468>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
                                                        _ux_system_slave -> ux_system_slave_language_id_framework_length); /* Use case of memcpy is verified. */
 8008e74:	4b61      	ldr	r3, [pc, #388]	; (8008ffc <_ux_device_stack_descriptor_send+0x468>)
 8008e76:	681b      	ldr	r3, [r3, #0]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 8008e78:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	f7fd fbb2 	bl	80065e6 <_ux_utility_memory_copy>

            /* Filter the length asked/required.  */
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 8008e82:	4b5e      	ldr	r3, [pc, #376]	; (8008ffc <_ux_device_stack_descriptor_send+0x468>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8008e8a:	3302      	adds	r3, #2
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d906      	bls.n	8008ea0 <_ux_device_stack_descriptor_send+0x30c>
                length =  _ux_system_slave -> ux_system_slave_language_id_framework_length + 2;
 8008e92:	4b5a      	ldr	r3, [pc, #360]	; (8008ffc <_ux_device_stack_descriptor_send+0x468>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8008e9a:	3302      	adds	r3, #2
 8008e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e9e:	e001      	b.n	8008ea4 <_ux_device_stack_descriptor_send+0x310>
            else
                length =  host_length;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* We can return the string language ID descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008ea8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008eaa:	f000 fdc8 	bl	8009a3e <_ux_device_stack_transfer_request>
 8008eae:	6738      	str	r0, [r7, #112]	; 0x70
                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
            }
        }
        break;
 8008eb0:	e09d      	b.n	8008fee <_ux_device_stack_descriptor_send+0x45a>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 8008eb2:	4b52      	ldr	r3, [pc, #328]	; (8008ffc <_ux_device_stack_descriptor_send+0x468>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8008eba:	66bb      	str	r3, [r7, #104]	; 0x68
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 8008ebc:	4b4f      	ldr	r3, [pc, #316]	; (8008ffc <_ux_device_stack_descriptor_send+0x468>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8008ec4:	667b      	str	r3, [r7, #100]	; 0x64
            while (string_framework_length != 0)
 8008ec6:	e07a      	b.n	8008fbe <_ux_device_stack_descriptor_send+0x42a>
                if (_ux_utility_short_get(string_framework) == request_index)
 8008ec8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008eca:	f7fd fc91 	bl	80067f0 <_ux_utility_short_get>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d164      	bne.n	8008fa0 <_ux_device_stack_descriptor_send+0x40c>
                    if (*(string_framework + 2) == descriptor_index)
 8008ed6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ed8:	3302      	adds	r3, #2
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	461a      	mov	r2, r3
 8008ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d15d      	bne.n	8008fa0 <_ux_device_stack_descriptor_send+0x40c>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8008ee4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ee6:	3303      	adds	r3, #3
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	3301      	adds	r3, #1
 8008eec:	005b      	lsls	r3, r3, #1
 8008eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ef2:	dd0c      	ble.n	8008f0e <_ux_device_stack_descriptor_send+0x37a>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8008ef4:	2212      	movs	r2, #18
 8008ef6:	2109      	movs	r1, #9
 8008ef8:	2002      	movs	r0, #2
 8008efa:	f7fd f93b 	bl	8006174 <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8008efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f00:	699b      	ldr	r3, [r3, #24]
 8008f02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f04:	2114      	movs	r1, #20
 8008f06:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008f08:	4798      	blx	r3
 8008f0a:	6738      	str	r0, [r7, #112]	; 0x70
                            break;
 8008f0c:	e05a      	b.n	8008fc4 <_ux_device_stack_descriptor_send+0x430>
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8008f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	64bb      	str	r3, [r7, #72]	; 0x48
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 8008f14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f16:	3303      	adds	r3, #3
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	005b      	lsls	r3, r3, #1
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f24:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 8008f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f28:	3301      	adds	r3, #1
 8008f2a:	2203      	movs	r2, #3
 8008f2c:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 8008f2e:	2300      	movs	r3, #0
 8008f30:	663b      	str	r3, [r7, #96]	; 0x60
 8008f32:	e015      	b.n	8008f60 <_ux_device_stack_descriptor_send+0x3cc>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 8008f34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f36:	3304      	adds	r3, #4
 8008f38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f3a:	441a      	add	r2, r3
 8008f3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f3e:	3301      	adds	r3, #1
 8008f40:	005b      	lsls	r3, r3, #1
 8008f42:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008f44:	440b      	add	r3, r1
 8008f46:	7812      	ldrb	r2, [r2, #0]
 8008f48:	701a      	strb	r2, [r3, #0]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 8008f4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	005b      	lsls	r3, r3, #1
 8008f50:	3301      	adds	r3, #1
 8008f52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f54:	4413      	add	r3, r2
 8008f56:	2200      	movs	r2, #0
 8008f58:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 8008f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	663b      	str	r3, [r7, #96]	; 0x60
 8008f60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f62:	3303      	adds	r3, #3
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	461a      	mov	r2, r3
 8008f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d3e2      	bcc.n	8008f34 <_ux_device_stack_descriptor_send+0x3a0>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 8008f6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f70:	3303      	adds	r3, #3
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	3301      	adds	r3, #1
 8008f76:	005b      	lsls	r3, r3, #1
 8008f78:	461a      	mov	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d906      	bls.n	8008f8e <_ux_device_stack_descriptor_send+0x3fa>
                            length =  (ULONG)((*(string_framework + 3)*2) + 2);
 8008f80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f82:	3303      	adds	r3, #3
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	3301      	adds	r3, #1
 8008f88:	005b      	lsls	r3, r3, #1
 8008f8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f8c:	e001      	b.n	8008f92 <_ux_device_stack_descriptor_send+0x3fe>
                            length =  host_length;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	66fb      	str	r3, [r7, #108]	; 0x6c
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008f96:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008f98:	f000 fd51 	bl	8009a3e <_ux_device_stack_transfer_request>
 8008f9c:	6738      	str	r0, [r7, #112]	; 0x70
                        break;
 8008f9e:	e011      	b.n	8008fc4 <_ux_device_stack_descriptor_send+0x430>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 8008fa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fa2:	3303      	adds	r3, #3
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008faa:	1a9b      	subs	r3, r3, r2
 8008fac:	3b04      	subs	r3, #4
 8008fae:	667b      	str	r3, [r7, #100]	; 0x64
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 8008fb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fb2:	3303      	adds	r3, #3
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fba:	4413      	add	r3, r2
 8008fbc:	66bb      	str	r3, [r7, #104]	; 0x68
            while (string_framework_length != 0)
 8008fbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d181      	bne.n	8008ec8 <_ux_device_stack_descriptor_send+0x334>
            if (string_framework_length == 0)
 8008fc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d111      	bne.n	8008fee <_ux_device_stack_descriptor_send+0x45a>
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8008fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008fd0:	2114      	movs	r1, #20
 8008fd2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008fd4:	4798      	blx	r3
                return(UX_ERROR);
 8008fd6:	23ff      	movs	r3, #255	; 0xff
 8008fd8:	e00b      	b.n	8008ff2 <_ux_device_stack_descriptor_send+0x45e>

    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8008fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fdc:	699b      	ldr	r3, [r3, #24]
 8008fde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008fe0:	2114      	movs	r1, #20
 8008fe2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008fe4:	4798      	blx	r3
        return(UX_ERROR);
 8008fe6:	23ff      	movs	r3, #255	; 0xff
 8008fe8:	e003      	b.n	8008ff2 <_ux_device_stack_descriptor_send+0x45e>
        break;
 8008fea:	bf00      	nop
 8008fec:	e000      	b.n	8008ff0 <_ux_device_stack_descriptor_send+0x45c>
        break;
 8008fee:	bf00      	nop
    }

    /* Return the status to the caller.  */
    return(status);
 8008ff0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3788      	adds	r7, #136	; 0x88
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	240005e8 	.word	0x240005e8

08009000 <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b092      	sub	sp, #72	; 0x48
 8009004:	af00      	add	r7, sp, #0
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE          *next_interface; 
#endif
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
 8009006:	23ff      	movs	r3, #255	; 0xff
 8009008:	643b      	str	r3, [r7, #64]	; 0x40
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800900a:	4b29      	ldr	r3, [pc, #164]	; (80090b0 <_ux_device_stack_disconnect+0xb0>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8009010:	4b27      	ldr	r3, [pc, #156]	; (80090b0 <_ux_device_stack_disconnect+0xb0>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3324      	adds	r3, #36	; 0x24
 8009016:	63bb      	str	r3, [r7, #56]	; 0x38
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8009018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b03      	cmp	r3, #3
 800901e:	d123      	bne.n	8009068 <_ux_device_stack_disconnect+0x68>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 8009020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009022:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009026:	647b      	str	r3, [r7, #68]	; 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 8009028:	e018      	b.n	800905c <_ux_device_stack_disconnect+0x5c>
        {
#endif

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800902a:	2303      	movs	r3, #3
 800902c:	607b      	str	r3, [r7, #4]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 800902e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009030:	60fb      	str	r3, [r7, #12]

            /* Get the pointer to the class container of this interface.  */
            class_ptr =  interface_ptr -> ux_slave_interface_class;
 8009032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	637b      	str	r3, [r7, #52]	; 0x34
            
            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 8009038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903a:	627b      	str	r3, [r7, #36]	; 0x24

            /* If there is a class container for this instance, deactivate it.  */
            if (class_ptr != UX_NULL)
 800903c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903e:	2b00      	cmp	r3, #0
 8009040:	d004      	beq.n	800904c <_ux_device_stack_disconnect+0x4c>
            
                /* Call the class with the DEACTIVATE signal.  */
                class_ptr -> ux_slave_class_entry_function(&class_command);
 8009042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009046:	1d3a      	adds	r2, r7, #4
 8009048:	4610      	mov	r0, r2
 800904a:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800904c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800904e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009050:	633b      	str	r3, [r7, #48]	; 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 8009052:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009054:	f000 fa76 	bl	8009544 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 8009058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905a:	647b      	str	r3, [r7, #68]	; 0x44
        while (interface_ptr != UX_NULL)
 800905c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1e3      	bne.n	800902a <_ux_device_stack_disconnect+0x2a>
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 8009062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009064:	2201      	movs	r2, #1
 8009066:	601a      	str	r2, [r3, #0]
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 8009068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d107      	bne.n	8009080 <_ux_device_stack_disconnect+0x80>

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8009070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009072:	699b      	ldr	r3, [r3, #24]
                                (VOID *) &device -> ux_slave_device_control_endpoint);
 8009074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009076:	323c      	adds	r2, #60	; 0x3c
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8009078:	210f      	movs	r1, #15
 800907a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800907c:	4798      	blx	r3
 800907e:	6438      	str	r0, [r7, #64]	; 0x40

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 8009080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009082:	2200      	movs	r2, #0
 8009084:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 8009088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908a:	2200      	movs	r2, #0
 800908c:	601a      	str	r2, [r3, #0]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800908e:	4b08      	ldr	r3, [pc, #32]	; (80090b0 <_ux_device_stack_disconnect+0xb0>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8009096:	2b00      	cmp	r3, #0
 8009098:	d005      	beq.n	80090a6 <_ux_device_stack_disconnect+0xa6>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 800909a:	4b05      	ldr	r3, [pc, #20]	; (80090b0 <_ux_device_stack_disconnect+0xb0>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80090a2:	200a      	movs	r0, #10
 80090a4:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
 80090a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3748      	adds	r7, #72	; 0x48
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	240005e8 	.word	0x240005e8

080090b4 <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80090bc:	4b14      	ldr	r3, [pc, #80]	; (8009110 <_ux_device_stack_endpoint_stall+0x5c>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	613b      	str	r3, [r7, #16]

    /* Assume device is in an invalid state here in order to reduce code in following 
       section where interrupts are disabled.  */
    status =  UX_ERROR;
 80090c2:	23ff      	movs	r3, #255	; 0xff
 80090c4:	617b      	str	r3, [r7, #20]

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 80090c6:	f000 fe51 	bl	8009d6c <_ux_utility_interrupt_disable>
 80090ca:	60f8      	str	r0, [r7, #12]

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 80090cc:	4b10      	ldr	r3, [pc, #64]	; (8009110 <_ux_device_stack_endpoint_stall+0x5c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d013      	beq.n	80090fe <_ux_device_stack_endpoint_stall+0x4a>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	685b      	ldr	r3, [r3, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d00f      	beq.n	80090fe <_ux_device_stack_endpoint_stall+0x4a>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	2114      	movs	r1, #20
 80090e6:	6938      	ldr	r0, [r7, #16]
 80090e8:	4798      	blx	r3
 80090ea:	6178      	str	r0, [r7, #20]

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	f003 0303 	and.w	r3, r3, #3
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d002      	beq.n	80090fe <_ux_device_stack_endpoint_stall+0x4a>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2202      	movs	r2, #2
 80090fc:	605a      	str	r2, [r3, #4]
    }

    /* Restore interrupts.  */
    UX_RESTORE
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f000 fe45 	bl	8009d8e <_ux_utility_interrupt_restore>

    /* Return completion status.  */
    return(status);       
 8009104:	697b      	ldr	r3, [r7, #20]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	240005e8 	.word	0x240005e8

08009114 <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08a      	sub	sp, #40	; 0x28
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8009120:	4b39      	ldr	r3, [pc, #228]	; (8009208 <_ux_device_stack_get_status+0xf4>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	623b      	str	r3, [r7, #32]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8009126:	4b38      	ldr	r3, [pc, #224]	; (8009208 <_ux_device_stack_get_status+0xf4>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3324      	adds	r3, #36	; 0x24
 800912c:	61fb      	str	r3, [r7, #28]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	333c      	adds	r3, #60	; 0x3c
 8009132:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	3330      	adds	r3, #48	; 0x30
 8009138:	617b      	str	r3, [r7, #20]

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	701a      	strb	r2, [r3, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	3301      	adds	r3, #1
 8009148:	2200      	movs	r2, #0
 800914a:	701a      	strb	r2, [r3, #0]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
 800914c:	2302      	movs	r3, #2
 800914e:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f003 0303 	and.w	r3, r3, #3
 8009156:	2b00      	cmp	r3, #0
 8009158:	d002      	beq.n	8009160 <_ux_device_stack_get_status+0x4c>
 800915a:	2b02      	cmp	r3, #2
 800915c:	d021      	beq.n	80091a2 <_ux_device_stack_get_status+0x8e>
 800915e:	e03a      	b.n	80091d6 <_ux_device_stack_get_status+0xc2>
    
    case UX_REQUEST_TARGET_DEVICE:

        /* When the device is probed, it is either for the power/remote capabilities or OTG role swap.  
           We differentiate with the Windex, 0 or OTG status Selector.  */
        if (request_index == UX_OTG_STATUS_SELECTOR)
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
 8009166:	d102      	bne.n	800916e <_ux_device_stack_get_status+0x5a>
        {

            /* Set the data length to 1.  */
            data_length = 1;
 8009168:	2301      	movs	r3, #1
 800916a:	627b      	str	r3, [r7, #36]	; 0x24

            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
        }
        
        break;
 800916c:	e03b      	b.n	80091e6 <_ux_device_stack_get_status+0xd2>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 800916e:	4b26      	ldr	r3, [pc, #152]	; (8009208 <_ux_device_stack_get_status+0xf4>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8009176:	2b02      	cmp	r3, #2
 8009178:	d103      	bne.n	8009182 <_ux_device_stack_get_status+0x6e>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	2201      	movs	r2, #1
 8009180:	701a      	strb	r2, [r3, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 8009182:	4b21      	ldr	r3, [pc, #132]	; (8009208 <_ux_device_stack_get_status+0xf4>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800918a:	2b00      	cmp	r3, #0
 800918c:	d02b      	beq.n	80091e6 <_ux_device_stack_get_status+0xd2>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	781a      	ldrb	r2, [r3, #0]
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	f042 0202 	orr.w	r2, r2, #2
 800919c:	b2d2      	uxtb	r2, r2
 800919e:	701a      	strb	r2, [r3, #0]
        break;
 80091a0:	e021      	b.n	80091e6 <_ux_device_stack_get_status+0xd2>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
#else

        /* This feature returns the halt state of a specific endpoint.  The endpoint address
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 80091a2:	6a3b      	ldr	r3, [r7, #32]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	2115      	movs	r1, #21
 80091aa:	6a38      	ldr	r0, [r7, #32]
 80091ac:	4798      	blx	r3
 80091ae:	6138      	str	r0, [r7, #16]
#endif

        /* Check the status. We may have a unknown endpoint.  */
        if (status != UX_ERROR)
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	2bff      	cmp	r3, #255	; 0xff
 80091b4:	d007      	beq.n	80091c6 <_ux_device_stack_get_status+0xb2>
        {

            if (status == UX_TRUE)
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d116      	bne.n	80091ea <_ux_device_stack_get_status+0xd6>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	2201      	movs	r2, #1
 80091c2:	701a      	strb	r2, [r3, #0]
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
            /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
            return(UX_SUCCESS);            
        }
        break;
 80091c4:	e011      	b.n	80091ea <_ux_device_stack_get_status+0xd6>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80091c6:	6a3b      	ldr	r3, [r7, #32]
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	69ba      	ldr	r2, [r7, #24]
 80091cc:	2114      	movs	r1, #20
 80091ce:	6a38      	ldr	r0, [r7, #32]
 80091d0:	4798      	blx	r3
            return(UX_SUCCESS);            
 80091d2:	2300      	movs	r3, #0
 80091d4:	e014      	b.n	8009200 <_ux_device_stack_get_status+0xec>

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80091d6:	6a3b      	ldr	r3, [r7, #32]
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	69ba      	ldr	r2, [r7, #24]
 80091dc:	2114      	movs	r1, #20
 80091de:	6a38      	ldr	r0, [r7, #32]
 80091e0:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 80091e2:	2300      	movs	r3, #0
 80091e4:	e00c      	b.n	8009200 <_ux_device_stack_get_status+0xec>
        break;
 80091e6:	bf00      	nop
 80091e8:	e000      	b.n	80091ec <_ux_device_stack_get_status+0xd8>
        break;
 80091ea:	bf00      	nop
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	2203      	movs	r2, #3
 80091f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 80091f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091f6:	6978      	ldr	r0, [r7, #20]
 80091f8:	f000 fc21 	bl	8009a3e <_ux_device_stack_transfer_request>
 80091fc:	6138      	str	r0, [r7, #16]

    /* Return the function status.  */
    return(status);
 80091fe:	693b      	ldr	r3, [r7, #16]
}
 8009200:	4618      	mov	r0, r3
 8009202:	3728      	adds	r7, #40	; 0x28
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	240005e8 	.word	0x240005e8

0800920c <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b094      	sub	sp, #80	; 0x50
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
 8009218:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800921a:	4b9a      	ldr	r3, [pc, #616]	; (8009484 <_ux_device_stack_initialize+0x278>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	3324      	adds	r3, #36	; 0x24
 8009220:	627b      	str	r3, [r7, #36]	; 0x24

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 8009222:	4b98      	ldr	r3, [pc, #608]	; (8009484 <_ux_device_stack_initialize+0x278>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 800922c:	4b95      	ldr	r3, [pc, #596]	; (8009484 <_ux_device_stack_initialize+0x278>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 8009236:	4b93      	ldr	r3, [pc, #588]	; (8009484 <_ux_device_stack_initialize+0x278>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 8009240:	4b90      	ldr	r3, [pc, #576]	; (8009484 <_ux_device_stack_initialize+0x278>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	683a      	ldr	r2, [r7, #0]
 8009246:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 800924a:	4b8e      	ldr	r3, [pc, #568]	; (8009484 <_ux_device_stack_initialize+0x278>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009250:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 8009254:	4b8b      	ldr	r3, [pc, #556]	; (8009484 <_ux_device_stack_initialize+0x278>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800925a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

    /* Store the language ID list in the project structure.  */
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 800925e:	4b89      	ldr	r3, [pc, #548]	; (8009484 <_ux_device_stack_initialize+0x278>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009264:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 8009268:	4b86      	ldr	r3, [pc, #536]	; (8009484 <_ux_device_stack_initialize+0x278>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800926e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

    /* Store the max number of slave class drivers in the project structure.  */
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
    
    /* Store the device state change function callback.  */
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 8009272:	4b84      	ldr	r3, [pc, #528]	; (8009484 <_ux_device_stack_initialize+0x278>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009278:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 800927c:	2264      	movs	r2, #100	; 0x64
 800927e:	2100      	movs	r1, #0
 8009280:	2000      	movs	r0, #0
 8009282:	f7fd f899 	bl	80063b8 <_ux_utility_memory_allocate>
 8009286:	6238      	str	r0, [r7, #32]
    if (memory == UX_NULL)
 8009288:	6a3b      	ldr	r3, [r7, #32]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d101      	bne.n	8009292 <_ux_device_stack_initialize+0x86>
        return(UX_MEMORY_INSUFFICIENT);
 800928e:	2312      	movs	r3, #18
 8009290:	e152      	b.n	8009538 <_ux_device_stack_initialize+0x32c>
    
    /* Save this memory allocation in the USBX project.  */
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 8009292:	4b7c      	ldr	r3, [pc, #496]	; (8009484 <_ux_device_stack_initialize+0x278>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	6a3a      	ldr	r2, [r7, #32]
 8009298:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

    /* Allocate some memory for the Control Endpoint.  First get the address of the transfer request for the 
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800929c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929e:	336c      	adds	r3, #108	; 0x6c
 80092a0:	61fb      	str	r3, [r7, #28]

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 80092a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092a6:	2101      	movs	r1, #1
 80092a8:	2000      	movs	r0, #0
 80092aa:	f7fd f885 	bl	80063b8 <_ux_utility_memory_allocate>
 80092ae:	4602      	mov	r2, r0
    transfer_request -> ux_slave_transfer_request_data_pointer =
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	60da      	str	r2, [r3, #12]

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d102      	bne.n	80092c2 <_ux_device_stack_initialize+0xb6>
        status = UX_MEMORY_INSUFFICIENT;
 80092bc:	2312      	movs	r3, #18
 80092be:	64bb      	str	r3, [r7, #72]	; 0x48
 80092c0:	e001      	b.n	80092c6 <_ux_device_stack_initialize+0xba>
    else
        status = UX_SUCCESS;
 80092c2:	2300      	movs	r3, #0
 80092c4:	64bb      	str	r3, [r7, #72]	; 0x48
    interfaces_found = UX_MAX_SLAVE_INTERFACES;
    endpoints_found = UX_MAX_DEVICE_ENDPOINTS;
#else

    /* Reset all values we are using during the scanning of the framework.  */
    interfaces_found                   =  0;
 80092c6:	2300      	movs	r3, #0
 80092c8:	647b      	str	r3, [r7, #68]	; 0x44
    endpoints_found                    =  0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	643b      	str	r3, [r7, #64]	; 0x40
    max_interface_number               =  0;
 80092ce:	2300      	movs	r3, #0
 80092d0:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Go on to scan interfaces if no error.  */
    if (status == UX_SUCCESS)
 80092d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f040 8090 	bne.w	80093fa <_ux_device_stack_initialize+0x1ee>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 80092da:	4b6a      	ldr	r3, [pc, #424]	; (8009484 <_ux_device_stack_initialize+0x278>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80092e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 80092e4:	4b67      	ldr	r3, [pc, #412]	; (8009484 <_ux_device_stack_initialize+0x278>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80092ec:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
 80092ee:	2300      	movs	r3, #0
 80092f0:	63bb      	str	r3, [r7, #56]	; 0x38
        local_endpoints_found              =  0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	637b      	str	r3, [r7, #52]	; 0x34
        endpoints_in_interface_found       =  0;
 80092f6:	2300      	movs	r3, #0
 80092f8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 80092fa:	e054      	b.n	80093a6 <_ux_device_stack_initialize+0x19a>
        {

            /* Get the length of this descriptor.  */
            descriptor_length =  (ULONG) *device_framework;
 80092fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	61bb      	str	r3, [r7, #24]
        
            /* And its type.  */
            descriptor_type =  *(device_framework + 1);
 8009302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009304:	785b      	ldrb	r3, [r3, #1]
 8009306:	75fb      	strb	r3, [r7, #23]
                    
            /* Check if this is an endpoint descriptor.  */
            switch(descriptor_type)
 8009308:	7dfb      	ldrb	r3, [r7, #23]
 800930a:	2b02      	cmp	r3, #2
 800930c:	d029      	beq.n	8009362 <_ux_device_stack_initialize+0x156>
 800930e:	2b04      	cmp	r3, #4
 8009310:	d13e      	bne.n	8009390 <_ux_device_stack_initialize+0x184>

            case UX_INTERFACE_DESCRIPTOR_ITEM:

                /* Check if this is alternate setting 0. If not, do not add another interface found.  
                If this is alternate setting 0, reset the endpoints count for this interface.  */
                if (*(device_framework + 3) == 0)
 8009312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009314:	3303      	adds	r3, #3
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d10b      	bne.n	8009334 <_ux_device_stack_initialize+0x128>
                {

                    /* Add the cumulated number of endpoints in the previous interface.  */
                    local_endpoints_found += endpoints_in_interface_found;
 800931c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800931e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009320:	4413      	add	r3, r2
 8009322:	637b      	str	r3, [r7, #52]	; 0x34

                    /* Read the number of endpoints for this alternate setting.  */
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 8009324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009326:	3304      	adds	r3, #4
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	633b      	str	r3, [r7, #48]	; 0x30
                    
                    /* Increment the number of interfaces found in the current configuration.  */
                    local_interfaces_found++;
 800932c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932e:	3301      	adds	r3, #1
 8009330:	63bb      	str	r3, [r7, #56]	; 0x38
 8009332:	e00a      	b.n	800934a <_ux_device_stack_initialize+0x13e>
                }                
                else
                {

                    /* Compare the number of endpoints found in this non 0 alternate setting.  */
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 8009334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009336:	3304      	adds	r3, #4
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	461a      	mov	r2, r3
 800933c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933e:	4293      	cmp	r3, r2
 8009340:	d203      	bcs.n	800934a <_ux_device_stack_initialize+0x13e>
                    
                        /* Adjust the number of maximum endpoints in this interface.  */
                        endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 8009342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009344:	3304      	adds	r3, #4
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	633b      	str	r3, [r7, #48]	; 0x30
                }

                /* Check and update max interface number.  */
                if (*(device_framework + 2) > max_interface_number)
 800934a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934c:	3302      	adds	r3, #2
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	461a      	mov	r2, r3
 8009352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009354:	4293      	cmp	r3, r2
 8009356:	d21d      	bcs.n	8009394 <_ux_device_stack_initialize+0x188>
                    max_interface_number = *(device_framework + 2);
 8009358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935a:	3302      	adds	r3, #2
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	63fb      	str	r3, [r7, #60]	; 0x3c

                break;
 8009360:	e018      	b.n	8009394 <_ux_device_stack_initialize+0x188>

            case UX_CONFIGURATION_DESCRIPTOR_ITEM:

                /* Check if the number of interfaces found in this configuration is the maximum so far. */
                if (local_interfaces_found > interfaces_found)
 8009362:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009366:	429a      	cmp	r2, r3
 8009368:	d901      	bls.n	800936e <_ux_device_stack_initialize+0x162>
                    
                    /* We need to adjust the number of maximum interfaces.  */
                    interfaces_found =  local_interfaces_found;
 800936a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936c:	647b      	str	r3, [r7, #68]	; 0x44

                /* We have a new configuration. We need to reset the number of local interfaces. */
                local_interfaces_found =  0;
 800936e:	2300      	movs	r3, #0
 8009370:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Add the cumulated number of endpoints in the previous interface.  */
                local_endpoints_found += endpoints_in_interface_found;
 8009372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009376:	4413      	add	r3, r2
 8009378:	637b      	str	r3, [r7, #52]	; 0x34

                /* Check if the number of endpoints found in the previous configuration is the maximum so far. */
                if (local_endpoints_found > endpoints_found)
 800937a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800937c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800937e:	429a      	cmp	r2, r3
 8009380:	d901      	bls.n	8009386 <_ux_device_stack_initialize+0x17a>
                    
                    /* We need to adjust the number of maximum endpoints.  */
                    endpoints_found =  local_endpoints_found;
 8009382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009384:	643b      	str	r3, [r7, #64]	; 0x40

                /* We have a new configuration. We need to reset the number of local endpoints. */
                local_endpoints_found         =  0;
 8009386:	2300      	movs	r3, #0
 8009388:	637b      	str	r3, [r7, #52]	; 0x34
                endpoints_in_interface_found  =  0;
 800938a:	2300      	movs	r3, #0
 800938c:	633b      	str	r3, [r7, #48]	; 0x30

                break;
 800938e:	e002      	b.n	8009396 <_ux_device_stack_initialize+0x18a>

            default:
                break;
 8009390:	bf00      	nop
 8009392:	e000      	b.n	8009396 <_ux_device_stack_initialize+0x18a>
                break;
 8009394:	bf00      	nop
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 8009396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800939e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	4413      	add	r3, r2
 80093a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (device_framework_length != 0)
 80093a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1a7      	bne.n	80092fc <_ux_device_stack_initialize+0xf0>
        }
        
        /* Add the cumulated number of endpoints in the previous interface.  */
        local_endpoints_found += endpoints_in_interface_found;
 80093ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b0:	4413      	add	r3, r2
 80093b2:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check if the number of endpoints found in the previous interface is the maximum so far. */
        if (local_endpoints_found > endpoints_found)
 80093b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d901      	bls.n	80093c0 <_ux_device_stack_initialize+0x1b4>
                    
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;
 80093bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093be:	643b      	str	r3, [r7, #64]	; 0x40


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 80093c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d901      	bls.n	80093cc <_ux_device_stack_initialize+0x1c0>
            
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;
 80093c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ca:	647b      	str	r3, [r7, #68]	; 0x44

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 80093cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d106      	bne.n	80093e0 <_ux_device_stack_initialize+0x1d4>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 80093d2:	2242      	movs	r2, #66	; 0x42
 80093d4:	2103      	movs	r1, #3
 80093d6:	2002      	movs	r0, #2
 80093d8:	f7fc fecc 	bl	8006174 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_DESCRIPTOR_CORRUPTED;
 80093dc:	2342      	movs	r3, #66	; 0x42
 80093de:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* We do a sanity check on the finding. Max interface number should not exceed limit.  */
        if (status == UX_SUCCESS &&
 80093e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d109      	bne.n	80093fa <_ux_device_stack_initialize+0x1ee>
 80093e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e8:	2b0f      	cmp	r3, #15
 80093ea:	d906      	bls.n	80093fa <_ux_device_stack_initialize+0x1ee>
            max_interface_number >= UX_MAX_SLAVE_INTERFACES)
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 80093ec:	2212      	movs	r2, #18
 80093ee:	2103      	movs	r1, #3
 80093f0:	2002      	movs	r0, #2
 80093f2:	f7fc febf 	bl	8006174 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_MEMORY_INSUFFICIENT;
 80093f6:	2312      	movs	r3, #18
 80093f8:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }
#endif

    /* Go on to allocate interfaces pool if no error.  */
    if (status == UX_SUCCESS)
 80093fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d118      	bne.n	8009432 <_ux_device_stack_initialize+0x226>
    {

        /* Memorize both pool sizes.  */
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009404:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 8009408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800940c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

        /* We assign a pool for the interfaces.  */
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 8009410:	2338      	movs	r3, #56	; 0x38
 8009412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009414:	2100      	movs	r1, #0
 8009416:	2000      	movs	r0, #0
 8009418:	f7fd f8c0 	bl	800659c <_ux_utility_memory_allocate_mulc_safe>
 800941c:	6138      	str	r0, [r7, #16]
        if (interfaces_pool == UX_NULL)
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d102      	bne.n	800942a <_ux_device_stack_initialize+0x21e>
            status = UX_MEMORY_INSUFFICIENT;
 8009424:	2312      	movs	r3, #18
 8009426:	64bb      	str	r3, [r7, #72]	; 0x48
 8009428:	e003      	b.n	8009432 <_ux_device_stack_initialize+0x226>
        else

            /* Save the interface pool address in the device container.  */
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 800942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942c:	693a      	ldr	r2, [r7, #16]
 800942e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    /* Do we need an endpoint pool ?  */
    if (endpoints_found != 0 && status == UX_SUCCESS)
 8009432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009434:	2b00      	cmp	r3, #0
 8009436:	d040      	beq.n	80094ba <_ux_device_stack_initialize+0x2ae>
 8009438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800943a:	2b00      	cmp	r3, #0
 800943c:	d13d      	bne.n	80094ba <_ux_device_stack_initialize+0x2ae>
    {

        /* We assign a pool for the endpoints.  */
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 800943e:	2378      	movs	r3, #120	; 0x78
 8009440:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009442:	2100      	movs	r1, #0
 8009444:	2000      	movs	r0, #0
 8009446:	f7fd f8a9 	bl	800659c <_ux_utility_memory_allocate_mulc_safe>
 800944a:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (endpoints_pool == UX_NULL)
 800944c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800944e:	2b00      	cmp	r3, #0
 8009450:	d102      	bne.n	8009458 <_ux_device_stack_initialize+0x24c>
            status = UX_MEMORY_INSUFFICIENT;
 8009452:	2312      	movs	r3, #18
 8009454:	64bb      	str	r3, [r7, #72]	; 0x48
        if (endpoints_pool == UX_NULL)
 8009456:	e032      	b.n	80094be <_ux_device_stack_initialize+0x2b2>
        else
        {

            /* Save the endpoint pool address in the device container.  */
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 8009458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800945c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

            /* We need to assign a transfer buffer to each endpoint. Each endpoint is assigned the
            maximum buffer size.  We also assign the semaphore used by the endpoint to synchronize transfer
            completion. */
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 8009460:	e01d      	b.n	800949e <_ux_device_stack_initialize+0x292>
            {

                /* Obtain some memory.  */
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
                                _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
 8009462:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009466:	2101      	movs	r1, #1
 8009468:	2000      	movs	r0, #0
 800946a:	f7fc ffa5 	bl	80063b8 <_ux_utility_memory_allocate>
 800946e:	4602      	mov	r2, r0
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
 8009470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009472:	63da      	str	r2, [r3, #60]	; 0x3c

                /* Ensure we could allocate memory.  */
                if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer == UX_NULL)
 8009474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009478:	2b00      	cmp	r3, #0
 800947a:	d105      	bne.n	8009488 <_ux_device_stack_initialize+0x27c>
                {
                    status = UX_MEMORY_INSUFFICIENT;
 800947c:	2312      	movs	r3, #18
 800947e:	64bb      	str	r3, [r7, #72]	; 0x48
                    break;
 8009480:	e01a      	b.n	80094b8 <_ux_device_stack_initialize+0x2ac>
 8009482:	bf00      	nop
 8009484:	240005e8 	.word	0x240005e8
                }
        
                /* Create the semaphore for the endpoint.  */
                status =  _ux_device_semaphore_create(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore,
 8009488:	2300      	movs	r3, #0
 800948a:	64bb      	str	r3, [r7, #72]	; 0x48
                                                    "ux_transfer_request_semaphore", 0);

                /* Check completion status.  */
                if (status != UX_SUCCESS)
 800948c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800948e:	2b00      	cmp	r3, #0
 8009490:	d002      	beq.n	8009498 <_ux_device_stack_initialize+0x28c>
                {
                    status = UX_SEMAPHORE_ERROR;
 8009492:	2315      	movs	r3, #21
 8009494:	64bb      	str	r3, [r7, #72]	; 0x48
                    break;
 8009496:	e00f      	b.n	80094b8 <_ux_device_stack_initialize+0x2ac>
                }
        
                /* Next endpoint.  */
                endpoints_pool++;
 8009498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800949a:	3378      	adds	r3, #120	; 0x78
 800949c:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a0:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80094a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094a6:	4613      	mov	r3, r2
 80094a8:	011b      	lsls	r3, r3, #4
 80094aa:	1a9b      	subs	r3, r3, r2
 80094ac:	00db      	lsls	r3, r3, #3
 80094ae:	440b      	add	r3, r1
 80094b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d3d5      	bcc.n	8009462 <_ux_device_stack_initialize+0x256>
        if (endpoints_pool == UX_NULL)
 80094b6:	e002      	b.n	80094be <_ux_device_stack_initialize+0x2b2>
 80094b8:	e001      	b.n	80094be <_ux_device_stack_initialize+0x2b2>
            }
        }
    }
    else
        endpoints_pool = UX_NULL;
 80094ba:	2300      	movs	r3, #0
 80094bc:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Return successful completion.  */
    if (status == UX_SUCCESS)
 80094be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d101      	bne.n	80094c8 <_ux_device_stack_initialize+0x2bc>
        return(UX_SUCCESS);
 80094c4:	2300      	movs	r3, #0
 80094c6:	e037      	b.n	8009538 <_ux_device_stack_initialize+0x32c>
    
    /* Free resources when there is error.  */

    /* Free device -> ux_slave_device_endpoints_pool.  */
    if (endpoints_pool)
 80094c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d018      	beq.n	8009500 <_ux_device_stack_initialize+0x2f4>
    {

        /* In error cases creating endpoint resources, endpoints_pool is endpoint that failed.
         * Previously allocated things should be freed.  */
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 80094ce:	e00b      	b.n	80094e8 <_ux_device_stack_initialize+0x2dc>
            /* Delete ux_slave_transfer_request_semaphore.  */
            if (_ux_device_semaphore_created(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore))
                _ux_device_semaphore_delete(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);

            /* Free ux_slave_transfer_request_data_pointer buffer.  */
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 80094d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d004      	beq.n	80094e2 <_ux_device_stack_initialize+0x2d6>
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 80094d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094dc:	4618      	mov	r0, r3
 80094de:	f7fd f8a1 	bl	8006624 <_ux_utility_memory_free>

            /* Move to previous endpoint.  */
            endpoints_pool --;
 80094e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094e4:	3b78      	subs	r3, #120	; 0x78
 80094e6:	64fb      	str	r3, [r7, #76]	; 0x4c
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 80094e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80094ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d2ed      	bcs.n	80094d0 <_ux_device_stack_initialize+0x2c4>
        }

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
 80094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fd f892 	bl	8006624 <_ux_utility_memory_free>
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009506:	2b00      	cmp	r3, #0
 8009508:	d005      	beq.n	8009516 <_ux_device_stack_initialize+0x30a>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 800950a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009510:	4618      	mov	r0, r3
 8009512:	f7fd f887 	bl	8006624 <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800951a:	2b00      	cmp	r3, #0
 800951c:	d004      	beq.n	8009528 <_ux_device_stack_initialize+0x31c>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 800951e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009522:	4618      	mov	r0, r3
 8009524:	f7fd f87e 	bl	8006624 <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 8009528:	4b05      	ldr	r3, [pc, #20]	; (8009540 <_ux_device_stack_initialize+0x334>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8009530:	4618      	mov	r0, r3
 8009532:	f7fd f877 	bl	8006624 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 8009536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009538:	4618      	mov	r0, r3
 800953a:	3750      	adds	r7, #80	; 0x50
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	240005e8 	.word	0x240005e8

08009544 <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface_ptr, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800954c:	4b20      	ldr	r3, [pc, #128]	; (80095d0 <_ux_device_stack_interface_delete+0x8c>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3324      	adds	r3, #36	; 0x24
 8009552:	613b      	str	r3, [r7, #16]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009558:	617b      	str	r3, [r7, #20]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 800955a:	e01c      	b.n	8009596 <_ux_device_stack_interface_delete+0x52>
    {

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	60fb      	str	r3, [r7, #12]
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009564:	617b      	str	r3, [r7, #20]
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 8009566:	4b1a      	ldr	r3, [pc, #104]	; (80095d0 <_ux_device_stack_interface_delete+0x8c>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	60bb      	str	r3, [r7, #8]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	210f      	movs	r1, #15
 8009574:	68b8      	ldr	r0, [r7, #8]
 8009576:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	601a      	str	r2, [r3, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	625a      	str	r2, [r3, #36]	; 0x24
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	629a      	str	r2, [r3, #40]	; 0x28
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	62da      	str	r2, [r3, #44]	; 0x2c
    while (next_endpoint != UX_NULL)
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1df      	bne.n	800955c <_ux_device_stack_interface_delete+0x18>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface_ptr -> ux_slave_interface_class          =  UX_NULL;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	605a      	str	r2, [r3, #4]
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	609a      	str	r2, [r3, #8]
    interface_ptr -> ux_slave_interface_next_interface =  UX_NULL;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	631a      	str	r2, [r3, #48]	; 0x30
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	635a      	str	r2, [r3, #52]	; 0x34
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3718      	adds	r7, #24
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	240005e8 	.word	0x240005e8

080095d4 <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b092      	sub	sp, #72	; 0x48
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80095e0:	4b82      	ldr	r3, [pc, #520]	; (80097ec <_ux_device_stack_interface_set+0x218>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80095e6:	4b81      	ldr	r3, [pc, #516]	; (80097ec <_ux_device_stack_interface_set+0x218>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3324      	adds	r3, #36	; 0x24
 80095ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface_ptr = device -> ux_slave_device_interfaces_pool;
 80095ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80095f4:	647b      	str	r3, [r7, #68]	; 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 80095f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80095fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (interfaces_pool_number != 0)
 80095fe:	e009      	b.n	8009614 <_ux_device_stack_interface_set+0x40>
    {
        /* Check if this interface is free.  */
        if (interface_ptr -> ux_slave_interface_status == UX_UNUSED)
 8009600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d009      	beq.n	800961c <_ux_device_stack_interface_set+0x48>
            break;
    
        /* Try the next interface.  */
        interface_ptr++;
 8009608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800960a:	3338      	adds	r3, #56	; 0x38
 800960c:	647b      	str	r3, [r7, #68]	; 0x44
        
        /* Decrement the number of interfaces left to scan in the pool.  */
        interfaces_pool_number--;
 800960e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009610:	3b01      	subs	r3, #1
 8009612:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (interfaces_pool_number != 0)
 8009614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1f2      	bne.n	8009600 <_ux_device_stack_interface_set+0x2c>
 800961a:	e000      	b.n	800961e <_ux_device_stack_interface_set+0x4a>
            break;
 800961c:	bf00      	nop
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
 800961e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009620:	2b00      	cmp	r3, #0
 8009622:	d101      	bne.n	8009628 <_ux_device_stack_interface_set+0x54>
        return(UX_MEMORY_INSUFFICIENT);
 8009624:	2312      	movs	r3, #18
 8009626:	e0dd      	b.n	80097e4 <_ux_device_stack_interface_set+0x210>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface_ptr -> ux_slave_interface_status = UX_USED;
 8009628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800962a:	2201      	movs	r2, #1
 800962c:	601a      	str	r2, [r3, #0]

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_interface_descriptor_structure,
                UX_INTERFACE_DESCRIPTOR_ENTRIES,
                (UCHAR *) &interface_ptr -> ux_slave_interface_descriptor);
 800962e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009630:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(device_framework,
 8009632:	2209      	movs	r2, #9
 8009634:	496e      	ldr	r1, [pc, #440]	; (80097f0 <_ux_device_stack_interface_set+0x21c>)
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f7fc fe60 	bl	80062fc <_ux_utility_descriptor_parse>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 800963c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009642:	2b00      	cmp	r3, #0
 8009644:	d104      	bne.n	8009650 <_ux_device_stack_interface_set+0x7c>
    {

        device -> ux_slave_device_first_interface =  interface_ptr;
 8009646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800964a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800964e:	e00e      	b.n	800966e <_ux_device_stack_interface_set+0x9a>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
 8009650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009652:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009656:	643b      	str	r3, [r7, #64]	; 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 8009658:	e002      	b.n	8009660 <_ux_device_stack_interface_set+0x8c>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
 800965a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800965c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965e:	643b      	str	r3, [r7, #64]	; 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 8009660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1f8      	bne.n	800965a <_ux_device_stack_interface_set+0x86>
        interface_link -> ux_slave_interface_next_interface =  interface_ptr;
 8009668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800966a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800966c:	631a      	str	r2, [r3, #48]	; 0x30
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface_ptr;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	461a      	mov	r2, r3
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	1a9b      	subs	r3, r3, r2
 8009678:	60bb      	str	r3, [r7, #8]
    device_framework +=  (ULONG) *device_framework;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	461a      	mov	r2, r3
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	4413      	add	r3, r2
 8009684:	60fb      	str	r3, [r7, #12]

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 8009686:	e0a4      	b.n	80097d2 <_ux_device_stack_interface_set+0x1fe>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	61fb      	str	r3, [r7, #28]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	785b      	ldrb	r3, [r3, #1]
 8009692:	76fb      	strb	r3, [r7, #27]
                
        /* Check if this is an endpoint descriptor.  */
        switch(descriptor_type)
 8009694:	7efb      	ldrb	r3, [r7, #27]
 8009696:	2b05      	cmp	r3, #5
 8009698:	d009      	beq.n	80096ae <_ux_device_stack_interface_set+0xda>
 800969a:	2b05      	cmp	r3, #5
 800969c:	f300 8090 	bgt.w	80097c0 <_ux_device_stack_interface_set+0x1ec>
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	f000 8087 	beq.w	80097b4 <_ux_device_stack_interface_set+0x1e0>
 80096a6:	2b04      	cmp	r3, #4
 80096a8:	f000 8084 	beq.w	80097b4 <_ux_device_stack_interface_set+0x1e0>

            /* Return the status to the caller.  */
            return(status);

        default:
            break;
 80096ac:	e088      	b.n	80097c0 <_ux_device_stack_interface_set+0x1ec>
            endpoint = device -> ux_slave_device_endpoints_pool;
 80096ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80096b4:	63bb      	str	r3, [r7, #56]	; 0x38
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 80096b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80096bc:	633b      	str	r3, [r7, #48]	; 0x30
            while (endpoints_pool_number != 0)
 80096be:	e00d      	b.n	80096dc <_ux_device_stack_interface_set+0x108>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 80096c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d103      	bne.n	80096d0 <_ux_device_stack_interface_set+0xfc>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 80096c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ca:	2201      	movs	r2, #1
 80096cc:	601a      	str	r2, [r3, #0]
                    break;
 80096ce:	e008      	b.n	80096e2 <_ux_device_stack_interface_set+0x10e>
                endpoint++;
 80096d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d2:	3378      	adds	r3, #120	; 0x78
 80096d4:	63bb      	str	r3, [r7, #56]	; 0x38
               endpoints_pool_number--; 
 80096d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d8:	3b01      	subs	r3, #1
 80096da:	633b      	str	r3, [r7, #48]	; 0x30
            while (endpoints_pool_number != 0)
 80096dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1ee      	bne.n	80096c0 <_ux_device_stack_interface_set+0xec>
            if (endpoints_pool_number == 0)
 80096e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <_ux_device_stack_interface_set+0x118>
                return(UX_MEMORY_INSUFFICIENT);
 80096e8:	2312      	movs	r3, #18
 80096ea:	e07b      	b.n	80097e4 <_ux_device_stack_interface_set+0x210>
                            (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 80096ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ee:	330c      	adds	r3, #12
            _ux_utility_descriptor_parse(device_framework,
 80096f0:	2206      	movs	r2, #6
 80096f2:	4940      	ldr	r1, [pc, #256]	; (80097f4 <_ux_device_stack_interface_set+0x220>)
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f7fc fe01 	bl	80062fc <_ux_utility_descriptor_parse>
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80096fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fc:	3330      	adds	r3, #48	; 0x30
 80096fe:	617b      	str	r3, [r7, #20]
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8009700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009702:	69db      	ldr	r3, [r3, #28]
            max_transfer_length =
 8009704:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009708:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800970a:	4b38      	ldr	r3, [pc, #224]	; (80097ec <_ux_device_stack_interface_set+0x218>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8009712:	2b02      	cmp	r3, #2
 8009714:	d118      	bne.n	8009748 <_ux_device_stack_interface_set+0x174>
                (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 8009716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	f003 0301 	and.w	r3, r3, #1
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800971e:	2b00      	cmp	r3, #0
 8009720:	d012      	beq.n	8009748 <_ux_device_stack_interface_set+0x174>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8009722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009724:	69db      	ldr	r3, [r3, #28]
 8009726:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800972a:	613b      	str	r3, [r7, #16]
                if (n_trans)
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00a      	beq.n	8009748 <_ux_device_stack_interface_set+0x174>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	0adb      	lsrs	r3, r3, #11
 8009736:	613b      	str	r3, [r7, #16]
                    n_trans ++;
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	3301      	adds	r3, #1
 800973c:	613b      	str	r3, [r7, #16]
                    max_transfer_length *= n_trans;
 800973e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009740:	693a      	ldr	r2, [r7, #16]
 8009742:	fb02 f303 	mul.w	r3, r2, r3
 8009746:	62fb      	str	r3, [r7, #44]	; 0x2c
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800974c:	621a      	str	r2, [r3, #32]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009752:	609a      	str	r2, [r3, #8]
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	f04f 32ff 	mov.w	r2, #4294967295
 800975a:	635a      	str	r2, [r3, #52]	; 0x34
            endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 800975c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009760:	629a      	str	r2, [r3, #40]	; 0x28
            endpoint -> ux_slave_endpoint_device =  device;
 8009762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009766:	62da      	str	r2, [r3, #44]	; 0x2c
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8009768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800976e:	210e      	movs	r1, #14
 8009770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009772:	4798      	blx	r3
 8009774:	6238      	str	r0, [r7, #32]
            if (status != UX_SUCCESS)
 8009776:	6a3b      	ldr	r3, [r7, #32]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d004      	beq.n	8009786 <_ux_device_stack_interface_set+0x1b2>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800977c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977e:	2200      	movs	r2, #0
 8009780:	601a      	str	r2, [r3, #0]
                return(status);
 8009782:	6a3b      	ldr	r3, [r7, #32]
 8009784:	e02e      	b.n	80097e4 <_ux_device_stack_interface_set+0x210>
            if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 8009786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800978a:	2b00      	cmp	r3, #0
 800978c:	d103      	bne.n	8009796 <_ux_device_stack_interface_set+0x1c2>
                interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 800978e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009792:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 8009794:	e015      	b.n	80097c2 <_ux_device_stack_interface_set+0x1ee>
                endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 8009796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800979a:	637b      	str	r3, [r7, #52]	; 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800979c:	e002      	b.n	80097a4 <_ux_device_stack_interface_set+0x1d0>
                    endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 800979e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a2:	637b      	str	r3, [r7, #52]	; 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 80097a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1f8      	bne.n	800979e <_ux_device_stack_interface_set+0x1ca>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 80097ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097b0:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 80097b2:	e006      	b.n	80097c2 <_ux_device_stack_interface_set+0x1ee>
            status =  _ux_device_stack_interface_start(interface_ptr);
 80097b4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80097b6:	f000 f81f 	bl	80097f8 <_ux_device_stack_interface_start>
 80097ba:	6238      	str	r0, [r7, #32]
            return(status);
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	e011      	b.n	80097e4 <_ux_device_stack_interface_set+0x210>
            break;
 80097c0:	bf00      	nop
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	60bb      	str	r3, [r7, #8]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	4413      	add	r3, r2
 80097d0:	60fb      	str	r3, [r7, #12]
    while (device_framework_length != 0)
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f47f af57 	bne.w	8009688 <_ux_device_stack_interface_set+0xb4>
    }

    /* The interface attached to this configuration must be started at the class
       level.  */
    status =  _ux_device_stack_interface_start(interface_ptr);
 80097da:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80097dc:	f000 f80c 	bl	80097f8 <_ux_device_stack_interface_start>
 80097e0:	6238      	str	r0, [r7, #32]

    /* Return the status to the caller.  */
    return(status);
 80097e2:	6a3b      	ldr	r3, [r7, #32]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3748      	adds	r7, #72	; 0x48
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	240005e8 	.word	0x240005e8
 80097f0:	24000030 	.word	0x24000030
 80097f4:	24000010 	.word	0x24000010

080097f8 <_ux_device_stack_interface_start>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface_ptr)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b090      	sub	sp, #64	; 0x40
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 8009800:	4b24      	ldr	r3, [pc, #144]	; (8009894 <_ux_device_stack_interface_start+0x9c>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	6952      	ldr	r2, [r2, #20]
 8009808:	3252      	adds	r2, #82	; 0x52
 800980a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800980e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if class driver is available. */
    if (class_ptr == UX_NULL)
 8009810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009812:	2b00      	cmp	r3, #0
 8009814:	d101      	bne.n	800981a <_ux_device_stack_interface_start+0x22>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 8009816:	2357      	movs	r3, #87	; 0x57
 8009818:	e037      	b.n	800988a <_ux_device_stack_interface_start+0x92>

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800981a:	4b1e      	ldr	r3, [pc, #120]	; (8009894 <_ux_device_stack_interface_start+0x9c>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	3324      	adds	r3, #36	; 0x24
 8009820:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 8009822:	2301      	movs	r3, #1
 8009824:	60bb      	str	r3, [r7, #8]
    class_command.ux_slave_class_command_interface =   (VOID *)interface_ptr;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	613b      	str	r3, [r7, #16]
    class_command.ux_slave_class_command_class     =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceClass;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a1b      	ldr	r3, [r3, #32]
 800982e:	61fb      	str	r3, [r7, #28]
    class_command.ux_slave_class_command_subclass  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceSubClass;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009834:	623b      	str	r3, [r7, #32]
    class_command.ux_slave_class_command_protocol  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceProtocol;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983a:	627b      	str	r3, [r7, #36]	; 0x24
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 800983c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983e:	6a1b      	ldr	r3, [r3, #32]
 8009840:	61bb      	str	r3, [r7, #24]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 8009842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009846:	617b      	str	r3, [r7, #20]

    /* We can now memorize the interface pointer associated with this class.  */
    class_ptr -> ux_slave_class_interface = interface_ptr;
 8009848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	661a      	str	r2, [r3, #96]	; 0x60
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800984e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009852:	f107 0208 	add.w	r2, r7, #8
 8009856:	4610      	mov	r0, r2
 8009858:	4798      	blx	r3
 800985a:	6378      	str	r0, [r7, #52]	; 0x34

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 800985c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800985e:	2b00      	cmp	r3, #0
 8009860:	d112      	bne.n	8009888 <_ux_device_stack_interface_start+0x90>
    {

        /* Store the class container. */
        class_command.ux_slave_class_command_class_ptr =  class_ptr;
 8009862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009864:	62bb      	str	r3, [r7, #40]	; 0x28
        
        /* Store the command.  */
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 8009866:	2302      	movs	r3, #2
 8009868:	60bb      	str	r3, [r7, #8]
        
        /* Activate the class.  */
        status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800986a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800986c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800986e:	f107 0208 	add.w	r2, r7, #8
 8009872:	4610      	mov	r0, r2
 8009874:	4798      	blx	r3
 8009876:	6378      	str	r0, [r7, #52]	; 0x34

        /* If the class was successfully activated, set the class for the interface.  */
        if(status == UX_SUCCESS)
 8009878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800987a:	2b00      	cmp	r3, #0
 800987c:	d102      	bne.n	8009884 <_ux_device_stack_interface_start+0x8c>
            interface_ptr -> ux_slave_interface_class =  class_ptr;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009882:	605a      	str	r2, [r3, #4]

        return(status); 
 8009884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009886:	e000      	b.n	800988a <_ux_device_stack_interface_start+0x92>
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
 8009888:	2357      	movs	r3, #87	; 0x57
}
 800988a:	4618      	mov	r0, r3
 800988c:	3740      	adds	r7, #64	; 0x40
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	240005e8 	.word	0x240005e8

08009898 <_ux_device_stack_set_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b08a      	sub	sp, #40	; 0x28
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80098a4:	4b29      	ldr	r3, [pc, #164]	; (800994c <_ux_device_stack_set_feature+0xb4>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80098aa:	4b28      	ldr	r3, [pc, #160]	; (800994c <_ux_device_stack_set_feature+0xb4>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	3324      	adds	r3, #36	; 0x24
 80098b0:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	333c      	adds	r3, #60	; 0x3c
 80098b6:	617b      	str	r3, [r7, #20]

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f003 0303 	and.w	r3, r3, #3
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d002      	beq.n	80098c8 <_ux_device_stack_set_feature+0x30>
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d014      	beq.n	80098f0 <_ux_device_stack_set_feature+0x58>
 80098c6:	e035      	b.n	8009934 <_ux_device_stack_set_feature+0x9c>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d10e      	bne.n	80098ec <_ux_device_stack_set_feature+0x54>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 80098ce:	4b1f      	ldr	r3, [pc, #124]	; (800994c <_ux_device_stack_set_feature+0xb4>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d006      	beq.n	80098e8 <_ux_device_stack_set_feature+0x50>
            {

                /* Enable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 80098da:	4b1c      	ldr	r3, [pc, #112]	; (800994c <_ux_device_stack_set_feature+0xb4>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2201      	movs	r2, #1
 80098e0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

                /* OK. */
                return (UX_SUCCESS);
 80098e4:	2300      	movs	r3, #0
 80098e6:	e02c      	b.n	8009942 <_ux_device_stack_set_feature+0xaa>
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 80098e8:	2354      	movs	r3, #84	; 0x54
 80098ea:	e02a      	b.n	8009942 <_ux_device_stack_set_feature+0xaa>
            return(UX_SUCCESS);
        }
#endif

        /* Request value not supported.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 80098ec:	2354      	movs	r3, #84	; 0x54
 80098ee:	e028      	b.n	8009942 <_ux_device_stack_set_feature+0xaa>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only set feature for endpoint is ENDPOINT_STALL. This forces
           the endpoint to the stall situation.
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80098f6:	627b      	str	r3, [r7, #36]	; 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 80098f8:	e019      	b.n	800992e <_ux_device_stack_set_feature+0x96>
        {
#endif
            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 80098fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098fe:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 8009900:	e00f      	b.n	8009922 <_ux_device_stack_set_feature+0x8a>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	429a      	cmp	r2, r3
 800990a:	d107      	bne.n	800991c <_ux_device_stack_set_feature+0x84>
                {

                    /* Stall the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	6a3a      	ldr	r2, [r7, #32]
 8009912:	2114      	movs	r1, #20
 8009914:	69f8      	ldr	r0, [r7, #28]
 8009916:	4798      	blx	r3

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 8009918:	2300      	movs	r3, #0
 800991a:	e012      	b.n	8009942 <_ux_device_stack_set_feature+0xaa>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800991c:	6a3b      	ldr	r3, [r7, #32]
 800991e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009920:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 8009922:	6a3b      	ldr	r3, [r7, #32]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1ec      	bne.n	8009902 <_ux_device_stack_set_feature+0x6a>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8009928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800992c:	627b      	str	r3, [r7, #36]	; 0x24
        while (interface_ptr != UX_NULL)
 800992e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e2      	bne.n	80098fa <_ux_device_stack_set_feature+0x62>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	697a      	ldr	r2, [r7, #20]
 800993a:	2114      	movs	r1, #20
 800993c:	69f8      	ldr	r0, [r7, #28]
 800993e:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8009940:	2300      	movs	r3, #0
    }
}
 8009942:	4618      	mov	r0, r3
 8009944:	3728      	adds	r7, #40	; 0x28
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	240005e8 	.word	0x240005e8

08009950 <_ux_device_stack_tasks_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_tasks_run(VOID)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
UX_SLAVE_CLASS              *class_instance;
ULONG                       class_index;
UINT                        status;


    status = UX_STATE_RESET;
 8009956:	2300      	movs	r3, #0
 8009958:	607b      	str	r3, [r7, #4]

    /* Run all DCD tasks (pending ISR handle).  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 800995a:	4b1a      	ldr	r3, [pc, #104]	; (80099c4 <_ux_device_stack_tasks_run+0x74>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	603b      	str	r3, [r7, #0]
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	699b      	ldr	r3, [r3, #24]
 8009964:	2200      	movs	r2, #0
 8009966:	2112      	movs	r1, #18
 8009968:	6838      	ldr	r0, [r7, #0]
 800996a:	4798      	blx	r3

    /* Run all Class instance tasks.  */
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
 800996c:	4b15      	ldr	r3, [pc, #84]	; (80099c4 <_ux_device_stack_tasks_run+0x74>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8009974:	60fb      	str	r3, [r7, #12]
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
 8009976:	2300      	movs	r3, #0
 8009978:	60bb      	str	r3, [r7, #8]
 800997a:	e01b      	b.n	80099b4 <_ux_device_stack_tasks_run+0x64>
    {

        /* Skip classes not used.  */
        if (class_instance -> ux_slave_class_status == UX_UNUSED)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009980:	2b00      	cmp	r3, #0
 8009982:	d011      	beq.n	80099a8 <_ux_device_stack_tasks_run+0x58>
            continue;

        /* Skip classes has no task function.  */
        if (class_instance -> ux_slave_class_task_function == UX_NULL)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00f      	beq.n	80099ac <_ux_device_stack_tasks_run+0x5c>
            continue;

        /* Invoke task function.  */
        status |= class_instance -> ux_slave_class_task_function(class_instance -> ux_slave_class_instance);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009990:	68fa      	ldr	r2, [r7, #12]
 8009992:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009994:	4610      	mov	r0, r2
 8009996:	4798      	blx	r3
 8009998:	4602      	mov	r2, r0
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4313      	orrs	r3, r2
 800999e:	607b      	str	r3, [r7, #4]

        /* Move to the next class.  */
        class_instance ++;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	3364      	adds	r3, #100	; 0x64
 80099a4:	60fb      	str	r3, [r7, #12]
 80099a6:	e002      	b.n	80099ae <_ux_device_stack_tasks_run+0x5e>
            continue;
 80099a8:	bf00      	nop
 80099aa:	e000      	b.n	80099ae <_ux_device_stack_tasks_run+0x5e>
            continue;
 80099ac:	bf00      	nop
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	3301      	adds	r3, #1
 80099b2:	60bb      	str	r3, [r7, #8]
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d0e0      	beq.n	800997c <_ux_device_stack_tasks_run+0x2c>
    }

    /* Return overall status.  */
    return(status);
 80099ba:	687b      	ldr	r3, [r7, #4]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	240005e8 	.word	0x240005e8

080099c8 <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80099d2:	4b11      	ldr	r3, [pc, #68]	; (8009a18 <_ux_device_stack_transfer_abort+0x50>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	60fb      	str	r3, [r7, #12]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	683a      	ldr	r2, [r7, #0]
 80099dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 80099de:	f000 f9c5 	bl	8009d6c <_ux_utility_interrupt_disable>
 80099e2:	60b8      	str	r0, [r7, #8]

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d10c      	bne.n	8009a06 <_ux_device_stack_transfer_abort+0x3e>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	699b      	ldr	r3, [r3, #24]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	210d      	movs	r1, #13
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	4798      	blx	r3

        /* Restore interrupts. Note that the transfer request should not be modified now.  */
        UX_RESTORE
 80099f8:	68b8      	ldr	r0, [r7, #8]
 80099fa:	f000 f9c8 	bl	8009d8e <_ux_utility_interrupt_restore>

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2204      	movs	r2, #4
 8009a02:	601a      	str	r2, [r3, #0]
 8009a04:	e002      	b.n	8009a0c <_ux_device_stack_transfer_abort+0x44>
    }
    else
    {

        /* Restore interrupts.  */
        UX_RESTORE
 8009a06:	68b8      	ldr	r0, [r7, #8]
 8009a08:	f000 f9c1 	bl	8009d8e <_ux_utility_interrupt_restore>
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	240005e8 	.word	0x240005e8

08009a1c <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	3330      	adds	r3, #48	; 0x30
 8009a2a:	60fb      	str	r3, [r7, #12]
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 8009a2c:	6839      	ldr	r1, [r7, #0]
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f7ff ffca 	bl	80099c8 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b086      	sub	sp, #24
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	60f8      	str	r0, [r7, #12]
 8009a46:	60b9      	str	r1, [r7, #8]
 8009a48:	607a      	str	r2, [r7, #4]
#if defined(UX_DEVICE_STANDALONE)
UINT            status;

    /* Start a transfer request without waiting it end.  */
    UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	631a      	str	r2, [r3, #48]	; 0x30
    status = _ux_device_stack_transfer_run(transfer_request, slave_length, host_length);
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	68b9      	ldr	r1, [r7, #8]
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f000 f811 	bl	8009a7c <_ux_device_stack_transfer_run>
 8009a5a:	6178      	str	r0, [r7, #20]
    if (status == UX_STATE_LOCK)
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	2b06      	cmp	r3, #6
 8009a60:	d101      	bne.n	8009a66 <_ux_device_stack_transfer_request+0x28>
        return(UX_BUSY);
 8009a62:	23fe      	movs	r3, #254	; 0xfe
 8009a64:	e006      	b.n	8009a74 <_ux_device_stack_transfer_request+0x36>
    if (status < UX_STATE_NEXT)
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	2b03      	cmp	r3, #3
 8009a6a:	d802      	bhi.n	8009a72 <_ux_device_stack_transfer_request+0x34>
        return(transfer_request -> ux_slave_transfer_request_completion_code);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a70:	e000      	b.n	8009a74 <_ux_device_stack_transfer_request+0x36>

    /* Started/done, things will be done in BG  */
    return(UX_SUCCESS);
 8009a72:	2300      	movs	r3, #0

    /* And return the status.  */
    return(status);

#endif
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3718      	adds	r7, #24
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <_ux_device_stack_transfer_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_run(UX_SLAVE_TRANSFER *transfer_request, ULONG slave_length, ULONG host_length)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b08a      	sub	sp, #40	; 0x28
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d107      	bne.n	8009aa0 <_ux_device_stack_transfer_run+0x24>
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_SUCCESS;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	625a      	str	r2, [r3, #36]	; 0x24
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_NEXT;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2204      	movs	r2, #4
 8009a9a:	631a      	str	r2, [r3, #48]	; 0x30
        return(UX_STATE_NEXT);
 8009a9c:	2304      	movs	r3, #4
 8009a9e:	e090      	b.n	8009bc2 <_ux_device_stack_transfer_run+0x146>
    }

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 8009aa0:	4b4a      	ldr	r3, [pc, #296]	; (8009bcc <_ux_device_stack_transfer_run+0x150>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa6:	627b      	str	r3, [r7, #36]	; 0x24

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if (!(device_state == UX_DEVICE_ATTACHED) &&
 8009aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d00d      	beq.n	8009aca <_ux_device_stack_transfer_run+0x4e>
 8009aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab0:	2b02      	cmp	r3, #2
 8009ab2:	d00a      	beq.n	8009aca <_ux_device_stack_transfer_run+0x4e>
        !(device_state == UX_DEVICE_ADDRESSED) &&
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	d007      	beq.n	8009aca <_ux_device_stack_transfer_run+0x4e>
        !(device_state == UX_DEVICE_CONFIGURED))
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_NOT_READY;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2225      	movs	r2, #37	; 0x25
 8009abe:	625a      	str	r2, [r3, #36]	; 0x24
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_RESET;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	631a      	str	r2, [r3, #48]	; 0x30
        return(UX_STATE_EXIT);
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e07b      	b.n	8009bc2 <_ux_device_stack_transfer_run+0x146>
    }

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8009aca:	4b40      	ldr	r3, [pc, #256]	; (8009bcc <_ux_device_stack_transfer_run+0x150>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	623b      	str	r3, [r7, #32]

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	61fb      	str	r3, [r7, #28]

    /* Process states.  */
    state = transfer_request -> ux_slave_transfer_request_state;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ada:	61bb      	str	r3, [r7, #24]
    switch(state)
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	2b21      	cmp	r3, #33	; 0x21
 8009ae0:	d05a      	beq.n	8009b98 <_ux_device_stack_transfer_run+0x11c>
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	2b21      	cmp	r3, #33	; 0x21
 8009ae6:	d865      	bhi.n	8009bb4 <_ux_device_stack_transfer_run+0x138>
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d003      	beq.n	8009af6 <_ux_device_stack_transfer_run+0x7a>
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	2b20      	cmp	r3, #32
 8009af2:	d042      	beq.n	8009b7a <_ux_device_stack_transfer_run+0xfe>
 8009af4:	e05e      	b.n	8009bb4 <_ux_device_stack_transfer_run+0x138>
    case UX_STATE_RESET:

        /* Prepare transfer parameters.  */

        /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	f003 0303 	and.w	r3, r3, #3
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00c      	beq.n	8009b1c <_ux_device_stack_transfer_run+0xa0>
        {

            /* Isolate the direction from the endpoint address.  */
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d003      	beq.n	8009b16 <_ux_device_stack_transfer_run+0x9a>
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2203      	movs	r2, #3
 8009b12:	629a      	str	r2, [r3, #40]	; 0x28
 8009b14:	e002      	b.n	8009b1c <_ux_device_stack_transfer_run+0xa0>
            else
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2202      	movs	r2, #2
 8009b1a:	629a      	str	r2, [r3, #40]	; 0x28

        /* See if we need to force a zero length packet at the end of the transfer.
           This happens on a DATA IN and when the host requested length is not met
           and the last packet is on a boundary. If slave_length is zero, then it is
           a explicit ZLP request, no need to force ZLP.  */
        if ((transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT) &&
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b20:	2b03      	cmp	r3, #3
 8009b22:	d114      	bne.n	8009b4e <_ux_device_stack_transfer_run+0xd2>
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d011      	beq.n	8009b4e <_ux_device_stack_transfer_run+0xd2>
            (slave_length != 0) && (host_length != slave_length) &&
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d00d      	beq.n	8009b4e <_ux_device_stack_transfer_run+0xd2>
            (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	69da      	ldr	r2, [r3, #28]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b3c:	fb01 f202 	mul.w	r2, r1, r2
 8009b40:	1a9b      	subs	r3, r3, r2
            (slave_length != 0) && (host_length != slave_length) &&
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d103      	bne.n	8009b4e <_ux_device_stack_transfer_run+0xd2>
        {

            /* If so force Zero Length Packet.  */
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	639a      	str	r2, [r3, #56]	; 0x38
 8009b4c:	e002      	b.n	8009b54 <_ux_device_stack_transfer_run+0xd8>
        }
        else
        {

            /* Condition is not met, do not force a Zero Length Packet.  */
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2200      	movs	r2, #0
 8009b52:	639a      	str	r2, [r3, #56]	; 0x38
        }

        /* Reset the number of bytes sent/received.  */
        transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2200      	movs	r2, #0
 8009b58:	619a      	str	r2, [r3, #24]

        /* Determine how many bytes to send in this transaction.  We keep track of the original
           length and have a working length.  */
        transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	68ba      	ldr	r2, [r7, #8]
 8009b5e:	615a      	str	r2, [r3, #20]
        transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	68ba      	ldr	r2, [r7, #8]
 8009b64:	61da      	str	r2, [r3, #28]

        /* Save the buffer pointer.  */
        transfer_request -> ux_slave_transfer_request_current_data_pointer =
                                transfer_request -> ux_slave_transfer_request_data_pointer;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	68da      	ldr	r2, [r3, #12]
        transfer_request -> ux_slave_transfer_request_current_data_pointer =
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	611a      	str	r2, [r3, #16]

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status = UX_TRANSFER_STATUS_PENDING;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2201      	movs	r2, #1
 8009b72:	601a      	str	r2, [r3, #0]

        /* Next state.  */
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_HALT_WAIT;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2220      	movs	r2, #32
 8009b78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Fall through.  */
    case UX_DEVICE_STACK_TRANSFER_STATE_HALT_WAIT:

        /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	f003 0303 	and.w	r3, r3, #3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d005      	beq.n	8009b92 <_ux_device_stack_transfer_run+0x116>
        {

            /* Return WAIT until halt cleared.  */
            if (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d101      	bne.n	8009b92 <_ux_device_stack_transfer_run+0x116>
                return(UX_STATE_WAIT);
 8009b8e:	2305      	movs	r3, #5
 8009b90:	e017      	b.n	8009bc2 <_ux_device_stack_transfer_run+0x146>

        }

        /* Next state.  */
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_TRAN_WAIT;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2221      	movs	r2, #33	; 0x21
 8009b96:	631a      	str	r2, [r3, #48]	; 0x30
        /* Fall through.  */
    case UX_DEVICE_STACK_TRANSFER_STATE_TRAN_WAIT:

        /* Call the DCD driver transfer function.   */
        /* Transfer state is adjusted inside DCD driver.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_RUN, transfer_request);
 8009b98:	6a3b      	ldr	r3, [r7, #32]
 8009b9a:	699b      	ldr	r3, [r3, #24]
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	210c      	movs	r1, #12
 8009ba0:	6a38      	ldr	r0, [r7, #32]
 8009ba2:	4798      	blx	r3
 8009ba4:	6178      	str	r0, [r7, #20]

        /* Any error case or normal end: reset state for next transfer.  */
        if (status < UX_STATE_WAIT)
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	2b04      	cmp	r3, #4
 8009baa:	d808      	bhi.n	8009bbe <_ux_device_stack_transfer_run+0x142>
        {
            UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	631a      	str	r2, [r3, #48]	; 0x30
        }
        break;
 8009bb2:	e004      	b.n	8009bbe <_ux_device_stack_transfer_run+0x142>

    default: /* Error case, return EXIT.  */
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_RESET;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	631a      	str	r2, [r3, #48]	; 0x30
        return(UX_STATE_EXIT);
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e001      	b.n	8009bc2 <_ux_device_stack_transfer_run+0x146>
        break;
 8009bbe:	bf00      	nop
    }

    /* And return the status.  */
    return(status);
 8009bc0:	697b      	ldr	r3, [r7, #20]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3728      	adds	r7, #40	; 0x28
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	240005e8 	.word	0x240005e8

08009bd0 <MX_USBX_Device_Init>:
  * @brief  Application USBX Device Initialization.
  * @param  none
  * @retval status
  */
UINT MX_USBX_Device_Init(VOID)
{
 8009bd0:	b590      	push	{r4, r7, lr}
 8009bd2:	b091      	sub	sp, #68	; 0x44
 8009bd4:	af06      	add	r7, sp, #24
  UINT ret = UX_SUCCESS;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN MX_USBX_Device_Init0 */

  /* USER CODE END MX_USBX_Device_Init0 */

  pointer = ux_device_memory_buffer;
 8009bda:	4b57      	ldr	r3, [pc, #348]	; (8009d38 <MX_USBX_Device_Init+0x168>)
 8009bdc:	623b      	str	r3, [r7, #32]

  /* Initialize USBX Memory */
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 8009bde:	2300      	movs	r3, #0
 8009be0:	2200      	movs	r2, #0
 8009be2:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8009be6:	6a38      	ldr	r0, [r7, #32]
 8009be8:	f7fc fae6 	bl	80061b8 <_ux_system_initialize>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d006      	beq.n	8009c00 <MX_USBX_Device_Init+0x30>
  {
    /* USER CODE BEGIN USBX_SYSTEM_INITIALIZE_ERORR */
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009bf8:	4850      	ldr	r0, [pc, #320]	; (8009d3c <MX_USBX_Device_Init+0x16c>)
 8009bfa:	f7f7 f98b 	bl	8000f14 <HAL_GPIO_WritePin>
	  while(1);
 8009bfe:	e7fe      	b.n	8009bfe <MX_USBX_Device_Init+0x2e>
    return UX_ERROR;
    /* USER CODE END USBX_SYSTEM_INITIALIZE_ERORR */
  }

  /* Get Device Framework High Speed and get the length */
  device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 8009c00:	f107 030c 	add.w	r3, r7, #12
 8009c04:	4619      	mov	r1, r3
 8009c06:	2001      	movs	r0, #1
 8009c08:	f000 f8fe 	bl	8009e08 <USBD_Get_Device_Framework_Speed>
 8009c0c:	61f8      	str	r0, [r7, #28]
                                                                &device_framework_hs_length);

  /* Get Device Framework Full Speed and get the length */
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 8009c0e:	f107 0308 	add.w	r3, r7, #8
 8009c12:	4619      	mov	r1, r3
 8009c14:	2000      	movs	r0, #0
 8009c16:	f000 f8f7 	bl	8009e08 <USBD_Get_Device_Framework_Speed>
 8009c1a:	61b8      	str	r0, [r7, #24]
                                                                &device_framework_fs_length);

  /* Get String Framework and get the length */
  string_framework = USBD_Get_String_Framework(&string_framework_length);
 8009c1c:	1d3b      	adds	r3, r7, #4
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 f934 	bl	8009e8c <USBD_Get_String_Framework>
 8009c24:	6178      	str	r0, [r7, #20]

  /* Get Language Id Framework and get the length */
  language_id_framework = USBD_Get_Language_Id_Framework(&languge_id_framework_length);
 8009c26:	463b      	mov	r3, r7
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f000 f9b3 	bl	8009f94 <USBD_Get_Language_Id_Framework>
 8009c2e:	6138      	str	r0, [r7, #16]

  /* Install the device portion of USBX */
  if (ux_device_stack_initialize(device_framework_high_speed,
 8009c30:	68f9      	ldr	r1, [r7, #12]
 8009c32:	68b8      	ldr	r0, [r7, #8]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	683a      	ldr	r2, [r7, #0]
 8009c38:	2400      	movs	r4, #0
 8009c3a:	9404      	str	r4, [sp, #16]
 8009c3c:	9203      	str	r2, [sp, #12]
 8009c3e:	693a      	ldr	r2, [r7, #16]
 8009c40:	9202      	str	r2, [sp, #8]
 8009c42:	9301      	str	r3, [sp, #4]
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	9300      	str	r3, [sp, #0]
 8009c48:	4603      	mov	r3, r0
 8009c4a:	69ba      	ldr	r2, [r7, #24]
 8009c4c:	69f8      	ldr	r0, [r7, #28]
 8009c4e:	f7ff fadd 	bl	800920c <_ux_device_stack_initialize>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d006      	beq.n	8009c66 <MX_USBX_Device_Init+0x96>
                                 language_id_framework,
                                 languge_id_framework_length,
                                 UX_NULL) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_INITIALIZE_ERORR */
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8009c58:	2201      	movs	r2, #1
 8009c5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009c5e:	4837      	ldr	r0, [pc, #220]	; (8009d3c <MX_USBX_Device_Init+0x16c>)
 8009c60:	f7f7 f958 	bl	8000f14 <HAL_GPIO_WritePin>
	  while(1);
 8009c64:	e7fe      	b.n	8009c64 <MX_USBX_Device_Init+0x94>
	  return UX_ERROR;
    /* USER CODE END USBX_DEVICE_INITIALIZE_ERORR */
  }

  /* Initialize the hid mouse class parameters for the device */
  hid_mouse_parameter.ux_slave_class_hid_instance_activate         = USBD_HID_Mouse_Activate;
 8009c66:	4b36      	ldr	r3, [pc, #216]	; (8009d40 <MX_USBX_Device_Init+0x170>)
 8009c68:	4a36      	ldr	r2, [pc, #216]	; (8009d44 <MX_USBX_Device_Init+0x174>)
 8009c6a:	601a      	str	r2, [r3, #0]
  hid_mouse_parameter.ux_slave_class_hid_instance_deactivate       = USBD_HID_Mouse_Deactivate;
 8009c6c:	4b34      	ldr	r3, [pc, #208]	; (8009d40 <MX_USBX_Device_Init+0x170>)
 8009c6e:	4a36      	ldr	r2, [pc, #216]	; (8009d48 <MX_USBX_Device_Init+0x178>)
 8009c70:	605a      	str	r2, [r3, #4]
  hid_mouse_parameter.ux_device_class_hid_parameter_report_address = USBD_HID_ReportDesc(INTERFACE_HID_MOUSE);
 8009c72:	2002      	movs	r0, #2
 8009c74:	f000 fa00 	bl	800a078 <USBD_HID_ReportDesc>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	4a31      	ldr	r2, [pc, #196]	; (8009d40 <MX_USBX_Device_Init+0x170>)
 8009c7c:	6093      	str	r3, [r2, #8]
  hid_mouse_parameter.ux_device_class_hid_parameter_report_length  = USBD_HID_ReportDesc_length(INTERFACE_HID_MOUSE);
 8009c7e:	2002      	movs	r0, #2
 8009c80:	f000 fa12 	bl	800a0a8 <USBD_HID_ReportDesc_length>
 8009c84:	4603      	mov	r3, r0
 8009c86:	461a      	mov	r2, r3
 8009c88:	4b2d      	ldr	r3, [pc, #180]	; (8009d40 <MX_USBX_Device_Init+0x170>)
 8009c8a:	611a      	str	r2, [r3, #16]
  hid_mouse_parameter.ux_device_class_hid_parameter_report_id      = UX_FALSE;
 8009c8c:	4b2c      	ldr	r3, [pc, #176]	; (8009d40 <MX_USBX_Device_Init+0x170>)
 8009c8e:	2200      	movs	r2, #0
 8009c90:	60da      	str	r2, [r3, #12]
  hid_mouse_parameter.ux_device_class_hid_parameter_callback       = USBD_HID_Mouse_SetReport;
 8009c92:	4b2b      	ldr	r3, [pc, #172]	; (8009d40 <MX_USBX_Device_Init+0x170>)
 8009c94:	4a2d      	ldr	r2, [pc, #180]	; (8009d4c <MX_USBX_Device_Init+0x17c>)
 8009c96:	615a      	str	r2, [r3, #20]
  hid_mouse_parameter.ux_device_class_hid_parameter_get_callback   = USBD_HID_Mouse_GetReport;
 8009c98:	4b29      	ldr	r3, [pc, #164]	; (8009d40 <MX_USBX_Device_Init+0x170>)
 8009c9a:	4a2d      	ldr	r2, [pc, #180]	; (8009d50 <MX_USBX_Device_Init+0x180>)
 8009c9c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN HID_MOUSE_PARAMETER */

  /* USER CODE END HID_MOUSE_PARAMETER */

  /* Get hid mouse configuration number */
  hid_mouse_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_HID, INTERFACE_HID_MOUSE);
 8009c9e:	2102      	movs	r1, #2
 8009ca0:	2001      	movs	r0, #1
 8009ca2:	f000 f9d7 	bl	800a054 <USBD_Get_Configuration_Number>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	461a      	mov	r2, r3
 8009caa:	4b2a      	ldr	r3, [pc, #168]	; (8009d54 <MX_USBX_Device_Init+0x184>)
 8009cac:	601a      	str	r2, [r3, #0]

  /* Find hid mouse interface number */
  hid_mouse_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_HID, INTERFACE_HID_MOUSE);
 8009cae:	2102      	movs	r1, #2
 8009cb0:	2001      	movs	r0, #1
 8009cb2:	f000 f991 	bl	8009fd8 <USBD_Get_Interface_Number>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	461a      	mov	r2, r3
 8009cba:	4b27      	ldr	r3, [pc, #156]	; (8009d58 <MX_USBX_Device_Init+0x188>)
 8009cbc:	601a      	str	r2, [r3, #0]

  /* Initialize the device hid Mouse class */
  if (ux_device_stack_class_register(_ux_system_slave_class_hid_name,
 8009cbe:	4b25      	ldr	r3, [pc, #148]	; (8009d54 <MX_USBX_Device_Init+0x184>)
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	4b25      	ldr	r3, [pc, #148]	; (8009d58 <MX_USBX_Device_Init+0x188>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	491e      	ldr	r1, [pc, #120]	; (8009d40 <MX_USBX_Device_Init+0x170>)
 8009cc8:	9100      	str	r1, [sp, #0]
 8009cca:	4924      	ldr	r1, [pc, #144]	; (8009d5c <MX_USBX_Device_Init+0x18c>)
 8009ccc:	4824      	ldr	r0, [pc, #144]	; (8009d60 <MX_USBX_Device_Init+0x190>)
 8009cce:	f7fe fbab 	bl	8008428 <_ux_device_stack_class_register>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d006      	beq.n	8009ce6 <MX_USBX_Device_Init+0x116>
                                     hid_mouse_configuration_number,
                                     hid_mouse_interface_number,
                                     &hid_mouse_parameter) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_HID_MOUSE_REGISTER_ERORR */
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009cde:	4817      	ldr	r0, [pc, #92]	; (8009d3c <MX_USBX_Device_Init+0x16c>)
 8009ce0:	f7f7 f918 	bl	8000f14 <HAL_GPIO_WritePin>
	  while(1);
 8009ce4:	e7fe      	b.n	8009ce4 <MX_USBX_Device_Init+0x114>
	  return UX_ERROR;
    /* USER CODE END USBX_DEVICE_HID_MOUSE_REGISTER_ERORR */
  }

  /* USER CODE BEGIN MX_USBX_Device_Init1 */
  MX_USB_OTG_HS_PCD_Init();
 8009ce6:	f7f6 fced 	bl	80006c4 <MX_USB_OTG_HS_PCD_Init>

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8009cea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009cee:	481d      	ldr	r0, [pc, #116]	; (8009d64 <MX_USBX_Device_Init+0x194>)
 8009cf0:	f7f8 fc21 	bl	8002536 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x40);
 8009cf4:	2240      	movs	r2, #64	; 0x40
 8009cf6:	2100      	movs	r1, #0
 8009cf8:	481a      	ldr	r0, [pc, #104]	; (8009d64 <MX_USBX_Device_Init+0x194>)
 8009cfa:	f7f8 fbd5 	bl	80024a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x100);
 8009cfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d02:	2101      	movs	r1, #1
 8009d04:	4817      	ldr	r0, [pc, #92]	; (8009d64 <MX_USBX_Device_Init+0x194>)
 8009d06:	f7f8 fbcf 	bl	80024a8 <HAL_PCDEx_SetTxFiFo>

  if(ux_dcd_stm32_initialize((ULONG)USB_OTG_HS, (ULONG)&hpcd_USB_OTG_HS) != UX_SUCCESS)
 8009d0a:	4b16      	ldr	r3, [pc, #88]	; (8009d64 <MX_USBX_Device_Init+0x194>)
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	4816      	ldr	r0, [pc, #88]	; (8009d68 <MX_USBX_Device_Init+0x198>)
 8009d10:	f7fd ff8e 	bl	8007c30 <_ux_dcd_stm32_initialize>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d006      	beq.n	8009d28 <MX_USBX_Device_Init+0x158>
  {
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009d20:	4806      	ldr	r0, [pc, #24]	; (8009d3c <MX_USBX_Device_Init+0x16c>)
 8009d22:	f7f7 f8f7 	bl	8000f14 <HAL_GPIO_WritePin>
	  while(1);
 8009d26:	e7fe      	b.n	8009d26 <MX_USBX_Device_Init+0x156>
  }

  HAL_PCD_Start(&hpcd_USB_OTG_HS);
 8009d28:	480e      	ldr	r0, [pc, #56]	; (8009d64 <MX_USBX_Device_Init+0x194>)
 8009d2a:	f7f7 fa30 	bl	800118e <HAL_PCD_Start>
  /* USER CODE END MX_USBX_Device_Init1 */

  return ret;
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	372c      	adds	r7, #44	; 0x2c
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd90      	pop	{r4, r7, pc}
 8009d38:	240005ec 	.word	0x240005ec
 8009d3c:	58020400 	.word	0x58020400
 8009d40:	240019f4 	.word	0x240019f4
 8009d44:	0800a8fd 	.word	0x0800a8fd
 8009d48:	0800a925 	.word	0x0800a925
 8009d4c:	0800a945 	.word	0x0800a945
 8009d50:	0800a961 	.word	0x0800a961
 8009d54:	240019f0 	.word	0x240019f0
 8009d58:	240019ec 	.word	0x240019ec
 8009d5c:	08006c65 	.word	0x08006c65
 8009d60:	24000040 	.word	0x24000040
 8009d64:	240000d4 	.word	0x240000d4
 8009d68:	40040000 	.word	0x40040000

08009d6c <_ux_utility_interrupt_disable>:
  *         USB utility interrupt disable.
  * @param  none
  * @retval none
  */
ALIGN_TYPE _ux_utility_interrupt_disable(VOID)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d72:	f3ef 8310 	mrs	r3, PRIMASK
 8009d76:	603b      	str	r3, [r7, #0]
  return(result);
 8009d78:	683b      	ldr	r3, [r7, #0]
  UINT interrupt_save;

  /* USER CODE BEGIN _ux_utility_interrupt_disable */
  interrupt_save = __get_PRIMASK();
 8009d7a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d7c:	b672      	cpsid	i
}
 8009d7e:	bf00      	nop
  __disable_irq();
  /* USER CODE END _ux_utility_interrupt_disable */

  return interrupt_save;
 8009d80:	687b      	ldr	r3, [r7, #4]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	370c      	adds	r7, #12
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr

08009d8e <_ux_utility_interrupt_restore>:
  *         USB utility interrupt restore.
  * @param  flags
  * @retval none
  */
VOID _ux_utility_interrupt_restore(ALIGN_TYPE flags)
{
 8009d8e:	b480      	push	{r7}
 8009d90:	b085      	sub	sp, #20
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f383 8810 	msr	PRIMASK, r3
}
 8009da0:	bf00      	nop
  /* USER CODE BEGIN _ux_utility_interrupt_restore */
  __set_PRIMASK(flags);
  /* USER CODE END _ux_utility_interrupt_restore */
}
 8009da2:	bf00      	nop
 8009da4:	3714      	adds	r7, #20
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <_ux_utility_time_get>:
  *         Get Time Tick for host timing.
  * @param  none
  * @retval time tick
  */
ULONG _ux_utility_time_get(VOID)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b082      	sub	sp, #8
 8009db2:	af00      	add	r7, sp, #0
  ULONG time_tick = 0U;
 8009db4:	2300      	movs	r3, #0
 8009db6:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN _ux_utility_time_get */
  time_tick = HAL_GetTick();
 8009db8:	f7f6 fdac 	bl	8000914 <HAL_GetTick>
 8009dbc:	6078      	str	r0, [r7, #4]
  /* USER CODE END _ux_utility_time_get */

  return time_tick;
 8009dbe:	687b      	ldr	r3, [r7, #4]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <USBX_Device_Process>:

/* USER CODE BEGIN 1 */
VOID USBX_Device_Process(VOID)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	af00      	add	r7, sp, #0
	ux_device_stack_tasks_run();
 8009dcc:	f7ff fdc0 	bl	8009950 <_ux_device_stack_tasks_run>
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 8009dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009dd4:	480a      	ldr	r0, [pc, #40]	; (8009e00 <USBX_Device_Process+0x38>)
 8009dd6:	f7f7 f885 	bl	8000ee4 <HAL_GPIO_ReadPin>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d107      	bne.n	8009df0 <USBX_Device_Process+0x28>
	{
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8009de0:	2201      	movs	r2, #1
 8009de2:	2102      	movs	r1, #2
 8009de4:	4807      	ldr	r0, [pc, #28]	; (8009e04 <USBX_Device_Process+0x3c>)
 8009de6:	f7f7 f895 	bl	8000f14 <HAL_GPIO_WritePin>
		HID_Mouse_Send();
 8009dea:	f000 fdc7 	bl	800a97c <HID_Mouse_Send>
	}
	else
	{
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
	}
}
 8009dee:	e004      	b.n	8009dfa <USBX_Device_Process+0x32>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8009df0:	2200      	movs	r2, #0
 8009df2:	2102      	movs	r1, #2
 8009df4:	4803      	ldr	r0, [pc, #12]	; (8009e04 <USBX_Device_Process+0x3c>)
 8009df6:	f7f7 f88d 	bl	8000f14 <HAL_GPIO_WritePin>
}
 8009dfa:	bf00      	nop
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	58020800 	.word	0x58020800
 8009e04:	58021000 	.word	0x58021000

08009e08 <USBD_Get_Device_Framework_Speed>:
  * @param  Speed : HIGH or FULL SPEED flag
  * @param  length : length of HIGH or FULL SPEED array
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Get_Device_Framework_Speed(uint8_t Speed, ULONG *Length)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	4603      	mov	r3, r0
 8009e10:	6039      	str	r1, [r7, #0]
 8009e12:	71fb      	strb	r3, [r7, #7]
  uint8_t *pFrameWork = NULL;
 8009e14:	2300      	movs	r3, #0
 8009e16:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN Device_Framework0 */

  /* USER TAG BEGIN Device_Framework0 */

  if (USBD_FULL_SPEED == Speed)
 8009e18:	79fb      	ldrb	r3, [r7, #7]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d113      	bne.n	8009e46 <USBD_Get_Device_Framework_Speed+0x3e>
  {
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 8009e1e:	4b16      	ldr	r3, [pc, #88]	; (8009e78 <USBD_Get_Device_Framework_Speed+0x70>)
 8009e20:	6819      	ldr	r1, [r3, #0]
 8009e22:	79fb      	ldrb	r3, [r7, #7]
 8009e24:	4a15      	ldr	r2, [pc, #84]	; (8009e7c <USBD_Get_Device_Framework_Speed+0x74>)
 8009e26:	4816      	ldr	r0, [pc, #88]	; (8009e80 <USBD_Get_Device_Framework_Speed+0x78>)
 8009e28:	f000 f9a0 	bl	800a16c <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_full_speed */
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 8009e2c:	4b14      	ldr	r3, [pc, #80]	; (8009e80 <USBD_Get_Device_Framework_Speed+0x78>)
 8009e2e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8009e32:	4b13      	ldr	r3, [pc, #76]	; (8009e80 <USBD_Get_Device_Framework_Speed+0x78>)
 8009e34:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8009e38:	441a      	add	r2, r3
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_FS;
 8009e3e:	4b0e      	ldr	r3, [pc, #56]	; (8009e78 <USBD_Get_Device_Framework_Speed+0x70>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	60fb      	str	r3, [r7, #12]
 8009e44:	e012      	b.n	8009e6c <USBD_Get_Device_Framework_Speed+0x64>
  }
  else
  {
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 8009e46:	4b0f      	ldr	r3, [pc, #60]	; (8009e84 <USBD_Get_Device_Framework_Speed+0x7c>)
 8009e48:	6819      	ldr	r1, [r3, #0]
 8009e4a:	79fb      	ldrb	r3, [r7, #7]
 8009e4c:	4a0b      	ldr	r2, [pc, #44]	; (8009e7c <USBD_Get_Device_Framework_Speed+0x74>)
 8009e4e:	480e      	ldr	r0, [pc, #56]	; (8009e88 <USBD_Get_Device_Framework_Speed+0x80>)
 8009e50:	f000 f98c 	bl	800a16c <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_high_speed */
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 8009e54:	4b0c      	ldr	r3, [pc, #48]	; (8009e88 <USBD_Get_Device_Framework_Speed+0x80>)
 8009e56:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8009e5a:	4b0b      	ldr	r3, [pc, #44]	; (8009e88 <USBD_Get_Device_Framework_Speed+0x80>)
 8009e5c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8009e60:	441a      	add	r2, r3
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_HS;
 8009e66:	4b07      	ldr	r3, [pc, #28]	; (8009e84 <USBD_Get_Device_Framework_Speed+0x7c>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE Device_Framework1 */

  /* USER CODE Device_Framework1 */
  return pFrameWork;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	24000064 	.word	0x24000064
 8009e7c:	24000054 	.word	0x24000054
 8009e80:	24001a10 	.word	0x24001a10
 8009e84:	24000068 	.word	0x24000068
 8009e88:	24001b38 	.word	0x24001b38

08009e8c <USBD_Get_String_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of String_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_String_Framework(ULONG *Length)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  uint16_t len = 0U;
 8009e94:	2300      	movs	r3, #0
 8009e96:	81bb      	strh	r3, [r7, #12]
  uint8_t count = 0U;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE String_Framework0 */

  /* USER CODE String_Framework0 */

  /* Set the Manufacturer language Id and index in USBD_string_framework */
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8009e9c:	7bfb      	ldrb	r3, [r7, #15]
 8009e9e:	1c5a      	adds	r2, r3, #1
 8009ea0:	73fa      	strb	r2, [r7, #15]
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	4b37      	ldr	r3, [pc, #220]	; (8009f84 <USBD_Get_String_Framework+0xf8>)
 8009ea6:	2109      	movs	r1, #9
 8009ea8:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8009eaa:	7bfb      	ldrb	r3, [r7, #15]
 8009eac:	1c5a      	adds	r2, r3, #1
 8009eae:	73fa      	strb	r2, [r7, #15]
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	4b34      	ldr	r3, [pc, #208]	; (8009f84 <USBD_Get_String_Framework+0xf8>)
 8009eb4:	2104      	movs	r1, #4
 8009eb6:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
 8009eba:	1c5a      	adds	r2, r3, #1
 8009ebc:	73fa      	strb	r2, [r7, #15]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	4b30      	ldr	r3, [pc, #192]	; (8009f84 <USBD_Get_String_Framework+0xf8>)
 8009ec2:	2101      	movs	r1, #1
 8009ec4:	5499      	strb	r1, [r3, r2]

  /* Set the Manufacturer string in string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_string_framework + count, &len);
 8009ec6:	7bfb      	ldrb	r3, [r7, #15]
 8009ec8:	4a2e      	ldr	r2, [pc, #184]	; (8009f84 <USBD_Get_String_Framework+0xf8>)
 8009eca:	4413      	add	r3, r2
 8009ecc:	f107 020c 	add.w	r2, r7, #12
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	482d      	ldr	r0, [pc, #180]	; (8009f88 <USBD_Get_String_Framework+0xfc>)
 8009ed4:	f000 f8fd 	bl	800a0d2 <USBD_Desc_GetString>

  /* Set the Product language Id and index in USBD_string_framework */
  count += len + 1;
 8009ed8:	89bb      	ldrh	r3, [r7, #12]
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	7bfb      	ldrb	r3, [r7, #15]
 8009ede:	4413      	add	r3, r2
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8009ee6:	7bfb      	ldrb	r3, [r7, #15]
 8009ee8:	1c5a      	adds	r2, r3, #1
 8009eea:	73fa      	strb	r2, [r7, #15]
 8009eec:	461a      	mov	r2, r3
 8009eee:	4b25      	ldr	r3, [pc, #148]	; (8009f84 <USBD_Get_String_Framework+0xf8>)
 8009ef0:	2109      	movs	r1, #9
 8009ef2:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
 8009ef6:	1c5a      	adds	r2, r3, #1
 8009ef8:	73fa      	strb	r2, [r7, #15]
 8009efa:	461a      	mov	r2, r3
 8009efc:	4b21      	ldr	r3, [pc, #132]	; (8009f84 <USBD_Get_String_Framework+0xf8>)
 8009efe:	2104      	movs	r1, #4
 8009f00:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 8009f02:	7bfb      	ldrb	r3, [r7, #15]
 8009f04:	1c5a      	adds	r2, r3, #1
 8009f06:	73fa      	strb	r2, [r7, #15]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	4b1e      	ldr	r3, [pc, #120]	; (8009f84 <USBD_Get_String_Framework+0xf8>)
 8009f0c:	2102      	movs	r1, #2
 8009f0e:	5499      	strb	r1, [r3, r2]

  /* Set the Product string in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 8009f10:	7bfb      	ldrb	r3, [r7, #15]
 8009f12:	4a1c      	ldr	r2, [pc, #112]	; (8009f84 <USBD_Get_String_Framework+0xf8>)
 8009f14:	4413      	add	r3, r2
 8009f16:	f107 020c 	add.w	r2, r7, #12
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	481b      	ldr	r0, [pc, #108]	; (8009f8c <USBD_Get_String_Framework+0x100>)
 8009f1e:	f000 f8d8 	bl	800a0d2 <USBD_Desc_GetString>

  /* Set Serial language Id and index in string_framework */
  count += len + 1;
 8009f22:	89bb      	ldrh	r3, [r7, #12]
 8009f24:	b2da      	uxtb	r2, r3
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
 8009f28:	4413      	add	r3, r2
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
 8009f32:	1c5a      	adds	r2, r3, #1
 8009f34:	73fa      	strb	r2, [r7, #15]
 8009f36:	461a      	mov	r2, r3
 8009f38:	4b12      	ldr	r3, [pc, #72]	; (8009f84 <USBD_Get_String_Framework+0xf8>)
 8009f3a:	2109      	movs	r1, #9
 8009f3c:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8009f3e:	7bfb      	ldrb	r3, [r7, #15]
 8009f40:	1c5a      	adds	r2, r3, #1
 8009f42:	73fa      	strb	r2, [r7, #15]
 8009f44:	461a      	mov	r2, r3
 8009f46:	4b0f      	ldr	r3, [pc, #60]	; (8009f84 <USBD_Get_String_Framework+0xf8>)
 8009f48:	2104      	movs	r1, #4
 8009f4a:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 8009f4c:	7bfb      	ldrb	r3, [r7, #15]
 8009f4e:	1c5a      	adds	r2, r3, #1
 8009f50:	73fa      	strb	r2, [r7, #15]
 8009f52:	461a      	mov	r2, r3
 8009f54:	4b0b      	ldr	r3, [pc, #44]	; (8009f84 <USBD_Get_String_Framework+0xf8>)
 8009f56:	2103      	movs	r1, #3
 8009f58:	5499      	strb	r1, [r3, r2]

  /* Set the Serial number in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 8009f5a:	7bfb      	ldrb	r3, [r7, #15]
 8009f5c:	4a09      	ldr	r2, [pc, #36]	; (8009f84 <USBD_Get_String_Framework+0xf8>)
 8009f5e:	4413      	add	r3, r2
 8009f60:	f107 020c 	add.w	r2, r7, #12
 8009f64:	4619      	mov	r1, r3
 8009f66:	480a      	ldr	r0, [pc, #40]	; (8009f90 <USBD_Get_String_Framework+0x104>)
 8009f68:	f000 f8b3 	bl	800a0d2 <USBD_Desc_GetString>
  /* USER CODE String_Framework1 */

  /* USER CODE String_Framework1 */

  /* Get the length of USBD_string_framework */
  *Length = strlen((const char *)USBD_string_framework);
 8009f6c:	4805      	ldr	r0, [pc, #20]	; (8009f84 <USBD_Get_String_Framework+0xf8>)
 8009f6e:	f7f6 f9cd 	bl	800030c <strlen>
 8009f72:	4602      	mov	r2, r0
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	601a      	str	r2, [r3, #0]

  return USBD_string_framework;
 8009f78:	4b02      	ldr	r3, [pc, #8]	; (8009f84 <USBD_Get_String_Framework+0xf8>)
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	24001df0 	.word	0x24001df0
 8009f88:	0800aa3c 	.word	0x0800aa3c
 8009f8c:	0800aa50 	.word	0x0800aa50
 8009f90:	0800aa64 	.word	0x0800aa64

08009f94 <USBD_Get_Language_Id_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of Language_Id_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_Language_Id_Framework(ULONG *Length)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  uint8_t count = 0U;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	73fb      	strb	r3, [r7, #15]

  /* Set the language Id in USBD_language_id_framework */
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8009fa0:	7bfb      	ldrb	r3, [r7, #15]
 8009fa2:	1c5a      	adds	r2, r3, #1
 8009fa4:	73fa      	strb	r2, [r7, #15]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	4b0a      	ldr	r3, [pc, #40]	; (8009fd4 <USBD_Get_Language_Id_Framework+0x40>)
 8009faa:	2109      	movs	r1, #9
 8009fac:	5499      	strb	r1, [r3, r2]
  USBD_language_id_framework[count++] = USBD_LANGID_STRING >> 8;
 8009fae:	7bfb      	ldrb	r3, [r7, #15]
 8009fb0:	1c5a      	adds	r2, r3, #1
 8009fb2:	73fa      	strb	r2, [r7, #15]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	4b07      	ldr	r3, [pc, #28]	; (8009fd4 <USBD_Get_Language_Id_Framework+0x40>)
 8009fb8:	2104      	movs	r1, #4
 8009fba:	5499      	strb	r1, [r3, r2]

  /* Get the length of USBD_language_id_framework */
  *Length = strlen((const char *)USBD_language_id_framework);
 8009fbc:	4805      	ldr	r0, [pc, #20]	; (8009fd4 <USBD_Get_Language_Id_Framework+0x40>)
 8009fbe:	f7f6 f9a5 	bl	800030c <strlen>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	601a      	str	r2, [r3, #0]

  return USBD_language_id_framework;
 8009fc8:	4b02      	ldr	r3, [pc, #8]	; (8009fd4 <USBD_Get_Language_Id_Framework+0x40>)
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	24001ef0 	.word	0x24001ef0

08009fd8 <USBD_Get_Interface_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval interface number
  */
uint16_t USBD_Get_Interface_Number(uint8_t class_type, uint8_t interface_type)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	4603      	mov	r3, r0
 8009fe0:	460a      	mov	r2, r1
 8009fe2:	71fb      	strb	r3, [r7, #7]
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	71bb      	strb	r3, [r7, #6]
  uint8_t itf_num = 0U;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	73fb      	strb	r3, [r7, #15]
  uint8_t idx = 0U;
 8009fec:	2300      	movs	r3, #0
 8009fee:	73bb      	strb	r3, [r7, #14]

  /* USER CODE BEGIN USBD_Get_Interface_Number0 */

  /* USER CODE BEGIN USBD_Get_Interface_Number0 */

  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	73bb      	strb	r3, [r7, #14]
 8009ff4:	e021      	b.n	800a03a <USBD_Get_Interface_Number+0x62>
  {
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 8009ff6:	7bbb      	ldrb	r3, [r7, #14]
 8009ff8:	4a15      	ldr	r2, [pc, #84]	; (800a050 <USBD_Get_Interface_Number+0x78>)
 8009ffa:	215c      	movs	r1, #92	; 0x5c
 8009ffc:	fb01 f303 	mul.w	r3, r1, r3
 800a000:	4413      	add	r3, r2
 800a002:	330c      	adds	r3, #12
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	79fa      	ldrb	r2, [r7, #7]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d113      	bne.n	800a034 <USBD_Get_Interface_Number+0x5c>
        (USBD_Device_FS.tclasslist[idx].InterfaceType == interface_type))
 800a00c:	7bbb      	ldrb	r3, [r7, #14]
 800a00e:	4a10      	ldr	r2, [pc, #64]	; (800a050 <USBD_Get_Interface_Number+0x78>)
 800a010:	215c      	movs	r1, #92	; 0x5c
 800a012:	fb01 f303 	mul.w	r3, r1, r3
 800a016:	4413      	add	r3, r2
 800a018:	3314      	adds	r3, #20
 800a01a:	781b      	ldrb	r3, [r3, #0]
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 800a01c:	79ba      	ldrb	r2, [r7, #6]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d108      	bne.n	800a034 <USBD_Get_Interface_Number+0x5c>
    {
      itf_num = USBD_Device_FS.tclasslist[idx].Ifs[0];
 800a022:	7bbb      	ldrb	r3, [r7, #14]
 800a024:	4a0a      	ldr	r2, [pc, #40]	; (800a050 <USBD_Get_Interface_Number+0x78>)
 800a026:	215c      	movs	r1, #92	; 0x5c
 800a028:	fb01 f303 	mul.w	r3, r1, r3
 800a02c:	4413      	add	r3, r2
 800a02e:	335a      	adds	r3, #90	; 0x5a
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	73fb      	strb	r3, [r7, #15]
  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 800a034:	7bbb      	ldrb	r3, [r7, #14]
 800a036:	3301      	adds	r3, #1
 800a038:	73bb      	strb	r3, [r7, #14]
 800a03a:	7bbb      	ldrb	r3, [r7, #14]
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	d9da      	bls.n	8009ff6 <USBD_Get_Interface_Number+0x1e>

  /* USER CODE BEGIN USBD_Get_Interface_Number1 */

  /* USER CODE BEGIN USBD_Get_Interface_Number1 */

  return itf_num;
 800a040:	7bfb      	ldrb	r3, [r7, #15]
 800a042:	b29b      	uxth	r3, r3
}
 800a044:	4618      	mov	r0, r3
 800a046:	3714      	adds	r7, #20
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr
 800a050:	24001a10 	.word	0x24001a10

0800a054 <USBD_Get_Configuration_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval configuration number
  */
uint16_t USBD_Get_Configuration_Number(uint8_t class_type, uint8_t interface_type)
{
 800a054:	b480      	push	{r7}
 800a056:	b085      	sub	sp, #20
 800a058:	af00      	add	r7, sp, #0
 800a05a:	4603      	mov	r3, r0
 800a05c:	460a      	mov	r2, r1
 800a05e:	71fb      	strb	r3, [r7, #7]
 800a060:	4613      	mov	r3, r2
 800a062:	71bb      	strb	r3, [r7, #6]
  uint8_t cfg_num = 1U;
 800a064:	2301      	movs	r3, #1
 800a066:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

  /* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

  return cfg_num;
 800a068:	7bfb      	ldrb	r3, [r7, #15]
 800a06a:	b29b      	uxth	r3, r3
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3714      	adds	r7, #20
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <USBD_HID_ReportDesc>:
  *         Return the device HID Report Descriptor
  * @param  hid_type : HID Device type
  * @retval Pointer to HID Report Descriptor buffer
  */
uint8_t *USBD_HID_ReportDesc(uint8_t hid_type)
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	4603      	mov	r3, r0
 800a080:	71fb      	strb	r3, [r7, #7]
  uint8_t *pHidReportDesc = NULL;
 800a082:	2300      	movs	r3, #0
 800a084:	60fb      	str	r3, [r7, #12]

  /* USER CODE HidReportDesc0 */

  /* USER CODE HidReportDesc0 */

  switch(hid_type)
 800a086:	79fb      	ldrb	r3, [r7, #7]
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d102      	bne.n	800a092 <USBD_HID_ReportDesc+0x1a>
  {
    case INTERFACE_HID_MOUSE:
      pHidReportDesc = USBD_HID_MOUSE_ReportDesc;
 800a08c:	4b05      	ldr	r3, [pc, #20]	; (800a0a4 <USBD_HID_ReportDesc+0x2c>)
 800a08e:	60fb      	str	r3, [r7, #12]
      break;
 800a090:	e000      	b.n	800a094 <USBD_HID_ReportDesc+0x1c>

    default:
      break;
 800a092:	bf00      	nop

  /* USER CODE HidReportDesc1 */

  /* USER CODE HidReportDesc1 */

  return pHidReportDesc;
 800a094:	68fb      	ldr	r3, [r7, #12]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3714      	adds	r7, #20
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	2400006c 	.word	0x2400006c

0800a0a8 <USBD_HID_ReportDesc_length>:
  *         Return the device HID Report Descriptor
  * @param  hid_type : HID Device type
  * @retval Size of HID Report Descriptor buffer
  */
uint16_t USBD_HID_ReportDesc_length(uint8_t hid_type)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	71fb      	strb	r3, [r7, #7]
  uint16_t ReportDesc_Size = 0;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	81fb      	strh	r3, [r7, #14]

  /* USER CODE ReportDesc_Size0 */

  /* USER CODE ReportDesc_Size0 */

  switch(hid_type)
 800a0b6:	79fb      	ldrb	r3, [r7, #7]
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	d102      	bne.n	800a0c2 <USBD_HID_ReportDesc_length+0x1a>
  {
    case INTERFACE_HID_MOUSE:
      ReportDesc_Size = sizeof(USBD_HID_MOUSE_ReportDesc);
 800a0bc:	234a      	movs	r3, #74	; 0x4a
 800a0be:	81fb      	strh	r3, [r7, #14]
      break;
 800a0c0:	e000      	b.n	800a0c4 <USBD_HID_ReportDesc_length+0x1c>

    default:
      break;
 800a0c2:	bf00      	nop

  /* USER CODE ReportDesc_Size1 */

  /* USER CODE ReportDesc_Size1 */

  return ReportDesc_Size;
 800a0c4:	89fb      	ldrh	r3, [r7, #14]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <USBD_Desc_GetString>:
  * @param  Unicode : Formatted string buffer (Unicode)
  * @param  len : descriptor length
  * @retval None
  */
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b086      	sub	sp, #24
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	60f8      	str	r0, [r7, #12]
 800a0da:	60b9      	str	r1, [r7, #8]
 800a0dc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d023      	beq.n	800a130 <USBD_Desc_GetString+0x5e>
  {
    return;
  }

  pdesc = desc;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	613b      	str	r3, [r7, #16]
  *len = (uint16_t)USBD_Desc_GetLen(pdesc);
 800a0ec:	6938      	ldr	r0, [r7, #16]
 800a0ee:	f000 f823 	bl	800a138 <USBD_Desc_GetLen>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	b29a      	uxth	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	801a      	strh	r2, [r3, #0]

  unicode[idx++] = *(uint8_t *)len;
 800a0fa:	7dfb      	ldrb	r3, [r7, #23]
 800a0fc:	1c5a      	adds	r2, r3, #1
 800a0fe:	75fa      	strb	r2, [r7, #23]
 800a100:	461a      	mov	r2, r3
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	4413      	add	r3, r2
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	7812      	ldrb	r2, [r2, #0]
 800a10a:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 800a10c:	e00b      	b.n	800a126 <USBD_Desc_GetString+0x54>
  {
    unicode[idx++] = *pdesc;
 800a10e:	7dfb      	ldrb	r3, [r7, #23]
 800a110:	1c5a      	adds	r2, r3, #1
 800a112:	75fa      	strb	r2, [r7, #23]
 800a114:	461a      	mov	r2, r3
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	4413      	add	r3, r2
 800a11a:	693a      	ldr	r2, [r7, #16]
 800a11c:	7812      	ldrb	r2, [r2, #0]
 800a11e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	3301      	adds	r3, #1
 800a124:	613b      	str	r3, [r7, #16]
  while (*pdesc != (uint8_t)'\0')
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1ef      	bne.n	800a10e <USBD_Desc_GetString+0x3c>
 800a12e:	e000      	b.n	800a132 <USBD_Desc_GetString+0x60>
    return;
 800a130:	bf00      	nop
  }
}
 800a132:	3718      	adds	r7, #24
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <USBD_Desc_GetLen>:
  *         return the string length
  * @param  buf : pointer to the ASCII string buffer
  * @retval string length
  */
static uint8_t USBD_Desc_GetLen(uint8_t *buf)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a140:	2300      	movs	r3, #0
 800a142:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a148:	e005      	b.n	800a156 <USBD_Desc_GetLen+0x1e>
  {
    len++;
 800a14a:	7bfb      	ldrb	r3, [r7, #15]
 800a14c:	3301      	adds	r3, #1
 800a14e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	3301      	adds	r3, #1
 800a154:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d1f5      	bne.n	800a14a <USBD_Desc_GetLen+0x12>
  }

  return len;
 800a15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3714      	adds	r7, #20
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <USBD_Device_Framework_Builder>:
  */
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
                                              uint8_t *pDevFrameWorkDesc,
                                              uint8_t *UserClassInstance,
                                              uint8_t Speed)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b088      	sub	sp, #32
 800a170:	af02      	add	r7, sp, #8
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
 800a178:	70fb      	strb	r3, [r7, #3]
  static USBD_DeviceDescTypedef   *pDevDesc;
  static USBD_DevQualiDescTypedef *pDevQualDesc;
  uint8_t Idx_Instance = 0U;
 800a17a:	2300      	movs	r3, #0
 800a17c:	75fb      	strb	r3, [r7, #23]

  /* Set Dev and conf descriptors size to 0 */
  pdev->CurrConfDescSz = 0U;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2200      	movs	r2, #0
 800a182:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  pdev->CurrDevDescSz = 0U;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

  /* Set the pointer to the device descriptor area*/
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 800a18e:	4a73      	ldr	r2, [pc, #460]	; (800a35c <USBD_Device_Framework_Builder+0x1f0>)
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	6013      	str	r3, [r2, #0]

  /* Start building the generic device descriptor common part */
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 800a194:	4b71      	ldr	r3, [pc, #452]	; (800a35c <USBD_Device_Framework_Builder+0x1f0>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2212      	movs	r2, #18
 800a19a:	701a      	strb	r2, [r3, #0]
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 800a19c:	4b6f      	ldr	r3, [pc, #444]	; (800a35c <USBD_Device_Framework_Builder+0x1f0>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	705a      	strb	r2, [r3, #1]
  pDevDesc->bcdUSB = USB_BCDUSB;
 800a1a4:	4b6d      	ldr	r3, [pc, #436]	; (800a35c <USBD_Device_Framework_Builder+0x1f0>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	709a      	strb	r2, [r3, #2]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f042 0202 	orr.w	r2, r2, #2
 800a1b2:	70da      	strb	r2, [r3, #3]
  pDevDesc->bDeviceClass = 0x00;
 800a1b4:	4b69      	ldr	r3, [pc, #420]	; (800a35c <USBD_Device_Framework_Builder+0x1f0>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	711a      	strb	r2, [r3, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 800a1bc:	4b67      	ldr	r3, [pc, #412]	; (800a35c <USBD_Device_Framework_Builder+0x1f0>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	715a      	strb	r2, [r3, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 800a1c4:	4b65      	ldr	r3, [pc, #404]	; (800a35c <USBD_Device_Framework_Builder+0x1f0>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	719a      	strb	r2, [r3, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 800a1cc:	4b63      	ldr	r3, [pc, #396]	; (800a35c <USBD_Device_Framework_Builder+0x1f0>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2240      	movs	r2, #64	; 0x40
 800a1d2:	71da      	strb	r2, [r3, #7]
  pDevDesc->idVendor = USBD_VID;
 800a1d4:	4b61      	ldr	r3, [pc, #388]	; (800a35c <USBD_Device_Framework_Builder+0x1f0>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f062 027c 	orn	r2, r2, #124	; 0x7c
 800a1de:	721a      	strb	r2, [r3, #8]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f042 0204 	orr.w	r2, r2, #4
 800a1e6:	725a      	strb	r2, [r3, #9]
  pDevDesc->idProduct = USBD_PID;
 800a1e8:	4b5c      	ldr	r3, [pc, #368]	; (800a35c <USBD_Device_Framework_Builder+0x1f0>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f042 0210 	orr.w	r2, r2, #16
 800a1f2:	729a      	strb	r2, [r3, #10]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800a1fa:	72da      	strb	r2, [r3, #11]
  pDevDesc->bcdDevice = 0x0200;
 800a1fc:	4b57      	ldr	r3, [pc, #348]	; (800a35c <USBD_Device_Framework_Builder+0x1f0>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2200      	movs	r2, #0
 800a202:	731a      	strb	r2, [r3, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	f042 0202 	orr.w	r2, r2, #2
 800a20a:	735a      	strb	r2, [r3, #13]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 800a20c:	4b53      	ldr	r3, [pc, #332]	; (800a35c <USBD_Device_Framework_Builder+0x1f0>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2201      	movs	r2, #1
 800a212:	739a      	strb	r2, [r3, #14]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 800a214:	4b51      	ldr	r3, [pc, #324]	; (800a35c <USBD_Device_Framework_Builder+0x1f0>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	2202      	movs	r2, #2
 800a21a:	73da      	strb	r2, [r3, #15]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 800a21c:	4b4f      	ldr	r3, [pc, #316]	; (800a35c <USBD_Device_Framework_Builder+0x1f0>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2203      	movs	r2, #3
 800a222:	741a      	strb	r2, [r3, #16]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 800a224:	4b4d      	ldr	r3, [pc, #308]	; (800a35c <USBD_Device_Framework_Builder+0x1f0>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2201      	movs	r2, #1
 800a22a:	745a      	strb	r2, [r3, #17]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800a232:	f103 0212 	add.w	r2, r3, #18
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

  /* Check if USBx is in high speed mode to add qualifier descriptor */
  if (Speed == USBD_HIGH_SPEED)
 800a23c:	78fb      	ldrb	r3, [r7, #3]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d162      	bne.n	800a308 <USBD_Device_Framework_Builder+0x19c>
  {
    pDevQualDesc = (USBD_DevQualiDescTypedef *)(pDevFrameWorkDesc + pdev->CurrDevDescSz);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	4413      	add	r3, r2
 800a24c:	4a44      	ldr	r2, [pc, #272]	; (800a360 <USBD_Device_Framework_Builder+0x1f4>)
 800a24e:	6013      	str	r3, [r2, #0]
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 800a250:	4b43      	ldr	r3, [pc, #268]	; (800a360 <USBD_Device_Framework_Builder+0x1f4>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	220a      	movs	r2, #10
 800a256:	701a      	strb	r2, [r3, #0]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 800a258:	4b41      	ldr	r3, [pc, #260]	; (800a360 <USBD_Device_Framework_Builder+0x1f4>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2206      	movs	r2, #6
 800a25e:	705a      	strb	r2, [r3, #1]
    pDevQualDesc->bcdDevice = 0x0200;
 800a260:	4b3f      	ldr	r3, [pc, #252]	; (800a360 <USBD_Device_Framework_Builder+0x1f4>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2200      	movs	r2, #0
 800a266:	709a      	strb	r2, [r3, #2]
 800a268:	2200      	movs	r2, #0
 800a26a:	f042 0202 	orr.w	r2, r2, #2
 800a26e:	70da      	strb	r2, [r3, #3]
    pDevQualDesc->Class = 0x00;
 800a270:	4b3b      	ldr	r3, [pc, #236]	; (800a360 <USBD_Device_Framework_Builder+0x1f4>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2200      	movs	r2, #0
 800a276:	711a      	strb	r2, [r3, #4]
    pDevQualDesc->SubClass = 0x00;
 800a278:	4b39      	ldr	r3, [pc, #228]	; (800a360 <USBD_Device_Framework_Builder+0x1f4>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2200      	movs	r2, #0
 800a27e:	715a      	strb	r2, [r3, #5]
    pDevQualDesc->Protocol = 0x00;
 800a280:	4b37      	ldr	r3, [pc, #220]	; (800a360 <USBD_Device_Framework_Builder+0x1f4>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2200      	movs	r2, #0
 800a286:	719a      	strb	r2, [r3, #6]
    pDevQualDesc->bMaxPacketSize = 0x40;
 800a288:	4b35      	ldr	r3, [pc, #212]	; (800a360 <USBD_Device_Framework_Builder+0x1f4>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2240      	movs	r2, #64	; 0x40
 800a28e:	71da      	strb	r2, [r3, #7]
    pDevQualDesc->bNumConfigurations = 0x01;
 800a290:	4b33      	ldr	r3, [pc, #204]	; (800a360 <USBD_Device_Framework_Builder+0x1f4>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2201      	movs	r2, #1
 800a296:	721a      	strb	r2, [r3, #8]
    pDevQualDesc->bReserved = 0x00;
 800a298:	4b31      	ldr	r3, [pc, #196]	; (800a360 <USBD_Device_Framework_Builder+0x1f4>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2200      	movs	r2, #0
 800a29e:	725a      	strb	r2, [r3, #9]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800a2a6:	f103 020a 	add.w	r2, r3, #10
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  }

  /* Build the device framework */
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 800a2b0:	e02a      	b.n	800a308 <USBD_Device_Framework_Builder+0x19c>
  {
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d823      	bhi.n	800a302 <USBD_Device_Framework_Builder+0x196>
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	689b      	ldr	r3, [r3, #8]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d81f      	bhi.n	800a302 <USBD_Device_Framework_Builder+0x196>
        (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE))
 800a2c2:	7dfb      	ldrb	r3, [r7, #23]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	781b      	ldrb	r3, [r3, #0]
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d019      	beq.n	800a302 <USBD_Device_Framework_Builder+0x196>
    {
      /* Call the composite class builder */
      (void)USBD_FrameWork_AddClass(pdev,
                                    (USBD_CompositeClassTypeDef)UserClassInstance[Idx_Instance],
 800a2ce:	7dfb      	ldrb	r3, [r7, #23]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	4413      	add	r3, r2
      (void)USBD_FrameWork_AddClass(pdev,
 800a2d4:	7819      	ldrb	r1, [r3, #0]
                                    0, Speed,
                                    (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
      (void)USBD_FrameWork_AddClass(pdev,
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	4413      	add	r3, r2
 800a2e0:	78fa      	ldrb	r2, [r7, #3]
 800a2e2:	9300      	str	r3, [sp, #0]
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f000 f83b 	bl	800a364 <USBD_FrameWork_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	1c5a      	adds	r2, r3, #1
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	605a      	str	r2, [r3, #4]
      pdev->NumClasses ++;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	1c5a      	adds	r2, r3, #1
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	609a      	str	r2, [r3, #8]
    }

    Idx_Instance++;
 800a302:	7dfb      	ldrb	r3, [r7, #23]
 800a304:	3301      	adds	r3, #1
 800a306:	75fb      	strb	r3, [r7, #23]
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 800a308:	7dfb      	ldrb	r3, [r7, #23]
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d9d1      	bls.n	800a2b2 <USBD_Device_Framework_Builder+0x146>
  }

  /* Check if there is a composite class and update device class */
  if (pdev->NumClasses > 1)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d90c      	bls.n	800a330 <USBD_Device_Framework_Builder+0x1c4>
  {
    pDevDesc->bDeviceClass = 0xEF;
 800a316:	4b11      	ldr	r3, [pc, #68]	; (800a35c <USBD_Device_Framework_Builder+0x1f0>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	22ef      	movs	r2, #239	; 0xef
 800a31c:	711a      	strb	r2, [r3, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 800a31e:	4b0f      	ldr	r3, [pc, #60]	; (800a35c <USBD_Device_Framework_Builder+0x1f0>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2202      	movs	r2, #2
 800a324:	715a      	strb	r2, [r3, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 800a326:	4b0d      	ldr	r3, [pc, #52]	; (800a35c <USBD_Device_Framework_Builder+0x1f0>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2201      	movs	r2, #1
 800a32c:	719a      	strb	r2, [r3, #6]
 800a32e:	e00f      	b.n	800a350 <USBD_Device_Framework_Builder+0x1e4>
  }
  else
  {
    /* Check if the CDC ACM class is set and update device class */
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	2b02      	cmp	r3, #2
 800a336:	d10b      	bne.n	800a350 <USBD_Device_Framework_Builder+0x1e4>
    {
      pDevDesc->bDeviceClass = 0x02;
 800a338:	4b08      	ldr	r3, [pc, #32]	; (800a35c <USBD_Device_Framework_Builder+0x1f0>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2202      	movs	r2, #2
 800a33e:	711a      	strb	r2, [r3, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 800a340:	4b06      	ldr	r3, [pc, #24]	; (800a35c <USBD_Device_Framework_Builder+0x1f0>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2202      	movs	r2, #2
 800a346:	715a      	strb	r2, [r3, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 800a348:	4b04      	ldr	r3, [pc, #16]	; (800a35c <USBD_Device_Framework_Builder+0x1f0>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2200      	movs	r2, #0
 800a34e:	719a      	strb	r2, [r3, #6]
    }
  }

  return pDevFrameWorkDesc;
 800a350:	68bb      	ldr	r3, [r7, #8]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3718      	adds	r7, #24
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	24001ef4 	.word	0x24001ef4
 800a360:	24001ef8 	.word	0x24001ef8

0800a364 <USBD_FrameWork_AddClass>:
  */
uint8_t  USBD_FrameWork_AddClass(USBD_DevClassHandleTypeDef *pdev,
                                 USBD_CompositeClassTypeDef class,
                                 uint8_t cfgidx, uint8_t Speed,
                                 uint8_t *pCmpstConfDesc)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	4608      	mov	r0, r1
 800a36e:	4611      	mov	r1, r2
 800a370:	461a      	mov	r2, r3
 800a372:	4603      	mov	r3, r0
 800a374:	70fb      	strb	r3, [r7, #3]
 800a376:	460b      	mov	r3, r1
 800a378:	70bb      	strb	r3, [r7, #2]
 800a37a:	4613      	mov	r3, r2
 800a37c:	707b      	strb	r3, [r7, #1]
  static uint8_t interface_idx = 0U;

  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	2b02      	cmp	r3, #2
 800a384:	d853      	bhi.n	800a42e <USBD_FrameWork_AddClass+0xca>
      (pdev->tclasslist[pdev->classId].Active == 0U))
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	215c      	movs	r1, #92	; 0x5c
 800a38e:	fb01 f303 	mul.w	r3, r1, r3
 800a392:	4413      	add	r3, r2
 800a394:	3318      	adds	r3, #24
 800a396:	681b      	ldr	r3, [r3, #0]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d148      	bne.n	800a42e <USBD_FrameWork_AddClass+0xca>
  {
    /* Store the class parameters in the global tab */
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	6852      	ldr	r2, [r2, #4]
 800a3a4:	6879      	ldr	r1, [r7, #4]
 800a3a6:	205c      	movs	r0, #92	; 0x5c
 800a3a8:	fb00 f303 	mul.w	r3, r0, r3
 800a3ac:	440b      	add	r3, r1
 800a3ae:	3310      	adds	r3, #16
 800a3b0:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	215c      	movs	r1, #92	; 0x5c
 800a3ba:	fb01 f303 	mul.w	r3, r1, r3
 800a3be:	4413      	add	r3, r2
 800a3c0:	3318      	adds	r3, #24
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	215c      	movs	r1, #92	; 0x5c
 800a3ce:	fb01 f303 	mul.w	r3, r1, r3
 800a3d2:	4413      	add	r3, r2
 800a3d4:	330c      	adds	r3, #12
 800a3d6:	78fa      	ldrb	r2, [r7, #3]
 800a3d8:	701a      	strb	r2, [r3, #0]

    if (class == CLASS_TYPE_HID)
 800a3da:	78fb      	ldrb	r3, [r7, #3]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d11b      	bne.n	800a418 <USBD_FrameWork_AddClass+0xb4>
    {
      pdev->tclasslist[pdev->classId].InterfaceType = UserHIDInterface[interface_idx];
 800a3e0:	4b15      	ldr	r3, [pc, #84]	; (800a438 <USBD_FrameWork_AddClass+0xd4>)
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	4a14      	ldr	r2, [pc, #80]	; (800a43c <USBD_FrameWork_AddClass+0xd8>)
 800a3ec:	5c50      	ldrb	r0, [r2, r1]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	215c      	movs	r1, #92	; 0x5c
 800a3f2:	fb01 f303 	mul.w	r3, r1, r3
 800a3f6:	4413      	add	r3, r2
 800a3f8:	3314      	adds	r3, #20
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	701a      	strb	r2, [r3, #0]

      interface_idx++;
 800a3fe:	4b0e      	ldr	r3, [pc, #56]	; (800a438 <USBD_FrameWork_AddClass+0xd4>)
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	3301      	adds	r3, #1
 800a404:	b2da      	uxtb	r2, r3
 800a406:	4b0c      	ldr	r3, [pc, #48]	; (800a438 <USBD_FrameWork_AddClass+0xd4>)
 800a408:	701a      	strb	r2, [r3, #0]

      if (interface_idx == sizeof(UserHIDInterface))
 800a40a:	4b0b      	ldr	r3, [pc, #44]	; (800a438 <USBD_FrameWork_AddClass+0xd4>)
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d102      	bne.n	800a418 <USBD_FrameWork_AddClass+0xb4>
      {
        interface_idx = 0U;
 800a412:	4b09      	ldr	r3, [pc, #36]	; (800a438 <USBD_FrameWork_AddClass+0xd4>)
 800a414:	2200      	movs	r2, #0
 800a416:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_FrameWork_AddToConfDesc(pdev, Speed, pCmpstConfDesc) != UX_SUCCESS)
 800a418:	787b      	ldrb	r3, [r7, #1]
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	4619      	mov	r1, r3
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f80e 	bl	800a440 <USBD_FrameWork_AddToConfDesc>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d001      	beq.n	800a42e <USBD_FrameWork_AddClass+0xca>
    {
      return UX_ERROR;
 800a42a:	23ff      	movs	r3, #255	; 0xff
 800a42c:	e000      	b.n	800a430 <USBD_FrameWork_AddClass+0xcc>
    }
  }

  UNUSED(cfgidx);

  return UX_SUCCESS;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	24001efc 	.word	0x24001efc
 800a43c:	24000060 	.word	0x24000060

0800a440 <USBD_FrameWork_AddToConfDesc>:
  * @param  pCmpstConfDesc: to composite device configuration descriptor
  * @retval status
  */
uint8_t  USBD_FrameWork_AddToConfDesc(USBD_DevClassHandleTypeDef *pdev, uint8_t Speed,
                                      uint8_t *pCmpstConfDesc)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	460b      	mov	r3, r1
 800a44a:	607a      	str	r2, [r7, #4]
 800a44c:	72fb      	strb	r3, [r7, #11]
  uint8_t interface = 0U;
 800a44e:	2300      	movs	r3, #0
 800a450:	75fb      	strb	r3, [r7, #23]
  /* USER CODE FrameWork_AddToConfDesc_0 */

  /* USER CODE FrameWork_AddToConfDesc_0 */

  /* The USB drivers do not set the speed value, so set it here before starting */
  pdev->Speed = Speed;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	7afa      	ldrb	r2, [r7, #11]
 800a456:	701a      	strb	r2, [r3, #0]

  /* start building the config descriptor common part */
  if (pdev->classId == 0U)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d107      	bne.n	800a470 <USBD_FrameWork_AddToConfDesc+0x30>
  {
    /* Add configuration and IAD descriptors */
    USBD_FrameWork_AddConfDesc((uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800a468:	4619      	mov	r1, r3
 800a46a:	4610      	mov	r0, r2
 800a46c:	f000 f888 	bl	800a580 <USBD_FrameWork_AddConfDesc>
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	68fa      	ldr	r2, [r7, #12]
 800a476:	215c      	movs	r1, #92	; 0x5c
 800a478:	fb01 f303 	mul.w	r3, r1, r3
 800a47c:	4413      	add	r3, r2
 800a47e:	330c      	adds	r3, #12
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	2b01      	cmp	r3, #1
 800a484:	d149      	bne.n	800a51a <USBD_FrameWork_AddToConfDesc+0xda>

#if USBD_HID_CLASS_ACTIVATED == 1U

    case CLASS_TYPE_HID:

      switch(pdev->tclasslist[pdev->classId].InterfaceType)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	68fa      	ldr	r2, [r7, #12]
 800a48c:	215c      	movs	r1, #92	; 0x5c
 800a48e:	fb01 f303 	mul.w	r3, r1, r3
 800a492:	4413      	add	r3, r2
 800a494:	3314      	adds	r3, #20
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d13c      	bne.n	800a516 <USBD_FrameWork_AddToConfDesc+0xd6>
#if USBD_HID_MOUSE_ACTIVATED == 1U

        case INTERFACE_HID_MOUSE:

          /* Find the first available interface slot and Assign number of interfaces */
          interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f000 f842 	bl	800a526 <USBD_FrameWork_FindFreeIFNbr>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	75fb      	strb	r3, [r7, #23]
          pdev->tclasslist[pdev->classId].NumIf = 1U;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	215c      	movs	r1, #92	; 0x5c
 800a4ae:	fb01 f303 	mul.w	r3, r1, r3
 800a4b2:	4413      	add	r3, r2
 800a4b4:	3320      	adds	r3, #32
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	601a      	str	r2, [r3, #0]
          pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	68fa      	ldr	r2, [r7, #12]
 800a4c0:	215c      	movs	r1, #92	; 0x5c
 800a4c2:	fb01 f303 	mul.w	r3, r1, r3
 800a4c6:	4413      	add	r3, r2
 800a4c8:	335a      	adds	r3, #90	; 0x5a
 800a4ca:	7dfa      	ldrb	r2, [r7, #23]
 800a4cc:	701a      	strb	r2, [r3, #0]

          /* Assign endpoint numbers */
          pdev->tclasslist[pdev->classId].NumEps = 1U; /* EP_IN */
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	215c      	movs	r1, #92	; 0x5c
 800a4d6:	fb01 f303 	mul.w	r3, r1, r3
 800a4da:	4413      	add	r3, r2
 800a4dc:	331c      	adds	r3, #28
 800a4de:	2201      	movs	r2, #1
 800a4e0:	601a      	str	r2, [r3, #0]

          /* Check the current speed to assign endpoint IN */
          if (pdev->Speed == USBD_HIGH_SPEED)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d106      	bne.n	800a4f8 <USBD_FrameWork_AddToConfDesc+0xb8>
          {
            /* Assign IN Endpoint */
            USBD_FrameWork_AssignEp(pdev, USBD_HID_MOUSE_EPIN_ADDR,
 800a4ea:	2304      	movs	r3, #4
 800a4ec:	2203      	movs	r2, #3
 800a4ee:	2181      	movs	r1, #129	; 0x81
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f000 f872 	bl	800a5da <USBD_FrameWork_AssignEp>
 800a4f6:	e005      	b.n	800a504 <USBD_FrameWork_AddToConfDesc+0xc4>
                                    USBD_EP_TYPE_INTR, USBD_HID_MOUSE_EPIN_HS_MPS);
          }
          else
          {
            /* Assign IN Endpoint */
            USBD_FrameWork_AssignEp(pdev, USBD_HID_MOUSE_EPIN_ADDR,
 800a4f8:	2304      	movs	r3, #4
 800a4fa:	2203      	movs	r2, #3
 800a4fc:	2181      	movs	r1, #129	; 0x81
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f000 f86b 	bl	800a5da <USBD_FrameWork_AssignEp>
                                    USBD_EP_TYPE_INTR, USBD_HID_MOUSE_EPIN_FS_MPS);
          }

          /* Configure and Append the Descriptor */
          USBD_FrameWork_HID_Desc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 800a504:	6879      	ldr	r1, [r7, #4]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800a50c:	461a      	mov	r2, r3
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f000 f8d6 	bl	800a6c0 <USBD_FrameWork_HID_Desc>

          break;
 800a514:	e000      	b.n	800a518 <USBD_FrameWork_AddToConfDesc+0xd8>

#endif /* USBD_HID_MOUSE_ACTIVATED == 1U */

        default:
          break;
 800a516:	bf00      	nop
      }

      break;
 800a518:	e000      	b.n	800a51c <USBD_FrameWork_AddToConfDesc+0xdc>

    default:
      /* USER CODE FrameWork_AddToConfDesc_2 */

      /* USER CODE FrameWork_AddToConfDesc_2 */
      break;
 800a51a:	bf00      	nop
  }

  return UX_SUCCESS;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3718      	adds	r7, #24
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <USBD_FrameWork_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_FrameWork_FindFreeIFNbr(USBD_DevClassHandleTypeDef *pdev)
{
 800a526:	b480      	push	{r7}
 800a528:	b087      	sub	sp, #28
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 800a52e:	2300      	movs	r3, #0
 800a530:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 800a532:	2300      	movs	r3, #0
 800a534:	613b      	str	r3, [r7, #16]
 800a536:	e016      	b.n	800a566 <USBD_FrameWork_FindFreeIFNbr+0x40>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800a538:	2300      	movs	r3, #0
 800a53a:	60fb      	str	r3, [r7, #12]
 800a53c:	e005      	b.n	800a54a <USBD_FrameWork_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	3301      	adds	r3, #1
 800a542:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	3301      	adds	r3, #1
 800a548:	60fb      	str	r3, [r7, #12]
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	215c      	movs	r1, #92	; 0x5c
 800a550:	fb01 f303 	mul.w	r3, r1, r3
 800a554:	4413      	add	r3, r2
 800a556:	3320      	adds	r3, #32
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d3ee      	bcc.n	800a53e <USBD_FrameWork_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	3301      	adds	r3, #1
 800a564:	613b      	str	r3, [r7, #16]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	693a      	ldr	r2, [r7, #16]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d3e3      	bcc.n	800a538 <USBD_FrameWork_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	b2db      	uxtb	r3, r3
}
 800a574:	4618      	mov	r0, r3
 800a576:	371c      	adds	r7, #28
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <USBD_FrameWork_AddConfDesc>:
  * @param  Conf: configuration descriptor
  * @param  pSze: pointer to the configuration descriptor size
  * @retval none
  */
static void  USBD_FrameWork_AddConfDesc(uint32_t Conf, uint32_t *pSze)
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypedef *ptr = (USBD_ConfigDescTypedef *)Conf;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	60fb      	str	r3, [r7, #12]

  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2209      	movs	r2, #9
 800a592:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2202      	movs	r2, #2
 800a598:	705a      	strb	r2, [r3, #1]
  ptr->wDescriptorLength = 0U;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2200      	movs	r2, #0
 800a59e:	709a      	strb	r2, [r3, #2]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces = 0U;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue = 1U;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	719a      	strb	r2, [r3, #6]
  ptr->bmAttributes = USBD_CONFIG_BMATTRIBUTES;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	22c0      	movs	r2, #192	; 0xc0
 800a5ba:	71da      	strb	r2, [r3, #7]
  ptr->bMaxPower = USBD_CONFIG_MAXPOWER;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2219      	movs	r2, #25
 800a5c0:	721a      	strb	r2, [r3, #8]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f103 0209 	add.w	r2, r3, #9
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	601a      	str	r2, [r3, #0]
}
 800a5ce:	bf00      	nop
 800a5d0:	3714      	adds	r7, #20
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr

0800a5da <USBD_FrameWork_AssignEp>:
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
 800a5da:	b490      	push	{r4, r7}
 800a5dc:	b086      	sub	sp, #24
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	60f8      	str	r0, [r7, #12]
 800a5e2:	607b      	str	r3, [r7, #4]
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	72fb      	strb	r3, [r7, #11]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	72bb      	strb	r3, [r7, #10]
  uint32_t idx = 0U;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800a5f0:	e002      	b.n	800a5f8 <USBD_FrameWork_AssignEp+0x1e>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	215c      	movs	r1, #92	; 0x5c
 800a600:	fb01 f303 	mul.w	r3, r1, r3
 800a604:	4413      	add	r3, r2
 800a606:	331c      	adds	r3, #28
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d210      	bcs.n	800a632 <USBD_FrameWork_AssignEp+0x58>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6858      	ldr	r0, [r3, #4]
 800a614:	68f9      	ldr	r1, [r7, #12]
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	4613      	mov	r3, r2
 800a61a:	005b      	lsls	r3, r3, #1
 800a61c:	4413      	add	r3, r2
 800a61e:	005b      	lsls	r3, r3, #1
 800a620:	225c      	movs	r2, #92	; 0x5c
 800a622:	fb00 f202 	mul.w	r2, r0, r2
 800a626:	4413      	add	r3, r2
 800a628:	440b      	add	r3, r1
 800a62a:	3328      	adds	r3, #40	; 0x28
 800a62c:	781b      	ldrb	r3, [r3, #0]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1df      	bne.n	800a5f2 <USBD_FrameWork_AssignEp+0x18>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6858      	ldr	r0, [r3, #4]
 800a636:	68f9      	ldr	r1, [r7, #12]
 800a638:	697a      	ldr	r2, [r7, #20]
 800a63a:	4613      	mov	r3, r2
 800a63c:	005b      	lsls	r3, r3, #1
 800a63e:	4413      	add	r3, r2
 800a640:	005b      	lsls	r3, r3, #1
 800a642:	225c      	movs	r2, #92	; 0x5c
 800a644:	fb00 f202 	mul.w	r2, r0, r2
 800a648:	4413      	add	r3, r2
 800a64a:	440b      	add	r3, r1
 800a64c:	3324      	adds	r3, #36	; 0x24
 800a64e:	7afa      	ldrb	r2, [r7, #11]
 800a650:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6858      	ldr	r0, [r3, #4]
 800a656:	68f9      	ldr	r1, [r7, #12]
 800a658:	697a      	ldr	r2, [r7, #20]
 800a65a:	4613      	mov	r3, r2
 800a65c:	005b      	lsls	r3, r3, #1
 800a65e:	4413      	add	r3, r2
 800a660:	005b      	lsls	r3, r3, #1
 800a662:	225c      	movs	r2, #92	; 0x5c
 800a664:	fb00 f202 	mul.w	r2, r0, r2
 800a668:	4413      	add	r3, r2
 800a66a:	440b      	add	r3, r1
 800a66c:	3325      	adds	r3, #37	; 0x25
 800a66e:	7aba      	ldrb	r2, [r7, #10]
 800a670:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6858      	ldr	r0, [r3, #4]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	b29c      	uxth	r4, r3
 800a67a:	68f9      	ldr	r1, [r7, #12]
 800a67c:	697a      	ldr	r2, [r7, #20]
 800a67e:	4613      	mov	r3, r2
 800a680:	005b      	lsls	r3, r3, #1
 800a682:	4413      	add	r3, r2
 800a684:	005b      	lsls	r3, r3, #1
 800a686:	225c      	movs	r2, #92	; 0x5c
 800a688:	fb00 f202 	mul.w	r2, r0, r2
 800a68c:	4413      	add	r3, r2
 800a68e:	440b      	add	r3, r1
 800a690:	3326      	adds	r3, #38	; 0x26
 800a692:	4622      	mov	r2, r4
 800a694:	801a      	strh	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6858      	ldr	r0, [r3, #4]
 800a69a:	68f9      	ldr	r1, [r7, #12]
 800a69c:	697a      	ldr	r2, [r7, #20]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	005b      	lsls	r3, r3, #1
 800a6a2:	4413      	add	r3, r2
 800a6a4:	005b      	lsls	r3, r3, #1
 800a6a6:	225c      	movs	r2, #92	; 0x5c
 800a6a8:	fb00 f202 	mul.w	r2, r0, r2
 800a6ac:	4413      	add	r3, r2
 800a6ae:	440b      	add	r3, r1
 800a6b0:	3328      	adds	r3, #40	; 0x28
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	701a      	strb	r2, [r3, #0]
}
 800a6b6:	bf00      	nop
 800a6b8:	3718      	adds	r7, #24
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bc90      	pop	{r4, r7}
 800a6be:	4770      	bx	lr

0800a6c0 <USBD_FrameWork_HID_Desc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void  USBD_FrameWork_HID_Desc(USBD_DevClassHandleTypeDef *pdev,
                                     uint32_t pConf, uint32_t *Sze)
{
 800a6c0:	b590      	push	{r4, r7, lr}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]
  static USBD_IfDescTypedef       *pIfDesc;
  static USBD_EpDescTypedef       *pEpDesc;
  static USBD_HIDDescTypedef      *pHidDesc;

  switch(pdev->tclasslist[pdev->classId].InterfaceType)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	215c      	movs	r1, #92	; 0x5c
 800a6d4:	fb01 f303 	mul.w	r3, r1, r3
 800a6d8:	4413      	add	r3, r2
 800a6da:	3314      	adds	r3, #20
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	2b02      	cmp	r3, #2
 800a6e0:	f040 80f5 	bne.w	800a8ce <USBD_FrameWork_HID_Desc+0x20e>

#if USBD_HID_MOUSE_ACTIVATED == 1U
    case INTERFACE_HID_MOUSE:

      /* Append HID Interface descriptor to Configuration descriptor */
      __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U,
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	4b80      	ldr	r3, [pc, #512]	; (800a8f0 <USBD_FrameWork_HID_Desc+0x230>)
 800a6f0:	601a      	str	r2, [r3, #0]
 800a6f2:	4b7f      	ldr	r3, [pc, #508]	; (800a8f0 <USBD_FrameWork_HID_Desc+0x230>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2209      	movs	r2, #9
 800a6f8:	701a      	strb	r2, [r3, #0]
 800a6fa:	4b7d      	ldr	r3, [pc, #500]	; (800a8f0 <USBD_FrameWork_HID_Desc+0x230>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2204      	movs	r2, #4
 800a700:	705a      	strb	r2, [r3, #1]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	685a      	ldr	r2, [r3, #4]
 800a706:	4b7a      	ldr	r3, [pc, #488]	; (800a8f0 <USBD_FrameWork_HID_Desc+0x230>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68f9      	ldr	r1, [r7, #12]
 800a70c:	205c      	movs	r0, #92	; 0x5c
 800a70e:	fb00 f202 	mul.w	r2, r0, r2
 800a712:	440a      	add	r2, r1
 800a714:	325a      	adds	r2, #90	; 0x5a
 800a716:	7812      	ldrb	r2, [r2, #0]
 800a718:	709a      	strb	r2, [r3, #2]
 800a71a:	4b75      	ldr	r3, [pc, #468]	; (800a8f0 <USBD_FrameWork_HID_Desc+0x230>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2200      	movs	r2, #0
 800a720:	70da      	strb	r2, [r3, #3]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	68fa      	ldr	r2, [r7, #12]
 800a728:	215c      	movs	r1, #92	; 0x5c
 800a72a:	fb01 f303 	mul.w	r3, r1, r3
 800a72e:	4413      	add	r3, r2
 800a730:	331c      	adds	r3, #28
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	4b6e      	ldr	r3, [pc, #440]	; (800a8f0 <USBD_FrameWork_HID_Desc+0x230>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	b2d2      	uxtb	r2, r2
 800a73a:	711a      	strb	r2, [r3, #4]
 800a73c:	4b6c      	ldr	r3, [pc, #432]	; (800a8f0 <USBD_FrameWork_HID_Desc+0x230>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2203      	movs	r2, #3
 800a742:	715a      	strb	r2, [r3, #5]
 800a744:	4b6a      	ldr	r3, [pc, #424]	; (800a8f0 <USBD_FrameWork_HID_Desc+0x230>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2201      	movs	r2, #1
 800a74a:	719a      	strb	r2, [r3, #6]
 800a74c:	4b68      	ldr	r3, [pc, #416]	; (800a8f0 <USBD_FrameWork_HID_Desc+0x230>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2202      	movs	r2, #2
 800a752:	71da      	strb	r2, [r3, #7]
 800a754:	4b66      	ldr	r3, [pc, #408]	; (800a8f0 <USBD_FrameWork_HID_Desc+0x230>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2200      	movs	r2, #0
 800a75a:	721a      	strb	r2, [r3, #8]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f103 0209 	add.w	r2, r3, #9
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	601a      	str	r2, [r3, #0]
                              (uint8_t)(pdev->tclasslist[pdev->classId].NumEps),
                              UX_DEVICE_CLASS_HID_CLASS,
                              0x01U, INTERFACE_HID_MOUSE, 0U);

      /* Append HID Functional descriptor to Configuration descriptor */
      pHidDesc = ((USBD_HIDDescTypedef *)(pConf + *Sze));
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	4413      	add	r3, r2
 800a770:	461a      	mov	r2, r3
 800a772:	4b60      	ldr	r3, [pc, #384]	; (800a8f4 <USBD_FrameWork_HID_Desc+0x234>)
 800a774:	601a      	str	r2, [r3, #0]
      pHidDesc->bLength = (uint8_t)sizeof(USBD_HIDDescTypedef);
 800a776:	4b5f      	ldr	r3, [pc, #380]	; (800a8f4 <USBD_FrameWork_HID_Desc+0x234>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2209      	movs	r2, #9
 800a77c:	701a      	strb	r2, [r3, #0]
      pHidDesc->bDescriptorType = UX_DEVICE_CLASS_HID_DESCRIPTOR_HID;
 800a77e:	4b5d      	ldr	r3, [pc, #372]	; (800a8f4 <USBD_FrameWork_HID_Desc+0x234>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2221      	movs	r2, #33	; 0x21
 800a784:	705a      	strb	r2, [r3, #1]
      pHidDesc->bcdHID = 0x0111U;
 800a786:	4b5b      	ldr	r3, [pc, #364]	; (800a8f4 <USBD_FrameWork_HID_Desc+0x234>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f042 0211 	orr.w	r2, r2, #17
 800a790:	709a      	strb	r2, [r3, #2]
 800a792:	2200      	movs	r2, #0
 800a794:	f042 0201 	orr.w	r2, r2, #1
 800a798:	70da      	strb	r2, [r3, #3]
      pHidDesc->bCountryCode = 0x00U;
 800a79a:	4b56      	ldr	r3, [pc, #344]	; (800a8f4 <USBD_FrameWork_HID_Desc+0x234>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	711a      	strb	r2, [r3, #4]
      pHidDesc->bNumDescriptors = 0x01U;
 800a7a2:	4b54      	ldr	r3, [pc, #336]	; (800a8f4 <USBD_FrameWork_HID_Desc+0x234>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	715a      	strb	r2, [r3, #5]
      pHidDesc->bHIDDescriptorType = 0x22U;
 800a7aa:	4b52      	ldr	r3, [pc, #328]	; (800a8f4 <USBD_FrameWork_HID_Desc+0x234>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2222      	movs	r2, #34	; 0x22
 800a7b0:	719a      	strb	r2, [r3, #6]
      pHidDesc->wDescriptorLength = USBD_HID_ReportDesc_length(INTERFACE_HID_MOUSE);
 800a7b2:	4b50      	ldr	r3, [pc, #320]	; (800a8f4 <USBD_FrameWork_HID_Desc+0x234>)
 800a7b4:	681c      	ldr	r4, [r3, #0]
 800a7b6:	2002      	movs	r0, #2
 800a7b8:	f7ff fc76 	bl	800a0a8 <USBD_HID_ReportDesc_length>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	f8a4 3007 	strh.w	r3, [r4, #7]
      *Sze += (uint32_t)sizeof(USBD_HIDDescTypedef);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f103 0209 	add.w	r2, r3, #9
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	601a      	str	r2, [r3, #0]

      if (pdev->Speed == USBD_HIGH_SPEED)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d13d      	bne.n	800a852 <USBD_FrameWork_HID_Desc+0x192>
      {
        /* Append Endpoint descriptor to Configuration descriptor */
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	4413      	add	r3, r2
 800a7de:	461a      	mov	r2, r3
 800a7e0:	4b45      	ldr	r3, [pc, #276]	; (800a8f8 <USBD_FrameWork_HID_Desc+0x238>)
 800a7e2:	601a      	str	r2, [r3, #0]
 800a7e4:	4b44      	ldr	r3, [pc, #272]	; (800a8f8 <USBD_FrameWork_HID_Desc+0x238>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2207      	movs	r2, #7
 800a7ea:	701a      	strb	r2, [r3, #0]
 800a7ec:	4b42      	ldr	r3, [pc, #264]	; (800a8f8 <USBD_FrameWork_HID_Desc+0x238>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2205      	movs	r2, #5
 800a7f2:	705a      	strb	r2, [r3, #1]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	685a      	ldr	r2, [r3, #4]
 800a7f8:	4b3f      	ldr	r3, [pc, #252]	; (800a8f8 <USBD_FrameWork_HID_Desc+0x238>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68f9      	ldr	r1, [r7, #12]
 800a7fe:	205c      	movs	r0, #92	; 0x5c
 800a800:	fb00 f202 	mul.w	r2, r0, r2
 800a804:	440a      	add	r2, r1
 800a806:	3224      	adds	r2, #36	; 0x24
 800a808:	7812      	ldrb	r2, [r2, #0]
 800a80a:	709a      	strb	r2, [r3, #2]
 800a80c:	4b3a      	ldr	r3, [pc, #232]	; (800a8f8 <USBD_FrameWork_HID_Desc+0x238>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	2203      	movs	r2, #3
 800a812:	70da      	strb	r2, [r3, #3]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	685a      	ldr	r2, [r3, #4]
 800a818:	4b37      	ldr	r3, [pc, #220]	; (800a8f8 <USBD_FrameWork_HID_Desc+0x238>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	68f9      	ldr	r1, [r7, #12]
 800a81e:	205c      	movs	r0, #92	; 0x5c
 800a820:	fb00 f202 	mul.w	r2, r0, r2
 800a824:	440a      	add	r2, r1
 800a826:	3226      	adds	r2, #38	; 0x26
 800a828:	8812      	ldrh	r2, [r2, #0]
 800a82a:	809a      	strh	r2, [r3, #4]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	2b01      	cmp	r3, #1
 800a832:	d104      	bne.n	800a83e <USBD_FrameWork_HID_Desc+0x17e>
 800a834:	4b30      	ldr	r3, [pc, #192]	; (800a8f8 <USBD_FrameWork_HID_Desc+0x238>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2205      	movs	r2, #5
 800a83a:	719a      	strb	r2, [r3, #6]
 800a83c:	e003      	b.n	800a846 <USBD_FrameWork_HID_Desc+0x186>
 800a83e:	4b2e      	ldr	r3, [pc, #184]	; (800a8f8 <USBD_FrameWork_HID_Desc+0x238>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2205      	movs	r2, #5
 800a844:	719a      	strb	r2, [r3, #6]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	1dda      	adds	r2, r3, #7
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	601a      	str	r2, [r3, #0]
                                (uint16_t)pdev->tclasslist[pdev->classId].Eps[0].size,
                                USBD_HID_MOUSE_EPIN_HS_BINTERVAL,
                                USBD_HID_MOUSE_EPIN_FS_BINTERVAL);
      }

      break;
 800a850:	e03e      	b.n	800a8d0 <USBD_FrameWork_HID_Desc+0x210>
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	4413      	add	r3, r2
 800a85a:	461a      	mov	r2, r3
 800a85c:	4b26      	ldr	r3, [pc, #152]	; (800a8f8 <USBD_FrameWork_HID_Desc+0x238>)
 800a85e:	601a      	str	r2, [r3, #0]
 800a860:	4b25      	ldr	r3, [pc, #148]	; (800a8f8 <USBD_FrameWork_HID_Desc+0x238>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2207      	movs	r2, #7
 800a866:	701a      	strb	r2, [r3, #0]
 800a868:	4b23      	ldr	r3, [pc, #140]	; (800a8f8 <USBD_FrameWork_HID_Desc+0x238>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2205      	movs	r2, #5
 800a86e:	705a      	strb	r2, [r3, #1]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	685a      	ldr	r2, [r3, #4]
 800a874:	4b20      	ldr	r3, [pc, #128]	; (800a8f8 <USBD_FrameWork_HID_Desc+0x238>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68f9      	ldr	r1, [r7, #12]
 800a87a:	205c      	movs	r0, #92	; 0x5c
 800a87c:	fb00 f202 	mul.w	r2, r0, r2
 800a880:	440a      	add	r2, r1
 800a882:	3224      	adds	r2, #36	; 0x24
 800a884:	7812      	ldrb	r2, [r2, #0]
 800a886:	709a      	strb	r2, [r3, #2]
 800a888:	4b1b      	ldr	r3, [pc, #108]	; (800a8f8 <USBD_FrameWork_HID_Desc+0x238>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2203      	movs	r2, #3
 800a88e:	70da      	strb	r2, [r3, #3]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	685a      	ldr	r2, [r3, #4]
 800a894:	4b18      	ldr	r3, [pc, #96]	; (800a8f8 <USBD_FrameWork_HID_Desc+0x238>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68f9      	ldr	r1, [r7, #12]
 800a89a:	205c      	movs	r0, #92	; 0x5c
 800a89c:	fb00 f202 	mul.w	r2, r0, r2
 800a8a0:	440a      	add	r2, r1
 800a8a2:	3226      	adds	r2, #38	; 0x26
 800a8a4:	8812      	ldrh	r2, [r2, #0]
 800a8a6:	809a      	strh	r2, [r3, #4]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d104      	bne.n	800a8ba <USBD_FrameWork_HID_Desc+0x1fa>
 800a8b0:	4b11      	ldr	r3, [pc, #68]	; (800a8f8 <USBD_FrameWork_HID_Desc+0x238>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2205      	movs	r2, #5
 800a8b6:	719a      	strb	r2, [r3, #6]
 800a8b8:	e003      	b.n	800a8c2 <USBD_FrameWork_HID_Desc+0x202>
 800a8ba:	4b0f      	ldr	r3, [pc, #60]	; (800a8f8 <USBD_FrameWork_HID_Desc+0x238>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2205      	movs	r2, #5
 800a8c0:	719a      	strb	r2, [r3, #6]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	1dda      	adds	r2, r3, #7
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	601a      	str	r2, [r3, #0]
      break;
 800a8cc:	e000      	b.n	800a8d0 <USBD_FrameWork_HID_Desc+0x210>
#endif /* USBD_HID_MOUSE_ACTIVATED == 1U */

    default:
      break;
 800a8ce:	bf00      	nop
  }

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 1U;
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	791a      	ldrb	r2, [r3, #4]
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	3201      	adds	r2, #1
 800a8d8:	b2d2      	uxtb	r2, r2
 800a8da:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	b292      	uxth	r2, r2
 800a8e4:	805a      	strh	r2, [r3, #2]

}
 800a8e6:	bf00      	nop
 800a8e8:	3714      	adds	r7, #20
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd90      	pop	{r4, r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	24001f00 	.word	0x24001f00
 800a8f4:	24001f04 	.word	0x24001f04
 800a8f8:	24001f08 	.word	0x24001f08

0800a8fc <USBD_HID_Mouse_Activate>:
 *         This function is called when insertion of a HID Mouse device.
 * @param  hid_instance: Pointer to the hid class instance.
 * @retval none
 */
VOID USBD_HID_Mouse_Activate(VOID *hid_instance)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN USBD_HID_Mouse_Activate */
	hid_mouse = (UX_SLAVE_CLASS_HID *)hid_instance;
 800a904:	4a05      	ldr	r2, [pc, #20]	; (800a91c <USBD_HID_Mouse_Activate+0x20>)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800a90a:	2201      	movs	r2, #1
 800a90c:	2101      	movs	r1, #1
 800a90e:	4804      	ldr	r0, [pc, #16]	; (800a920 <USBD_HID_Mouse_Activate+0x24>)
 800a910:	f7f6 fb00 	bl	8000f14 <HAL_GPIO_WritePin>
	/* USER CODE END USBD_HID_Mouse_Activate */

	return;
 800a914:	bf00      	nop
}
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	24001f0c 	.word	0x24001f0c
 800a920:	58020400 	.word	0x58020400

0800a924 <USBD_HID_Mouse_Deactivate>:
 *         This function is called when extraction of a HID Mouse device.
 * @param  hid_instance: Pointer to the hid class instance.
 * @retval none
 */
VOID USBD_HID_Mouse_Deactivate(VOID *hid_instance)
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN USBD_HID_Mouse_Deactivate */
	hid_mouse = UX_NULL;
 800a92c:	4b04      	ldr	r3, [pc, #16]	; (800a940 <USBD_HID_Mouse_Deactivate+0x1c>)
 800a92e:	2200      	movs	r2, #0
 800a930:	601a      	str	r2, [r3, #0]
	/* USER CODE END USBD_HID_Mouse_Deactivate */

	return;
 800a932:	bf00      	nop
}
 800a934:	370c      	adds	r7, #12
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	24001f0c 	.word	0x24001f0c

0800a944 <USBD_HID_Mouse_SetReport>:
 * @param  hid_event: Pointer to structure of the hid event.
 * @retval status
 */
UINT USBD_HID_Mouse_SetReport(UX_SLAVE_CLASS_HID *hid_instance,
		UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
	UINT status = UX_SUCCESS;
 800a94e:	2300      	movs	r3, #0
 800a950:	60fb      	str	r3, [r7, #12]
	/* USER CODE BEGIN USBD_HID_Mouse_SetReport */
	UX_PARAMETER_NOT_USED(hid_instance);
	UX_PARAMETER_NOT_USED(hid_event);
	/* USER CODE END USBD_HID_Mouse_SetReport */

	return status;
 800a952:	68fb      	ldr	r3, [r7, #12]
}
 800a954:	4618      	mov	r0, r3
 800a956:	3714      	adds	r7, #20
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <USBD_HID_Mouse_GetReport>:
 * @param  hid_event: Pointer to structure of the hid event.
 * @retval status
 */
UINT USBD_HID_Mouse_GetReport(UX_SLAVE_CLASS_HID *hid_instance,
		UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
	UINT status = UX_SUCCESS;
 800a96a:	2300      	movs	r3, #0
 800a96c:	60fb      	str	r3, [r7, #12]
	/* USER CODE BEGIN USBD_HID_Mouse_GetReport */
	UX_PARAMETER_NOT_USED(hid_instance);
	UX_PARAMETER_NOT_USED(hid_event);
	/* USER CODE END USBD_HID_Mouse_GetReport */

	return status;
 800a96e:	68fb      	ldr	r3, [r7, #12]
}
 800a970:	4618      	mov	r0, r3
 800a972:	3714      	adds	r7, #20
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <HID_Mouse_Send>:

/* USER CODE BEGIN 1 */
VOID HID_Mouse_Send(VOID)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b08c      	sub	sp, #48	; 0x30
 800a980:	af00      	add	r7, sp, #0
	/* Local Variables */
	UX_SLAVE_DEVICE *device;
	UX_SLAVE_CLASS_HID_EVENT hid_event;

	device = &_ux_system_slave->ux_system_slave_device;
 800a982:	4b10      	ldr	r3, [pc, #64]	; (800a9c4 <HID_Mouse_Send+0x48>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	3324      	adds	r3, #36	; 0x24
 800a988:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check if the device is configured */
	if((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && hid_mouse != UX_NULL)
 800a98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2b03      	cmp	r3, #3
 800a990:	d114      	bne.n	800a9bc <HID_Mouse_Send+0x40>
 800a992:	4b0d      	ldr	r3, [pc, #52]	; (800a9c8 <HID_Mouse_Send+0x4c>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d010      	beq.n	800a9bc <HID_Mouse_Send+0x40>
	{
		/* Mouse event. Length is fixed to 4 */
		hid_event.ux_device_class_hid_event_length = 4;
 800a99a:	2304      	movs	r3, #4
 800a99c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Set select position */
		hid_event.ux_device_class_hid_event_buffer[0] = 0;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	723b      	strb	r3, [r7, #8]

		/* Set X position */
		hid_event.ux_device_class_hid_event_buffer[1] = 2;
 800a9a2:	2302      	movs	r3, #2
 800a9a4:	727b      	strb	r3, [r7, #9]

		/* Set Y position */
		hid_event.ux_device_class_hid_event_buffer[2] = 2;
 800a9a6:	2302      	movs	r3, #2
 800a9a8:	72bb      	strb	r3, [r7, #10]

		/* Set wheel position */
		hid_event.ux_device_class_hid_event_buffer[3] = 0;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	72fb      	strb	r3, [r7, #11]

		/* Send the report */
		ux_device_class_hid_event_set(hid_mouse, &hid_event);
 800a9ae:	4b06      	ldr	r3, [pc, #24]	; (800a9c8 <HID_Mouse_Send+0x4c>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	463a      	mov	r2, r7
 800a9b4:	4611      	mov	r1, r2
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7fc f9e4 	bl	8006d84 <_ux_device_class_hid_event_set>
	}
}
 800a9bc:	bf00      	nop
 800a9be:	3730      	adds	r7, #48	; 0x30
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	240005e8 	.word	0x240005e8
 800a9c8:	24001f0c 	.word	0x24001f0c

0800a9cc <memset>:
 800a9cc:	4402      	add	r2, r0
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d100      	bne.n	800a9d6 <memset+0xa>
 800a9d4:	4770      	bx	lr
 800a9d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a9da:	e7f9      	b.n	800a9d0 <memset+0x4>

0800a9dc <__libc_init_array>:
 800a9dc:	b570      	push	{r4, r5, r6, lr}
 800a9de:	4d0d      	ldr	r5, [pc, #52]	; (800aa14 <__libc_init_array+0x38>)
 800a9e0:	4c0d      	ldr	r4, [pc, #52]	; (800aa18 <__libc_init_array+0x3c>)
 800a9e2:	1b64      	subs	r4, r4, r5
 800a9e4:	10a4      	asrs	r4, r4, #2
 800a9e6:	2600      	movs	r6, #0
 800a9e8:	42a6      	cmp	r6, r4
 800a9ea:	d109      	bne.n	800aa00 <__libc_init_array+0x24>
 800a9ec:	4d0b      	ldr	r5, [pc, #44]	; (800aa1c <__libc_init_array+0x40>)
 800a9ee:	4c0c      	ldr	r4, [pc, #48]	; (800aa20 <__libc_init_array+0x44>)
 800a9f0:	f000 f818 	bl	800aa24 <_init>
 800a9f4:	1b64      	subs	r4, r4, r5
 800a9f6:	10a4      	asrs	r4, r4, #2
 800a9f8:	2600      	movs	r6, #0
 800a9fa:	42a6      	cmp	r6, r4
 800a9fc:	d105      	bne.n	800aa0a <__libc_init_array+0x2e>
 800a9fe:	bd70      	pop	{r4, r5, r6, pc}
 800aa00:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa04:	4798      	blx	r3
 800aa06:	3601      	adds	r6, #1
 800aa08:	e7ee      	b.n	800a9e8 <__libc_init_array+0xc>
 800aa0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa0e:	4798      	blx	r3
 800aa10:	3601      	adds	r6, #1
 800aa12:	e7f2      	b.n	800a9fa <__libc_init_array+0x1e>
 800aa14:	0800aa84 	.word	0x0800aa84
 800aa18:	0800aa84 	.word	0x0800aa84
 800aa1c:	0800aa84 	.word	0x0800aa84
 800aa20:	0800aa88 	.word	0x0800aa88

0800aa24 <_init>:
 800aa24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa26:	bf00      	nop
 800aa28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa2a:	bc08      	pop	{r3}
 800aa2c:	469e      	mov	lr, r3
 800aa2e:	4770      	bx	lr

0800aa30 <_fini>:
 800aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa32:	bf00      	nop
 800aa34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa36:	bc08      	pop	{r3}
 800aa38:	469e      	mov	lr, r3
 800aa3a:	4770      	bx	lr
